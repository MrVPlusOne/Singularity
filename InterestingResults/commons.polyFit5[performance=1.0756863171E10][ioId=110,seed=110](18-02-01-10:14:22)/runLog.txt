Starting task: commons.polyFit5
[Configuration]
[sizePolicy] FixedEvalSize(100)

stateTypes = Vector(EInt, EInt, EPair(EInt,EInt), EVect(EPair(EInt,EInt)), EVect(EPair(EInt,EInt)))
argConstRatio = 0.2989041595904587
constMap: Map(EInt -> ExprGen(EInt,patsyn.GPEnvGenerator$$Lambda$54/510464020@569cfc36), EPair(EInt,EInt) -> ExprGen(EPair(EInt,EInt),patsyn.GPEnvGenerator$$Lambda$54/510464020@43bd930a), EVect(EPair(EInt,EInt)) -> ExprGen(EVect(EPair(EInt,EInt)),patsyn.GPEnvGenerator$$Lambda$54/510464020@33723e30))
functions: Vector(inc: (EInt) => EInt, dec: (EInt) => EInt, neg: (EInt) => EInt, plus: (EInt,EInt) => EInt, minus: (EInt,EInt) => EInt, times: (EInt,EInt) => EInt, divide: (EInt,EInt) => EInt, modular: (EInt,EInt) => EInt, append[1], prepend[1], access[1], last[1], concat[1], length[1], emptyGraph[1], addNode[1], addEdge[1], growEdge[1], growSelfLoop[1], bridgeEdge[1], deleteEdge[1], mergeGraph[1], updateEdge[1], pair1[2], pair2[2], mkPair[2])
     

[Runner config]

ioId: 110
randomSeed: 110
previewPatternLen: 7
       
[GP config]

populationSize: 251
tournamentSize: 6
evaluationTrials：1
totalSizeTolerance：126
singleSizeTolerance：28
crossoverP: 0.5
mutateP: 0.4059530905760119
copyP: 0.1488951361779071
     
[execution config]

sizeOfInterest: FixedEvalSize(100)
threadNum：1
timeLimitInMillis：120000
maxNonIncreaseGen：Some(150)
maxFuzzingTimeSec: None
     
       
[End of Configuration]

[Function map]
EInt -> {inc: (EInt) => EInt, dec: (EInt) => EInt, neg: (EInt) => EInt, plus: (EInt,EInt) => EInt, minus: (EInt,EInt) => EInt, times: (EInt,EInt) => EInt, divide: (EInt,EInt) => EInt, modular: (EInt,EInt) => EInt, length: (EVect(EPair(EInt,EInt))) => EInt, pair1: (EPair(EInt,EInt)) => EInt, pair2: (EPair(EInt,EInt)) => EInt}
EPair(EInt,EInt) -> {access: (EVect(EPair(EInt,EInt)),EInt,EPair(EInt,EInt)) => EPair(EInt,EInt), last: (EVect(EPair(EInt,EInt)),EPair(EInt,EInt)) => EPair(EInt,EInt), mkPair: (EInt,EInt) => EPair(EInt,EInt)}
EVect(EPair(EInt,EInt)) -> {append: (EVect(EPair(EInt,EInt)),EPair(EInt,EInt)) => EVect(EPair(EInt,EInt)), prepend: (EPair(EInt,EInt),EVect(EPair(EInt,EInt))) => EVect(EPair(EInt,EInt)), concat: (EVect(EPair(EInt,EInt)),EVect(EPair(EInt,EInt))) => EVect(EPair(EInt,EInt))}
[End of Function map]

new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[0.125s]Generation 1
Best Result: (fitness: 222468.1, performance: 238312.0), Created by Init
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(append(#4, (43,112)), #2))
*
[S0: EInt]{ seed: 217 ; iter: #1; seedExpr: dec(plus(80, 138)) }
[S1: EInt]{ seed: 97 ; iter: 183; seedExpr: pair1(mkPair(97, modular(118, 51))) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), plus(177, #1), mkPair(#1, length([]))); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append(#4, (113,204)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend(mkPair(times(109, 82), neg(189)), #4); seedExpr: [] }
Best Individual Pattern: Vector([(7,114),(43,112),(181,5)]), Vector([(7,114),(8938,-189),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(43,112),(64,71)]), ...
Average Size: 39.689243027888445
Average Fitness: 14674.040305337547
Fitness Variation: 40905.26807568157
Distribution: [] -> 0.197, #4 -> 0.046, concat -> 0.043, prepend -> 0.043, append -> 0.041, #1 -> 0.035, #2 -> 0.030, #3 -> 0.029, mkPair -> 0.028, last -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[0.778s]Generation 2
Best Result: (fitness: 293142.0, performance: 310793.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(append(#4, (43,112)), #2))
*
[S0: EInt]{ seed: 217 ; iter: #1; seedExpr: dec(plus(80, 138)) }
[S1: EInt]{ seed: 97 ; iter: 183; seedExpr: pair1(mkPair(97, modular(118, 51))) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), pair2((157,143)), mkPair(#1, length([]))); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append(#4, (113,204)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend(mkPair(times(109, 82), neg(189)), #4); seedExpr: [] }
Best Individual Pattern: Vector([(7,114),(43,112),(181,5)]), Vector([(7,114),(8938,-189),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(43,112),(9,32)]), ...
Average Size: 47.701195219123505
Average Fitness: 65784.10949559159
Fitness Variation: 65536.35397430198
Distribution: [] -> 0.194, #4 -> 0.058, concat -> 0.055, prepend -> 0.051, append -> 0.045, #2 -> 0.031, mkPair -> 0.030, #3 -> 0.029, #1 -> 0.028, last -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[1.229s]Generation 3
Best Result: (fitness: 314907.0, performance: 331106.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(append(#4, (43,112)), #2))
*
[S0: EInt]{ seed: 217 ; iter: #1; seedExpr: dec(plus(80, 138)) }
[S1: EInt]{ seed: 97 ; iter: 183; seedExpr: pair1(mkPair(97, modular(118, 51))) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), plus(177, #1), (113,204)); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append(#4, (113,204)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(119,148)] ; iter: prepend(mkPair(times(109, 82), neg(189)), #4); seedExpr: append([], mkPair(119, 148)) }
Best Individual Pattern: Vector([(7,114),(119,148),(43,112),(181,5)]), Vector([(7,114),(8938,-189),(119,148),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(119,148),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(64,71)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(64,71)]), ...
Average Size: 46.330677290836654
Average Fitness: 135578.07540855455
Fitness Variation: 63215.092754789366
Distribution: [] -> 0.193, concat -> 0.061, #4 -> 0.060, append -> 0.054, prepend -> 0.051, #1 -> 0.033, mkPair -> 0.032, #3 -> 0.032, #2 -> 0.029, #0 -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[1.671s]Generation 4
Best Result: (fitness: 393672.5, performance: 405655.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 6 ; iter: divide(#0, #0); seedExpr: pair1((6,200)) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((112,165), #3), mkPair(dec(#1), 103)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(112,165),(148,52),(152,42),(142,141),(145,103)]), Vector([(146,0),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103)]), Vector([(146,0),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103)]), Vector([(146,0),(112,165),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103),(145,103),(112,165),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103)]), Vector([(146,0),(112,165),(112,165),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103),(145,103),(145,103),(112,165),(112,165),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103),(145,103)]), Vector([(146,0),(112,165),(112,165),(112,165),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103),(145,103),(145,103),(145,103),(112,165),(112,165),(112,165),(112,165),(112,165),(112,165),(148,52),(152,42),(142,141),(145,103),(145,103),(145,103),(145,103),(145,103),(145,103)]), ...
Average Size: 47.43824701195219
Average Fitness: 188955.5174248809
Fitness Variation: 76122.18069171558
Distribution: [] -> 0.166, append -> 0.075, #4 -> 0.069, concat -> 0.058, prepend -> 0.045, #1 -> 0.033, mkPair -> 0.029, #3 -> 0.027, #2 -> 0.026, #0 -> 0.019
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[1.983s]Generation 5
Best Result: (fitness: 370227.0, performance: 387964.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(append(#4, (43,112)), #2))
*
[S0: EInt]{ seed: 137 ; iter: #1; seedExpr: dec(138) }
[S1: EInt]{ seed: 97 ; iter: 183; seedExpr: pair1(mkPair(97, modular(118, 51))) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), plus(134, #1), (113,204)); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append(#4, (113,204)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(119,148)] ; iter: prepend(mkPair(times(109, 82), neg(189)), #4); seedExpr: append([], mkPair(119, 148)) }
Best Individual Pattern: Vector([(7,114),(119,148),(43,112),(181,5)]), Vector([(7,114),(8938,-189),(119,148),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(119,148),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(43,112),(9,32)]), ...
Average Size: 49.18725099601593
Average Fitness: 229357.02450497268
Fitness Variation: 77792.04912540205
Distribution: [] -> 0.130, #4 -> 0.089, append -> 0.084, concat -> 0.048, #1 -> 0.038, prepend -> 0.035, mkPair -> 0.033, #2 -> 0.024, (43,112) -> 0.022, neg -> 0.021
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[2.453s]Generation 6
Best Result: (fitness: 397776.7, performance: 424185.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(prepend((7,114), append(append(#3, (43,112)), #2)), #2))
*
[S0: EInt]{ seed: 217 ; iter: #1; seedExpr: dec(plus(80, 138)) }
[S1: EInt]{ seed: 16 ; iter: 183; seedExpr: modular(118, 51) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), plus(177, #1), (113,204)); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append(#4, (113,204)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(119,148)] ; iter: prepend(mkPair(times(109, 82), neg(189)), #4); seedExpr: append([], mkPair(119, 148)) }
Best Individual Pattern: Vector([(7,114),(7,114),(43,112),(181,5),(181,5)]), Vector([(7,114),(7,114),(119,148),(119,148),(119,148),(113,204),(43,112),(9,32),(9,32)]), Vector([(7,114),(7,114),(8938,-189),(119,148),(8938,-189),(119,148),(8938,-189),(119,148),(113,204),(43,112),(64,71),(64,71)]), Vector([(7,114),(7,114),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(119,148),(113,204),(43,112),(64,71),(64,71)]), Vector([(7,114),(7,114),(8938,-189),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(8938,-189),(119,148),(113,204),(43,112),(64,71),(64,71)]), Vector([(7,114),(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(113,204),(43,112),(64,71),(64,71)]), Vector([(7,114),(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(119,148),(113,204),(43,112),(64,71),(64,71)]), ...
Average Size: 49.713147410358566
Average Fitness: 259248.55959225792
Fitness Variation: 93029.11287635977
Distribution: [] -> 0.100, #4 -> 0.100, append -> 0.095, #1 -> 0.040, mkPair -> 0.039, concat -> 0.038, #2 -> 0.028, (113,204) -> 0.027, 82 -> 0.026, (43,112) -> 0.026
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[2.961s]Generation 7
Best Result: (fitness: 408408.7, performance: 440260.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(append(append(concat(#3, []), (35,118)), (127,89)), #2))
*
[S0: EInt]{ seed: 96 ; iter: #1; seedExpr: dec(97) }
[S1: EInt]{ seed: 97 ; iter: 183; seedExpr: pair1(mkPair(97, modular(118, 51))) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), pair2((157,143)), mkPair(#1, length(#4))); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append(#4, (113,204)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend(mkPair(times(109, 82), neg(189)), #4); seedExpr: [] }
Best Individual Pattern: Vector([(7,114),(35,118),(127,89),(181,5)]), Vector([(7,114),(113,204),(35,118),(127,89),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(113,204),(35,118),(127,89),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(113,204),(35,118),(127,89),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(113,204),(35,118),(127,89),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(113,204),(35,118),(127,89),(9,32)]), Vector([(7,114),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(8938,-189),(113,204),(35,118),(127,89),(9,32)]), ...
Average Size: 50.49003984063745
Average Fitness: 294282.99549895234
Fitness Variation: 98976.29426609274
Distribution: #4 -> 0.107, append -> 0.100, [] -> 0.094, concat -> 0.043, mkPair -> 0.039, #1 -> 0.039, (113,204) -> 0.036, (43,112) -> 0.028, 82 -> 0.027, #2 -> 0.026
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[3.361s]Generation 8
Best Result: (fitness: 554763.5, performance: 576476.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 6 ; iter: divide(#0, #0); seedExpr: pair1((6,200)) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((136,208), #3), mkPair(dec(times(109, 82)), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(136,208),(148,52),(152,42),(142,141),(8937,146),(145,103),(136,208),(148,52),(152,42),(142,141),(8937,146)]), Vector([(146,0),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(145,103),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146)]), ...
Average Size: 50.721115537848604
Average Fitness: 323861.734724831
Fitness Variation: 108805.62026884707
Distribution: #4 -> 0.105, append -> 0.105, [] -> 0.096, concat -> 0.043, #1 -> 0.039, mkPair -> 0.038, (113,204) -> 0.037, (43,112) -> 0.028, 189 -> 0.027, #2 -> 0.026
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[3.749s]Generation 9
Best Result: (fitness: 555958.5, performance: 576476.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 6 ; iter: divide(#0, #0); seedExpr: pair1((6,200)) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), #1)); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((136,208), #3), mkPair(dec(times(109, 82)), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(136,208),(148,52),(152,42),(142,141),(8937,146),(145,103),(136,208),(148,52),(152,42),(142,141),(8937,146)]), Vector([(146,0),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(145,103),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(145,103),(136,208),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146),(8937,146)]), ...
Average Size: 50.800796812749006
Average Fitness: 337664.20397541474
Fitness Variation: 109639.88208841877
Distribution: append -> 0.112, #4 -> 0.099, [] -> 0.094, concat -> 0.046, #1 -> 0.039, (113,204) -> 0.035, mkPair -> 0.035, #2 -> 0.034, (43,112) -> 0.028, (64,71) -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[4.205s]Generation 10
Best Result: (fitness: 1439661.7, performance: 1619604.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((7,114), append(append(#4, (43,112)), #2))
*
[S0: EInt]{ seed: 217 ; iter: #1; seedExpr: dec(plus(80, 138)) }
[S1: EInt]{ seed: -1 ; iter: 183; seedExpr: neg(1) }
[S2: EPair(EInt,EInt)]{ seed: (181,5) ; iter: access(append(append([], (64,71)), (9,32)), plus(177, #1), mkPair(#1, length([]))); seedExpr: (181,5) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: concat(#4, concat(concat(#4, []), append([], (64,71)))); seedExpr: [] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(69,80)] ; iter: prepend(mkPair(times(#1, plus(length([]), times(53, pair1(#2)))), neg(1)), #4); seedExpr: prepend(last([], (69,80)), []) }
Best Individual Pattern: Vector([(7,114),(69,80),(43,112),(181,5)]), Vector([(7,114),(-9593,-1),(69,80),(43,112),(64,71)]), Vector([(7,114),(620736,-1),(-9593,-1),(69,80),(43,112),(64,71)]), Vector([(7,114),(620736,-1),(620736,-1),(-9593,-1),(69,80),(43,112),(64,71)]), Vector([(7,114),(620736,-1),(620736,-1),(620736,-1),(-9593,-1),(69,80),(43,112),(64,71)]), Vector([(7,114),(620736,-1),(620736,-1),(620736,-1),(620736,-1),(-9593,-1),(69,80),(43,112),(64,71)]), Vector([(7,114),(620736,-1),(620736,-1),(620736,-1),(620736,-1),(620736,-1),(-9593,-1),(69,80),(43,112),(64,71)]), ...
Average Size: 49.398406374501995
Average Fitness: 355626.2816924108
Fitness Variation: 147770.35805129103
Distribution: append -> 0.109, #4 -> 0.088, [] -> 0.086, #1 -> 0.048, concat -> 0.041, mkPair -> 0.037, #2 -> 0.034, #3 -> 0.030, (113,204) -> 0.029, prepend -> 0.028
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[4.687s]Generation 11
Best Result: (fitness: 2699858.2, performance: 2822983.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), [])
*
[S0: EInt]{ seed: 6 ; iter: divide(#0, #0); seedExpr: pair1((6,200)) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((136,208), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103)]), Vector([(146,0),(136,208),(148,52),(152,42),(142,141),(19619,146),(145,103)]), Vector([(146,0),(136,208),(136,208),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(136,208),(136,208),(136,208),(136,208),(136,208),(136,208),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), ...
Average Size: 49.45816733067729
Average Fitness: 401569.1295285958
Fitness Variation: 257202.1037940019
Distribution: append -> 0.096, [] -> 0.080, #4 -> 0.071, #1 -> 0.069, mkPair -> 0.041, #3 -> 0.037, concat -> 0.032, dec -> 0.032, prepend -> 0.032, #2 -> 0.032
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[5.308s]Generation 12
Best Result: (fitness: 7125070.1, performance: 7450003.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), [])
*
[S0: EInt]{ seed: 6 ; iter: divide(#0, #0); seedExpr: pair1((6,200)) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), ...
Average Size: 49.55378486055777
Average Fitness: 533084.2496480054
Fitness Variation: 550785.2530559286
Distribution: #1 -> 0.096, [] -> 0.087, append -> 0.078, #4 -> 0.048, mkPair -> 0.045, dec -> 0.044, #3 -> 0.042, prepend -> 0.032, times -> 0.031, #2 -> 0.029
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[5.850s]Generation 13
Best Result: (fitness: 7125070.1, performance: 7450003.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), [])
*
[S0: EInt]{ seed: 0 ; iter: divide(#0, #0); seedExpr: length([]) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), ...
Average Size: 47.97609561752988
Average Fitness: 724556.3495269913
Fitness Variation: 794167.3180820093
Distribution: [] -> 0.107, #1 -> 0.092, append -> 0.072, dec -> 0.052, #3 -> 0.046, mkPair -> 0.043, #2 -> 0.042, times -> 0.039, #4 -> 0.037, prepend -> 0.032
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[6.803s]Generation 14
Best Result: (fitness: 7125070.1, performance: 7450003.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), [])
*
[S0: EInt]{ seed: 0 ; iter: divide(#0, #0); seedExpr: length([]) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), ...
Average Size: 50.57768924302789
Average Fitness: 1257799.136653546
Fitness Variation: 1449366.703875425
Distribution: [] -> 0.125, #1 -> 0.084, append -> 0.071, #4 -> 0.048, #2 -> 0.048, times -> 0.043, dec -> 0.036, mkPair -> 0.035, length -> 0.035, plus -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[7.702s]Generation 15
Best Result: (fitness: 7184210.9, performance: 7450003.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), [])
*
[S0: EInt]{ seed: 0 ; iter: divide(#0, #0); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103)]), ...
Average Size: 48.211155378486055
Average Fitness: 1917705.399768558
Fitness Variation: 2169566.5279119266
Distribution: [] -> 0.098, #1 -> 0.095, append -> 0.066, dec -> 0.058, #3 -> 0.053, mkPair -> 0.044, times -> 0.040, #2 -> 0.039, prepend -> 0.034, pair1 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[9.169s]Generation 16
Best Result: (fitness: 10172995.7, performance: 10679648.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 19619 ; iter: divide(#0, #0); seedExpr: dec(times(109, pair1((180,38)))) }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,146)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), ...
Average Size: 46.298804780876495
Average Fitness: 2854105.963411082
Fitness Variation: 2856725.0367638296
Distribution: #1 -> 0.104, dec -> 0.081, [] -> 0.077, #3 -> 0.075, append -> 0.060, mkPair -> 0.052, 109 -> 0.043, prepend -> 0.041, times -> 0.038, pair1 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[10.950s]Generation 17
Best Result: (fitness: 10223933.5, performance: 10679648.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 109 ; iter: divide(#0, #0); seedExpr: 109 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: prepend((148,52), append(append([], (152,42)), (142,141))) }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,146)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), ...
Average Size: 45.85657370517928
Average Fitness: 3451700.065661892
Fitness Variation: 3248297.9412406674
Distribution: #1 -> 0.101, dec -> 0.087, #3 -> 0.081, [] -> 0.070, append -> 0.061, mkPair -> 0.055, 109 -> 0.049, (180,38) -> 0.046, pair1 -> 0.043, prepend -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[12.461s]Generation 18
Best Result: (fitness: 10298632.6, performance: 10679648.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 19619 ; iter: divide(#0, #0); seedExpr: 19619 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,146),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,146)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), ...
Average Size: 43.70916334661354
Average Fitness: 3277565.9770651744
Fitness Variation: 3476351.964152855
Distribution: #1 -> 0.098, dec -> 0.091, #3 -> 0.089, [] -> 0.064, append -> 0.057, mkPair -> 0.057, (180,38) -> 0.052, 109 -> 0.050, pair1 -> 0.047, prepend -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[14.098s]Generation 19
Best Result: (fitness: 12104183.4, performance: 12589650.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(#1, 103))), [])
*
[S0: EInt]{ seed: 0 ; iter: divide(#0, #0); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (18,180) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (18,180) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(18,180),(148,52),(152,42),(142,141),(146,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,3),(146,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(146,103)]), ...
Average Size: 42.310756972111555
Average Fitness: 3998944.596389738
Fitness Variation: 3936843.6029734286
Distribution: #1 -> 0.103, #3 -> 0.092, dec -> 0.088, mkPair -> 0.060, [] -> 0.059, append -> 0.055, (180,38) -> 0.053, 109 -> 0.048, pair1 -> 0.046, prepend -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[16.157s]Generation 20
Best Result: (fitness: 12104183.4, performance: 12589650.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(#1, 103))), [])
*
[S0: EInt]{ seed: 0 ; iter: divide(#0, #0); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (18,180) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (18,180) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(18,180),(148,52),(152,42),(142,141),(146,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,3),(146,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(146,103)]), ...
Average Size: 41.88446215139442
Average Fitness: 4895721.522256467
Fitness Variation: 4477493.750247797
Distribution: #1 -> 0.100, #3 -> 0.095, dec -> 0.085, mkPair -> 0.062, (180,38) -> 0.055, append -> 0.053, [] -> 0.052, 109 -> 0.050, pair1 -> 0.049, 103 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[18.063s]Generation 21
Best Result: (fitness: 12104183.4, performance: 12589650.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(#1, 103))), [])
*
[S0: EInt]{ seed: 0 ; iter: divide(#0, #0); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (18,180) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (18,180) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(18,180),(148,52),(152,42),(142,141),(146,103)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,3),(146,103)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(146,103)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(146,103)]), ...
Average Size: 41.721115537848604
Average Fitness: 5492786.680629426
Fitness Variation: 4854490.385126844
Distribution: #3 -> 0.104, #1 -> 0.097, dec -> 0.079, mkPair -> 0.062, (180,38) -> 0.058, pair1 -> 0.053, 109 -> 0.050, append -> 0.050, [] -> 0.046, times -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[20.407s]Generation 22
Best Result: (fitness: 12286835.6, performance: 12837343.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 136; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 41.21513944223108
Average Fitness: 5400344.127197399
Fitness Variation: 5085340.053379205
Distribution: #3 -> 0.109, #1 -> 0.095, dec -> 0.076, mkPair -> 0.065, (180,38) -> 0.059, pair1 -> 0.052, 109 -> 0.052, [] -> 0.046, append -> 0.045, times -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[22.469s]Generation 23
Best Result: (fitness: 12286835.6, performance: 12837343.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(#3, mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 136; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend(#2, #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 41.30677290836653
Average Fitness: 5800145.7149888445
Fitness Variation: 5327244.27707665
Distribution: #3 -> 0.108, #1 -> 0.090, dec -> 0.067, mkPair -> 0.066, (180,38) -> 0.057, pair1 -> 0.050, 109 -> 0.050, [] -> 0.049, times -> 0.044, append -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[24.735s]Generation 24
Best Result: (fitness: 12571363.7, performance: 12963976.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append([(148,52),(152,42),(142,141)], mkPair(#1, 103))), #3)
*
[S0: EInt]{ seed: 19619 ; iter: #0; seedExpr: 19619 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (148,52) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (148,52) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(148,52),(148,52),(152,42),(142,141),(146,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(148,52),(152,42),(142,141),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), ...
Average Size: 41.601593625498005
Average Fitness: 6262178.04249965
Fitness Variation: 5548049.776740267
Distribution: #3 -> 0.113, #1 -> 0.088, mkPair -> 0.065, dec -> 0.062, (180,38) -> 0.054, [] -> 0.049, pair1 -> 0.048, 109 -> 0.046, times -> 0.043, 103 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[27.524s]Generation 25
Best Result: (fitness: 12571363.7, performance: 12963976.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append([(148,52),(152,42),(142,141)], mkPair(#1, 103))), #3)
*
[S0: EInt]{ seed: 19619 ; iter: #0; seedExpr: 19619 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (148,52) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (148,52) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(148,52),(148,52),(152,42),(142,141),(146,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(148,52),(152,42),(142,141),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), ...
Average Size: 40.29083665338646
Average Fitness: 6063562.340498743
Fitness Variation: 5608277.502816433
Distribution: #3 -> 0.124, #1 -> 0.088, mkPair -> 0.066, dec -> 0.062, (180,38) -> 0.053, pair1 -> 0.046, 109 -> 0.046, length -> 0.045, [] -> 0.043, 103 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[30.018s]Generation 26
Best Result: (fitness: 12571363.7, performance: 12963976.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append([(148,52),(152,42),(142,141)], mkPair(#1, 103))), #3)
*
[S0: EInt]{ seed: 19619 ; iter: #0; seedExpr: 19619 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (148,52) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (148,52) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), #1)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(148,52),(148,52),(152,42),(142,141),(146,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(148,52),(152,42),(142,141),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), Vector([(146,0),(148,52),(152,42),(142,141),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146),(19619,146)]), ...
Average Size: 39.54183266932271
Average Fitness: 6322938.09273843
Fitness Variation: 5742440.312639412
Distribution: #3 -> 0.137, #1 -> 0.091, dec -> 0.067, mkPair -> 0.067, (180,38) -> 0.054, pair1 -> 0.047, length -> 0.047, 109 -> 0.046, 103 -> 0.044, prepend -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[31.734s]Generation 27
Best Result: (fitness: 12631574.8, performance: 13387865.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 39.49402390438247
Average Fitness: 6656447.208113757
Fitness Variation: 5679708.114444914
Distribution: #3 -> 0.151, #1 -> 0.088, dec -> 0.081, mkPair -> 0.066, (180,38) -> 0.055, pair1 -> 0.049, length -> 0.047, 109 -> 0.047, prepend -> 0.047, 103 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[34.427s]Generation 28
Best Result: (fitness: 12641725.3, performance: 13387865.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 121; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 39.60557768924303
Average Fitness: 6089118.491789781
Fitness Variation: 5726842.866085686
Distribution: #3 -> 0.154, #1 -> 0.094, dec -> 0.086, mkPair -> 0.065, (180,38) -> 0.056, prepend -> 0.049, pair1 -> 0.046, length -> 0.046, 103 -> 0.043, 109 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[37.166s]Generation 29
Best Result: (fitness: 12666742.3, performance: 13387865.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 121; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), 1)); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 39.366533864541836
Average Fitness: 5712598.327145921
Fitness Variation: 5661938.377940101
Distribution: #3 -> 0.154, #1 -> 0.100, dec -> 0.088, mkPair -> 0.064, (180,38) -> 0.055, prepend -> 0.050, pair1 -> 0.046, (100,204) -> 0.045, 109 -> 0.044, length -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[39.354s]Generation 30
Best Result: (fitness: 12666742.3, performance: 13387865.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 121; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), 1)); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 39.26294820717131
Average Fitness: 6160444.390277834
Fitness Variation: 5778701.972734369
Distribution: #3 -> 0.151, #1 -> 0.104, dec -> 0.087, mkPair -> 0.066, prepend -> 0.053, (180,38) -> 0.053, (100,204) -> 0.047, 103 -> 0.045, pair1 -> 0.044, 109 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[40.979s]Generation 31
Best Result: (fitness: 13490269.6, performance: 14188873.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(#1, 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(146,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(146,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(146,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(146,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(146,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 38.94820717131474
Average Fitness: 6679765.656367109
Fitness Variation: 5799145.938770907
Distribution: #3 -> 0.152, #1 -> 0.107, dec -> 0.090, mkPair -> 0.067, (100,204) -> 0.057, prepend -> 0.057, (180,38) -> 0.055, 109 -> 0.047, pair1 -> 0.046, 103 -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[43.092s]Generation 32
Best Result: (fitness: 12666742.3, performance: 13387865.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 121; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), 1)); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 39.9003984063745
Average Fitness: 6110075.1619131
Fitness Variation: 5830566.3313391525
Distribution: #3 -> 0.156, #1 -> 0.098, dec -> 0.086, (100,204) -> 0.067, prepend -> 0.064, mkPair -> 0.063, (180,38) -> 0.051, pair1 -> 0.044, 109 -> 0.043, length -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[45.194s]Generation 33
Best Result: (fitness: 12684439.0, performance: 13387865.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 121; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), 146)); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(145,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 40.40637450199203
Average Fitness: 6217980.305476875
Fitness Variation: 5876875.959539971
Distribution: #3 -> 0.157, dec -> 0.089, #1 -> 0.087, (100,204) -> 0.074, prepend -> 0.068, mkPair -> 0.061, (180,38) -> 0.051, length -> 0.045, pair1 -> 0.043, 109 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[47.051s]Generation 34
Best Result: (fitness: 13519222.4, performance: 14188873.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(#1, 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 121; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, pair1((180,38)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(146,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(146,103),(100,204),(148,52),(152,42),(142,141),(19619,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(146,103),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(146,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(146,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13),(146,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(19619,3),(19619,5),(19619,7),(19619,9),(19619,11),(19619,13)]), ...
Average Size: 40.66135458167331
Average Fitness: 6443023.1222016
Fitness Variation: 5931331.807611441
Distribution: #3 -> 0.155, dec -> 0.091, #1 -> 0.083, (100,204) -> 0.080, prepend -> 0.072, mkPair -> 0.060, (180,38) -> 0.048, length -> 0.046, 103 -> 0.042, pair1 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[49.508s]Generation 35
Best Result: (fitness: 29352561.3, performance: 33555258.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, dec(191)), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(145,103),(100,204),(148,52),(152,42),(142,141),(590607779,3)]), Vector([(146,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11)]), Vector([(146,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(590607779,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(590607779,13)]), ...
Average Size: 40.41434262948207
Average Fitness: 6634696.934244344
Fitness Variation: 6129734.610473629
Distribution: #3 -> 0.157, dec -> 0.090, #1 -> 0.081, (100,204) -> 0.081, prepend -> 0.073, mkPair -> 0.061, length -> 0.047, (180,38) -> 0.045, 103 -> 0.042, 109 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[51.788s]Generation 36
Best Result: (fitness: 42443321.7, performance: 48199544.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, dec(191)), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(145,103),(100,204),(148,52),(152,42),(142,141),(590607779,3)]), Vector([(146,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5)]), Vector([(146,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7)]), Vector([(146,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9)]), Vector([(146,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11)]), Vector([(146,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(590607779,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(590607779,13)]), ...
Average Size: 39.91633466135458
Average Fitness: 7032974.263956688
Fitness Variation: 6553896.617302871
Distribution: #3 -> 0.152, dec -> 0.086, (100,204) -> 0.079, #1 -> 0.077, prepend -> 0.073, mkPair -> 0.061, (180,38) -> 0.049, length -> 0.047, 109 -> 0.042, pair1 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[55.055s]Generation 37
Best Result: (fitness: 45422577.0, performance: 51582850.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend((180,38), append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: #1; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, dec(191)), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(180,38),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(180,38),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(145,103),(100,204),(148,52),(152,42),(142,141),(590607779,3)]), Vector([(180,38),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(590607779,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(590607779,5),(590607779,7),(590607779,9),(590607779,11),(590607779,13)]), ...
Average Size: 39.53386454183267
Average Fitness: 6965326.420572432
Fitness Variation: 7443489.182692297
Distribution: #3 -> 0.152, (100,204) -> 0.078, dec -> 0.077, #1 -> 0.073, prepend -> 0.072, mkPair -> 0.062, (180,38) -> 0.049, length -> 0.047, 109 -> 0.042, pair1 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[58.628s]Generation 38
Best Result: (fitness: 71343172.2, performance: 81402243.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend((180,38), append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(pair2((33,95)), 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, dec(191)), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(180,38),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(180,38),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(97,103),(100,204),(148,52),(152,42),(142,141),(590607779,3)]), Vector([(180,38),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(97,103),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(97,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(97,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(397756259,13),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(397756259,13)]), ...
Average Size: 40.42629482071713
Average Fitness: 8099375.21761988
Fitness Variation: 1.0136514927889675E7
Distribution: #3 -> 0.145, (100,204) -> 0.079, prepend -> 0.073, dec -> 0.071, #1 -> 0.068, mkPair -> 0.060, times -> 0.046, length -> 0.044, (180,38) -> 0.044, 109 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[62.603s]Generation 39
Best Result: (fitness: 71343172.2, performance: 81402243.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend((180,38), append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(pair2((33,95)), 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, dec(191)), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(180,38),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(180,38),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(97,103),(100,204),(148,52),(152,42),(142,141),(590607779,3)]), Vector([(180,38),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(97,103),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(97,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(97,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(397756259,13),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(397756259,13)]), ...
Average Size: 42.12749003984064
Average Fitness: 1.1467592782859312E7
Fitness Variation: 1.4495218303676555E7
Distribution: #3 -> 0.134, dec -> 0.077, #1 -> 0.075, (100,204) -> 0.072, prepend -> 0.069, times -> 0.059, mkPair -> 0.056, length -> 0.040, 109 -> 0.038, 103 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[70.059s]Generation 40
Best Result: (fitness: 71343172.2, performance: 81402243.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend((180,38), append(prepend((100,204), #3), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(pair2((33,95)), 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, dec(191)), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(180,38),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(180,38),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(97,103),(100,204),(148,52),(152,42),(142,141),(590607779,3)]), Vector([(180,38),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(97,103),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(97,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(97,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11)]), Vector([(180,38),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(397756259,13),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(590607779,3),(397756259,5),(397756259,7),(397756259,9),(397756259,11),(397756259,13)]), ...
Average Size: 45.81673306772908
Average Fitness: 2.2305601846990757E7
Fitness Variation: 1.9262451349553183E7
Distribution: #3 -> 0.120, #1 -> 0.095, dec -> 0.095, times -> 0.081, prepend -> 0.063, (100,204) -> 0.062, mkPair -> 0.051, 191 -> 0.041, length -> 0.036, 109 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[81.093s]Generation 41
Best Result: (fitness: 85903160.7, performance: 95923458.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(146), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length([]); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 161; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, modular(dec(1), length(#3))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, #1), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,0),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(145,103),(100,204),(148,52),(152,42),(142,141),(453835451,3)]), Vector([(161,0),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5)]), Vector([(161,0),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7)]), Vector([(161,0),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9)]), Vector([(161,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11)]), Vector([(161,0),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(551529971,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(551529971,13)]), ...
Average Size: 47.22709163346614
Average Fitness: 3.1696386761489682E7
Fitness Variation: 2.4903501767673727E7
Distribution: #3 -> 0.116, #1 -> 0.103, dec -> 0.102, times -> 0.094, prepend -> 0.061, (100,204) -> 0.059, mkPair -> 0.051, 191 -> 0.050, 194 -> 0.038, inc -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[94.312s]Generation 42
Best Result: (fitness: 165451098.6, performance: 186921162.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(146), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length([]); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 161; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, times(109, times(times(194, #1), inc(#1)))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, #1), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,453835452),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(145,103),(100,204),(148,52),(152,42),(142,141),(453835451,3)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(551529971,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(551529971,13)]), ...
Average Size: 47.1195219123506
Average Fitness: 3.463712163981995E7
Fitness Variation: 3.2810387991815813E7
Distribution: #3 -> 0.109, #1 -> 0.107, times -> 0.097, dec -> 0.097, (100,204) -> 0.065, prepend -> 0.060, mkPair -> 0.051, 191 -> 0.049, 194 -> 0.038, inc -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[111.224s]Generation 43
Best Result: (fitness: 165637014.7, performance: 186921162.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(146), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: 194; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 161; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, times(109, times(times(194, #1), inc(#1)))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, #1), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,453835452),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(145,103),(100,204),(148,52),(152,42),(142,141),(453835451,3)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11)]), Vector([(161,551529972),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(551529971,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(551529971,5),(551529971,7),(551529971,9),(551529971,11),(551529971,13)]), ...
Average Size: 47.84860557768924
Average Fitness: 4.4699206108021766E7
Fitness Variation: 4.099398871656659E7
Distribution: #1 -> 0.115, #3 -> 0.106, times -> 0.098, dec -> 0.097, (100,204) -> 0.067, prepend -> 0.061, mkPair -> 0.054, 191 -> 0.045, 194 -> 0.040, inc -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[128.407s]Generation 44
Best Result: (fitness: 166976529.6, performance: 188516548.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend((180,38), append(prepend((100,204), []), mkPair(dec(#1), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(pair2((33,95)), 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(modular(dec(divide(145, #1)), 22), 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(194, #1), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(180,38),(100,204),(145,103),(148,52),(152,42),(142,141)]), Vector([(180,38),(100,204),(97,103),(100,204),(148,52),(152,42),(142,141),(453835451,3)]), Vector([(180,38),(100,204),(97,103),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(205158491,5)]), Vector([(180,38),(100,204),(97,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(205158491,5),(205158491,7)]), Vector([(180,38),(100,204),(97,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(205158491,5),(205158491,7),(205158491,9)]), Vector([(180,38),(100,204),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(205158491,5),(205158491,7),(205158491,9),(205158491,11)]), Vector([(180,38),(100,204),(97,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(453835451,3),(205158491,5),(205158491,7),(205158491,9),(205158491,11),(205158491,13)]), ...
Average Size: 47.51394422310757
Average Fitness: 5.877421725274686E7
Fitness Variation: 5.086207997320562E7
Distribution: #1 -> 0.127, #3 -> 0.106, times -> 0.098, dec -> 0.094, (100,204) -> 0.065, prepend -> 0.060, mkPair -> 0.052, inc -> 0.040, 191 -> 0.038, 194 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[155.951s]Generation 45
Best Result: (fitness: 292885172.3, performance: 322099183.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, dec(191)), 109))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(329578939,3),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(329578939,3),(221224219,5),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(329578939,3),(221224219,5),(221224219,7),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(329578939,3),(221224219,5),(221224219,7),(221224219,9),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(329578939,3),(221224219,5),(221224219,7),(221224219,9),(221224219,11),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(329578939,3),(221224219,5),(221224219,7),(221224219,9),(221224219,11),(221224219,13),(97,98)]), ...
Average Size: 47.15139442231076
Average Fitness: 7.5237309247242E7
Fitness Variation: 6.2978274743018106E7
Distribution: #1 -> 0.149, times -> 0.103, #3 -> 0.101, dec -> 0.083, (100,204) -> 0.065, prepend -> 0.057, mkPair -> 0.051, inc -> 0.041, 109 -> 0.035, 194 -> 0.031
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[183.893s]Generation 46
Best Result: (fitness: 399264011.7, performance: 448491186.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, 52); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, dec(191)), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(200928419,9),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(200928419,9),(200928419,11),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(200928419,9),(200928419,11),(200928419,13),(97,98)]), ...
Average Size: 46.55378486055777
Average Fitness: 8.217109724223058E7
Fitness Variation: 7.676089034926459E7
Distribution: #1 -> 0.160, times -> 0.118, #3 -> 0.095, dec -> 0.074, (100,204) -> 0.062, prepend -> 0.056, mkPair -> 0.051, inc -> 0.046, 109 -> 0.039, 194 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[222.581s]Generation 47
Best Result: (fitness: 399264011.7, performance: 448491186.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, 52); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, dec(191)), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(200928419,9),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(200928419,9),(200928419,11),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(299342339,3),(200928419,5),(200928419,7),(200928419,9),(200928419,11),(200928419,13),(97,98)]), ...
Average Size: 46.18326693227092
Average Fitness: 1.0895119230687553E8
Fitness Variation: 9.1535009851674E7
Distribution: #1 -> 0.167, times -> 0.133, #3 -> 0.090, dec -> 0.063, (100,204) -> 0.058, inc -> 0.053, prepend -> 0.053, mkPair -> 0.049, 109 -> 0.046, 194 -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[262.454s]Generation 48
Best Result: (fitness: 400896233.3, performance: 464339434.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> concat(prepend(#2, append(prepend((100,204), #3), mkPair(dec(146), 103))), #3)
*
[S0: EInt]{ seed: 0 ; iter: length([]); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 88; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, times(109, times(times(194, 72), inc(#1)))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, #1), inc(#1)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend(#2, append(prepend((100,204), #3), mkPair(dec(146), 103))); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,103),(148,52),(152,42),(142,141)]), Vector([(146,223809264),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(145,103),(100,204),(148,52),(152,42),(142,141),(341546267,3)]), Vector([(88,135503568),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(145,103),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5)]), Vector([(88,135503568),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(145,103),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7)]), Vector([(88,135503568),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(75124543,9),(145,103),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(75124543,9)]), Vector([(88,135503568),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(75124543,9),(75124543,11),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(75124543,9),(75124543,11)]), Vector([(88,135503568),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(75124543,9),(75124543,11),(75124543,13),(145,103),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(341546267,3),(75124543,5),(75124543,7),(75124543,9),(75124543,11),(75124543,13)]), ...
Average Size: 46.60557768924303
Average Fitness: 1.288772805275669E8
Fitness Variation: 1.213804266825377E8
Distribution: #1 -> 0.164, times -> 0.144, #3 -> 0.085, 194 -> 0.057, (100,204) -> 0.056, inc -> 0.056, dec -> 0.054, prepend -> 0.052, 109 -> 0.049, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[310.736s]Generation 49
Best Result: (fitness: 739493340.5, performance: 830669020.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(#1, 52); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, dec(146)), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #4); seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(228445469,3),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(228445469,3),(153340109,5),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(228445469,3),(153340109,5),(153340109,7),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(228445469,3),(153340109,5),(153340109,7),(153340109,9),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(228445469,3),(153340109,5),(153340109,7),(153340109,9),(153340109,11),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(228445469,3),(153340109,5),(153340109,7),(153340109,9),(153340109,11),(153340109,13),(97,98)]), ...
Average Size: 48.0796812749004
Average Fitness: 1.4270689801826003E8
Fitness Variation: 1.5104801558540335E8
Distribution: #1 -> 0.154, times -> 0.137, #3 -> 0.086, dec -> 0.065, (100,204) -> 0.055, inc -> 0.052, prepend -> 0.051, mkPair -> 0.049, 109 -> 0.047, 194 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[377.403s]Generation 50
Best Result: (fitness: 899183363.9, performance: 1010047992.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, 52); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, dec(109)), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(114211943,9),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(114211943,9),(114211943,11),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(114211943,9),(114211943,11),(114211943,13),(97,98)]), ...
Average Size: 49.79681274900398
Average Fitness: 1.8639198443460104E8
Fitness Variation: 1.8591064386914784E8
Distribution: #1 -> 0.149, times -> 0.133, #3 -> 0.088, dec -> 0.072, (100,204) -> 0.056, prepend -> 0.052, mkPair -> 0.052, inc -> 0.051, 109 -> 0.044, 146 -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[449.990s]Generation 51
Best Result: (fitness: 899183363.9, performance: 1010047992.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 98 ; iter: length(#3); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, 52); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(prepend((100,204), #3), mkPair(dec(times(109, times(times(#1, dec(109)), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,52),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(114211943,9),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(114211943,9),(114211943,11),(97,98)]), Vector([(98,52),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(100,204),(148,52),(152,42),(142,141),(170152487,3),(114211943,5),(114211943,7),(114211943,9),(114211943,11),(114211943,13),(97,98)]), ...
Average Size: 48.462151394422314
Average Fitness: 2.099774206024163E8
Fitness Variation: 2.153147278562127E8
Distribution: #1 -> 0.139, times -> 0.117, #3 -> 0.091, dec -> 0.083, (100,204) -> 0.063, mkPair -> 0.055, prepend -> 0.053, inc -> 0.048, 98 -> 0.045, 109 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[554.916s]Generation 52
Best Result: (fitness: 1509996253.7, performance: 1671664508.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 48.0398406374502
Average Fitness: 2.8734589180049413E8
Fitness Variation: 2.735159282392589E8
Distribution: #1 -> 0.136, times -> 0.108, #3 -> 0.090, dec -> 0.082, (100,204) -> 0.063, mkPair -> 0.055, prepend -> 0.053, 98 -> 0.047, inc -> 0.045, 109 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[675.318s]Generation 53
Best Result: (fitness: 1728414884.8, performance: 1913468203.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 109 ; iter: pair2(mkPair(#0, 98)); seedExpr: 109 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(108,109)]), Vector([(109,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 47.02788844621514
Average Fitness: 3.586531286938155E8
Fitness Variation: 3.575692203980685E8
Distribution: #1 -> 0.135, times -> 0.108, #3 -> 0.090, dec -> 0.087, (100,204) -> 0.064, mkPair -> 0.057, 98 -> 0.054, prepend -> 0.053, inc -> 0.045, 109 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[804.105s]Generation 54
Best Result: (fitness: 1728414884.8, performance: 1913468203.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 109 ; iter: pair2(mkPair(#0, 98)); seedExpr: 109 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(108,109)]), Vector([(109,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(98,-98),(100,204),(148,52),(152,42),(142,141),(110564585,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 45.59760956175299
Average Fitness: 4.134029364751578E8
Fitness Variation: 4.257220150832196E8
Distribution: #1 -> 0.130, times -> 0.107, dec -> 0.095, #3 -> 0.093, 98 -> 0.063, (100,204) -> 0.062, mkPair -> 0.058, 109 -> 0.056, prepend -> 0.051, inc -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[958.167s]Generation 55
Best Result: (fitness: 1968871026.1, performance: 2243556772.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 6357 ; iter: length(#3); seedExpr: times(163, plus(neg(36), 75)) }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1((95,167)), plus(dec(pair1((102,90))), 32)))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 45.386454183266935
Average Fitness: 5.1007035052605987E8
Fitness Variation: 4.9754767298213464E8
Distribution: #1 -> 0.132, times -> 0.105, dec -> 0.096, #3 -> 0.093, 98 -> 0.065, 109 -> 0.065, mkPair -> 0.059, (100,204) -> 0.058, prepend -> 0.048, inc -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[1142.645s]Generation 56
Best Result: (fitness: 1968871026.1, performance: 2243556772.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 6357 ; iter: length(#3); seedExpr: times(163, plus(neg(36), 75)) }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1((95,167)), plus(dec(pair1((102,90))), 32)))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(146,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(98,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 46.14342629482072
Average Fitness: 5.432311395451318E8
Fitness Variation: 6.012924589219104E8
Distribution: #1 -> 0.127, times -> 0.102, dec -> 0.093, #3 -> 0.088, 98 -> 0.065, 109 -> 0.062, mkPair -> 0.057, (100,204) -> 0.049, inc -> 0.044, prepend -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[1370.889s]Generation 57
Best Result: (fitness: 2588403408.6, performance: 2835220849.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), (105,89)))
*
[S0: EInt]{ seed: 6357 ; iter: length(#3); seedExpr: times(163, plus(neg(36), 75)) }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, neg(#0)); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend((100,204), #3); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(105,89)]), Vector([(146,-6357),(100,204),(148,52),(152,42),(142,141),(148095683,3),(105,89)]), Vector([(98,-3),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(105,89)]), Vector([(98,-4),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(105,89)]), Vector([(98,-5),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(105,89)]), Vector([(98,-6),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(105,89)]), Vector([(98,-7),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(105,89)]), ...
Average Size: 48.21912350597609
Average Fitness: 7.348039012121763E8
Fitness Variation: 7.205643856116855E8
Distribution: #1 -> 0.120, times -> 0.096, dec -> 0.089, #3 -> 0.085, 98 -> 0.062, (95,167) -> 0.058, mkPair -> 0.056, pair1 -> 0.055, inc -> 0.045, 109 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[1629.406s]Generation 58
Best Result: (fitness: 2490202845.7, performance: 2758789321.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 49.02788844621514
Average Fitness: 8.412105728556335E8
Fitness Variation: 8.54981542876414E8
Distribution: #1 -> 0.108, times -> 0.092, dec -> 0.089, #3 -> 0.080, (95,167) -> 0.075, pair1 -> 0.072, 98 -> 0.060, mkPair -> 0.052, inc -> 0.043, 109 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[1910.085s]Generation 59
Best Result: (fitness: 2490202845.7, performance: 2758789321.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 50.64940239043825
Average Fitness: 9.334894121312511E8
Fitness Variation: 9.157902995314996E8
Distribution: #1 -> 0.105, dec -> 0.092, times -> 0.090, pair1 -> 0.077, #3 -> 0.077, (95,167) -> 0.073, 98 -> 0.058, mkPair -> 0.050, inc -> 0.043, (100,204) -> 0.032
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[2278.473s]Generation 60
Best Result: (fitness: 2682322699.2, performance: 3071566446.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 6357 ; iter: length(#3); seedExpr: times(163, plus(neg(36), 75)) }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((95,167)), plus(dec(pair1((102,90))), 32)))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(97,98)]), Vector([(95,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(97,98)]), Vector([(95,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(97,98)]), Vector([(95,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(97,98)]), Vector([(95,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(97,98)]), Vector([(95,-37),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(97,98)]), ...
Average Size: 51.78087649402391
Average Fitness: 1.0415438438917181E9
Fitness Variation: 1.0005647023593234E9
Distribution: #1 -> 0.102, dec -> 0.093, times -> 0.089, pair1 -> 0.086, #3 -> 0.075, (95,167) -> 0.074, 98 -> 0.057, mkPair -> 0.048, inc -> 0.045, 109 -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[2676.492s]Generation 61
Best Result: (fitness: 2732438456.2, performance: 3034220933.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(109), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1(#2), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(104,98)] ; iter: #3; seedExpr: concat(append([], (104,98)), []) }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(108,146)]), Vector([(146,-151),(100,204),(148,52),(152,42),(142,141),(148095683,3),(108,98)]), Vector([(98,-47),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(108,98)]), ...
Average Size: 50.53386454183267
Average Fitness: 1.1083405265074635E9
Fitness Variation: 1.0845054025195994E9
Distribution: #1 -> 0.102, dec -> 0.086, times -> 0.082, pair1 -> 0.079, #3 -> 0.076, (95,167) -> 0.063, 98 -> 0.057, mkPair -> 0.049, inc -> 0.045, #2 -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[3063.772s]Generation 62
Best Result: (fitness: 2746904655.4, performance: 3034220933.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(109), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(#1, inc(minus(pair1(#2), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(109, times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(108,146)]), Vector([(146,-151),(100,204),(148,52),(152,42),(142,141),(148095683,3),(108,98)]), Vector([(98,-47),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(108,98)]), Vector([(98,-95),(100,204),(148,52),(152,42),(142,141),(148095683,3),(99406691,4),(99406691,5),(99406691,6),(99406691,7),(99406691,8),(108,98)]), ...
Average Size: 50.633466135458164
Average Fitness: 1.2553109718078854E9
Fitness Variation: 1.1326679282818232E9
Distribution: #1 -> 0.099, times -> 0.087, dec -> 0.083, pair1 -> 0.076, #3 -> 0.076, (95,167) -> 0.060, 98 -> 0.058, mkPair -> 0.048, inc -> 0.047, #2 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[3459.690s]Generation 63
Best Result: (fitness: 4097860465.3, performance: 4757176970.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 50.330677290836654
Average Fitness: 1.228113115029633E9
Fitness Variation: 1.1687502777557158E9
Distribution: #1 -> 0.095, times -> 0.089, dec -> 0.078, #3 -> 0.075, pair1 -> 0.073, 98 -> 0.059, (95,167) -> 0.058, inc -> 0.049, mkPair -> 0.047, #2 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[3850.012s]Generation 64
Best Result: (fitness: 4097860465.3, performance: 4757176970.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 49.330677290836654
Average Fitness: 1.3324181873275485E9
Fitness Variation: 1.2246473019928913E9
Distribution: #1 -> 0.091, times -> 0.086, dec -> 0.077, #3 -> 0.075, pair1 -> 0.071, (95,167) -> 0.059, 98 -> 0.058, inc -> 0.047, mkPair -> 0.047, [] -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[4264.475s]Generation 65
Best Result: (fitness: 4097860465.3, performance: 4757176970.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((95,167)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-98),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 49.322709163346616
Average Fitness: 1.2333117860507174E9
Fitness Variation: 1.2486919017440774E9
Distribution: times -> 0.087, #1 -> 0.082, dec -> 0.076, #3 -> 0.072, pair1 -> 0.072, 98 -> 0.060, (95,167) -> 0.057, inc -> 0.047, mkPair -> 0.046, [] -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[4685.055s]Generation 66
Best Result: (fitness: 4377033003.7, performance: 5192263421.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), (100,204)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1(mkPair(66, plus(length(#3), 124))), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(100,204)]), Vector([(95,-127),(100,204),(148,52),(152,42),(142,141),(127715543,3),(100,204)]), Vector([(95,-127),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(100,204)]), Vector([(95,-127),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(100,204)]), Vector([(95,-127),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(100,204)]), Vector([(95,-127),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(100,204)]), Vector([(95,-127),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(100,204)]), ...
Average Size: 47.82470119521912
Average Fitness: 1.192636907506375E9
Fitness Variation: 1.3106229008840802E9
Distribution: times -> 0.090, #1 -> 0.082, dec -> 0.081, pair1 -> 0.074, #3 -> 0.074, (95,167) -> 0.061, 98 -> 0.061, inc -> 0.049, mkPair -> 0.046, 109 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[5182.324s]Generation 67
Best Result: (fitness: 4874506053.1, performance: 5613269743.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), (100,204)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(98, plus(#1, 173)))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(100,204)]), Vector([(95,-220),(100,204),(148,52),(152,42),(142,141),(127715543,3),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(100,204)]), ...
Average Size: 48.29482071713147
Average Fitness: 1.5373903469856858E9
Fitness Variation: 1.5761916167757416E9
Distribution: times -> 0.088, dec -> 0.085, pair1 -> 0.081, #1 -> 0.077, #3 -> 0.074, (95,167) -> 0.073, 98 -> 0.061, inc -> 0.049, mkPair -> 0.045, 109 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[5648.260s]Generation 68
Best Result: (fitness: 4874506053.1, performance: 5613269743.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), (100,204)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(98, plus(#1, 173)))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(100,204)]), Vector([(95,-220),(100,204),(148,52),(152,42),(142,141),(127715543,3),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(100,204)]), ...
Average Size: 49.18326693227092
Average Fitness: 1.6440749513200784E9
Fitness Variation: 1.7370316587812216E9
Distribution: (95,167) -> 0.105, pair1 -> 0.099, dec -> 0.097, times -> 0.088, #1 -> 0.083, #3 -> 0.073, 98 -> 0.060, inc -> 0.048, mkPair -> 0.047, prepend -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[6146.737s]Generation 69
Best Result: (fitness: 4874506053.1, performance: 5613269743.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), (100,204)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#0, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(98, plus(#1, 173)))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(100,204)]), Vector([(95,-220),(100,204),(148,52),(152,42),(142,141),(127715543,3),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(100,204)]), Vector([(95,-172),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(100,204)]), ...
Average Size: 49.50597609561753
Average Fitness: 1.6969294597169611E9
Fitness Variation: 1.8136451939893756E9
Distribution: (95,167) -> 0.119, pair1 -> 0.108, dec -> 0.102, times -> 0.086, #1 -> 0.085, #3 -> 0.072, 98 -> 0.059, inc -> 0.047, mkPair -> 0.046, (100,204) -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[6715.217s]Generation 70
Best Result: (fitness: 5709419412.5, performance: 6628024251.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 49.01195219123506
Average Fitness: 1.893726183404833E9
Fitness Variation: 1.9482909516569123E9
Distribution: (95,167) -> 0.123, pair1 -> 0.109, dec -> 0.106, #1 -> 0.087, times -> 0.086, #3 -> 0.073, 98 -> 0.061, mkPair -> 0.047, inc -> 0.047, (100,204) -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[7292.913s]Generation 71
Best Result: (fitness: 5709419412.5, performance: 6628024251.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 48.940239043824704
Average Fitness: 1.9648515373341134E9
Fitness Variation: 2.082879053296509E9
Distribution: (95,167) -> 0.118, pair1 -> 0.104, dec -> 0.104, times -> 0.086, #1 -> 0.084, #3 -> 0.074, 98 -> 0.064, mkPair -> 0.047, inc -> 0.047, (100,204) -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[7897.352s]Generation 72
Best Result: (fitness: 5709419412.5, performance: 6628024251.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 49.09561752988048
Average Fitness: 2.2882597262087936E9
Fitness Variation: 2.1848742606365695E9
Distribution: (95,167) -> 0.112, pair1 -> 0.101, dec -> 0.100, times -> 0.086, #1 -> 0.079, #3 -> 0.073, 98 -> 0.066, inc -> 0.047, mkPair -> 0.045, (100,204) -> 0.031
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[8539.886s]Generation 73
Best Result: (fitness: 5709419412.5, performance: 6628024251.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 48.83665338645418
Average Fitness: 2.248633374326096E9
Fitness Variation: 2.3513534874189005E9
Distribution: (95,167) -> 0.116, pair1 -> 0.101, dec -> 0.100, times -> 0.087, #1 -> 0.084, #3 -> 0.068, 98 -> 0.067, inc -> 0.047, mkPair -> 0.042, (100,204) -> 0.032
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[9194.062s]Generation 74
Best Result: (fitness: 5716251765.8, performance: 6628024251.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: 107; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 50.12749003984064
Average Fitness: 2.1826110465504117E9
Fitness Variation: 2.395448979445174E9
Distribution: (95,167) -> 0.112, dec -> 0.100, pair1 -> 0.097, #1 -> 0.088, times -> 0.084, #3 -> 0.065, 98 -> 0.062, inc -> 0.046, mkPair -> 0.043, prepend -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[9926.946s]Generation 75
Best Result: (fitness: 5716251765.8, performance: 6628024251.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: 107; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 50.79282868525896
Average Fitness: 2.1315821556666634E9
Fitness Variation: 2.428849073665153E9
Distribution: (95,167) -> 0.108, dec -> 0.102, pair1 -> 0.094, #1 -> 0.088, times -> 0.083, #3 -> 0.061, 98 -> 0.058, inc -> 0.046, mkPair -> 0.044, prepend -> 0.031
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[10801.841s]Generation 76
Best Result: (fitness: 5672853011.8, performance: 6628024251.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: length(#3); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(length(concat([], [])), 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), length(#3))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,3),(85726871,4),(85726871,5),(85726871,6),(85726871,7),(85726871,8),(97,98)]), ...
Average Size: 50.88844621513944
Average Fitness: 2.4977886133749704E9
Fitness Variation: 2.4974404004854164E9
Distribution: (95,167) -> 0.110, dec -> 0.106, pair1 -> 0.098, #1 -> 0.090, times -> 0.087, 98 -> 0.058, #3 -> 0.058, inc -> 0.047, mkPair -> 0.045, prepend -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[11771.783s]Generation 77
Best Result: (fitness: 5904447449.8, performance: 7024565075.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(times(dec(pair1((95,167))), times(times(65, dec(pair1((95,167)))), inc(98)))); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: pair2(mkPair(#1, 98)); seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 51.12749003984064
Average Fitness: 2.5060920442067037E9
Fitness Variation: 2.557571619544062E9
Distribution: dec -> 0.107, (95,167) -> 0.105, pair1 -> 0.099, #1 -> 0.095, times -> 0.086, 98 -> 0.058, #3 -> 0.057, inc -> 0.047, mkPair -> 0.045, prepend -> 0.029
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[12647.074s]Generation 78
Best Result: (fitness: 5941429290.8, performance: 7024565075.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(times(dec(pair1((95,167))), times(times(65, dec(pair1((95,167)))), inc(98)))); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 50.84860557768924
Average Fitness: 2.4939067153015394E9
Fitness Variation: 2.599153043720203E9
Distribution: dec -> 0.107, (95,167) -> 0.106, pair1 -> 0.102, #1 -> 0.094, times -> 0.084, 98 -> 0.057, #3 -> 0.057, inc -> 0.048, mkPair -> 0.045, prepend -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[13495.781s]Generation 79
Best Result: (fitness: 6176560629.7, performance: 7024565075.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(neg(modular(#1, minus(58, #1)))); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 51.47808764940239
Average Fitness: 2.5291016302628975E9
Fitness Variation: 2.5798720180667505E9
Distribution: pair1 -> 0.108, dec -> 0.107, (95,167) -> 0.106, #1 -> 0.093, times -> 0.085, 98 -> 0.057, #3 -> 0.057, inc -> 0.052, mkPair -> 0.047, 194 -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[14330.818s]Generation 80
Best Result: (fitness: 6176560629.7, performance: 7024565075.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(neg(modular(#1, minus(58, #1)))); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 50.657370517928285
Average Fitness: 2.7148755969764304E9
Fitness Variation: 2.7003051245E9
Distribution: dec -> 0.109, pair1 -> 0.107, (95,167) -> 0.105, #1 -> 0.100, times -> 0.084, #3 -> 0.059, 98 -> 0.055, inc -> 0.048, mkPair -> 0.047, 194 -> 0.028
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[15205.819s]Generation 81
Best Result: (fitness: 6227638581.5, performance: 7024565075.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 49.91633466135458
Average Fitness: 2.7080558625760317E9
Fitness Variation: 2.732632969388187E9
Distribution: dec -> 0.111, pair1 -> 0.109, (95,167) -> 0.106, #1 -> 0.104, times -> 0.086, #3 -> 0.059, 98 -> 0.055, inc -> 0.048, mkPair -> 0.045, 194 -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[15844.888s]Generation 82
Best Result: (fitness: 6227638581.5, performance: 7024565075.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 49.286852589641434
Average Fitness: 2.4229000279599814E9
Fitness Variation: 2.7635912105882554E9
Distribution: dec -> 0.112, pair1 -> 0.111, #1 -> 0.110, (95,167) -> 0.107, times -> 0.089, 98 -> 0.055, #3 -> 0.055, inc -> 0.050, mkPair -> 0.044, 194 -> 0.026
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[16463.675s]Generation 83
Best Result: (fitness: 6227638581.5, performance: 7024565075.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 49.1195219123506
Average Fitness: 2.4187852945704E9
Fitness Variation: 2.757143962832194E9
Distribution: pair1 -> 0.119, dec -> 0.117, #1 -> 0.113, (95,167) -> 0.112, times -> 0.092, 98 -> 0.050, inc -> 0.048, #3 -> 0.048, mkPair -> 0.041, (118,81) -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[17221.345s]Generation 84
Best Result: (fitness: 6233386221.4, performance: 7024565075.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: 75; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 48.298804780876495
Average Fitness: 2.723944463237623E9
Fitness Variation: 2.8477374388619156E9
Distribution: pair1 -> 0.122, dec -> 0.120, (95,167) -> 0.115, #1 -> 0.113, times -> 0.093, inc -> 0.049, 98 -> 0.047, #3 -> 0.044, mkPair -> 0.039, (118,81) -> 0.027
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[17896.299s]Generation 85
Best Result: (fitness: 6233386221.4, performance: 7024565075.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: 194; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 46.386454183266935
Average Fitness: 2.6817215985307517E9
Fitness Variation: 2.8283343613226447E9
Distribution: pair1 -> 0.123, dec -> 0.120, (95,167) -> 0.115, #1 -> 0.112, times -> 0.092, inc -> 0.049, 98 -> 0.047, #3 -> 0.043, mkPair -> 0.039, (118,81) -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[18616.173s]Generation 86
Best Result: (fitness: 6233386221.4, performance: 7024565075.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), #1)))
*
[S0: EInt]{ seed: 0 ; iter: #0; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,98)]), ...
Average Size: 45.52988047808765
Average Fitness: 2.73060629256746E9
Fitness Variation: 2.9081166637076254E9
Distribution: pair1 -> 0.122, dec -> 0.121, (95,167) -> 0.114, #1 -> 0.111, times -> 0.092, inc -> 0.050, 98 -> 0.050, #3 -> 0.045, mkPair -> 0.039, (118,81) -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[19264.510s]Generation 87
Best Result: (fitness: 6336397149.0, performance: 7191714117.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(dec(#0)), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(-2,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(143,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), ...
Average Size: 44.98804780876494
Average Fitness: 2.5151043623004665E9
Fitness Variation: 2.901834279416333E9
Distribution: pair1 -> 0.124, dec -> 0.122, (95,167) -> 0.114, #1 -> 0.111, times -> 0.093, inc -> 0.051, 98 -> 0.050, #3 -> 0.044, mkPair -> 0.040, (118,81) -> 0.032
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[19903.121s]Generation 88
Best Result: (fitness: 6336397149.0, performance: 7191714117.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(dec(#0)), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(-2,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(143,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), ...
Average Size: 44.87250996015936
Average Fitness: 2.7385389225757594E9
Fitness Variation: 2.9353226249857016E9
Distribution: pair1 -> 0.125, dec -> 0.124, (95,167) -> 0.118, #1 -> 0.107, times -> 0.096, inc -> 0.051, 98 -> 0.050, #3 -> 0.043, mkPair -> 0.039, (118,81) -> 0.031
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[20635.855s]Generation 89
Best Result: (fitness: 6336397149.0, performance: 7191714117.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(dec(#0)), #1)))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(-2,146)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(143,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(95,98)]), ...
Average Size: 43.82470119521912
Average Fitness: 2.787562407229433E9
Fitness Variation: 2.886941673530734E9
Distribution: pair1 -> 0.126, dec -> 0.124, (95,167) -> 0.119, #1 -> 0.103, times -> 0.097, 98 -> 0.052, inc -> 0.052, #3 -> 0.044, mkPair -> 0.039, (118,81) -> 0.030
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[21194.335s]Generation 90
Best Result: (fitness: 8132296184.6, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), pair1((118,81)))))
*
[S0: EInt]{ seed: 118 ; iter: #1; seedExpr: pair1((118,81)) }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 43.33466135458168
Average Fitness: 2.475083360567276E9
Fitness Variation: 2.848579487987146E9
Distribution: pair1 -> 0.125, dec -> 0.124, (95,167) -> 0.118, #1 -> 0.098, times -> 0.094, 98 -> 0.051, inc -> 0.050, #3 -> 0.044, mkPair -> 0.040, (118,81) -> 0.031
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[21722.309s]Generation 91
Best Result: (fitness: 8132296184.6, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), pair1((118,81)))))
*
[S0: EInt]{ seed: 118 ; iter: #1; seedExpr: pair1((118,81)) }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.37051792828685
Average Fitness: 2.4679751643681426E9
Fitness Variation: 2.8157435654385934E9
Distribution: pair1 -> 0.127, dec -> 0.127, (95,167) -> 0.121, times -> 0.097, #1 -> 0.095, inc -> 0.051, 98 -> 0.051, #3 -> 0.044, mkPair -> 0.039, (118,81) -> 0.031
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[22149.951s]Generation 92
Best Result: (fitness: 7205595442.5, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), pair1((118,81)))))
*
[S0: EInt]{ seed: 118 ; iter: #1; seedExpr: pair1((118,81)) }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.745019920318725
Average Fitness: 2.1188205773949208E9
Fitness Variation: 2.7137029300122766E9
Distribution: dec -> 0.127, pair1 -> 0.123, (95,167) -> 0.116, times -> 0.091, #1 -> 0.087, inc -> 0.050, 98 -> 0.047, #3 -> 0.045, mkPair -> 0.039, (118,81) -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[22833.795s]Generation 93
Best Result: (fitness: 7888815209.1, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(dec(#1), pair1((118,81)))))
*
[S0: EInt]{ seed: 118 ; iter: #1; seedExpr: pair1((118,81)) }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,132) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (42,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), pair1((95,167)))), 189)); seedExpr: [] }
Best Individual Pattern: Vector([(42,132),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.29083665338646
Average Fitness: 2.4941777486953063E9
Fitness Variation: 2.8260390601461186E9
Distribution: dec -> 0.128, pair1 -> 0.125, (95,167) -> 0.115, times -> 0.093, #1 -> 0.083, inc -> 0.050, 98 -> 0.049, #3 -> 0.044, mkPair -> 0.038, (118,81) -> 0.032
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[23516.973s]Generation 94
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 47.05577689243028
Average Fitness: 2.6858379532218447E9
Fitness Variation: 3.029878330374944E9
Distribution: dec -> 0.135, pair1 -> 0.131, (95,167) -> 0.118, times -> 0.096, #1 -> 0.083, inc -> 0.050, 98 -> 0.049, #3 -> 0.042, mkPair -> 0.038, (118,81) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[24644.896s]Generation 95
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 50.49800796812749
Average Fitness: 3.2061176617712984E9
Fitness Variation: 3.213135896781689E9
Distribution: pair1 -> 0.139, dec -> 0.134, (95,167) -> 0.120, times -> 0.101, #1 -> 0.083, inc -> 0.050, 98 -> 0.049, (118,81) -> 0.043, #3 -> 0.039, mkPair -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[25793.781s]Generation 96
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 52.37051792828685
Average Fitness: 3.096523849015632E9
Fitness Variation: 3.486722331622625E9
Distribution: pair1 -> 0.145, dec -> 0.133, (95,167) -> 0.122, times -> 0.102, #1 -> 0.080, inc -> 0.050, (118,81) -> 0.049, 98 -> 0.048, #3 -> 0.039, mkPair -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[27037.626s]Generation 97
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 51.64143426294821
Average Fitness: 2.9685074594730315E9
Fitness Variation: 3.5267193020390105E9
Distribution: pair1 -> 0.149, dec -> 0.124, (95,167) -> 0.120, times -> 0.096, #1 -> 0.079, (118,81) -> 0.056, inc -> 0.049, 98 -> 0.046, #3 -> 0.040, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[27990.520s]Generation 98
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 50.49402390438247
Average Fitness: 3.1223957812293963E9
Fitness Variation: 3.6782683531767297E9
Distribution: pair1 -> 0.147, dec -> 0.120, (95,167) -> 0.116, times -> 0.093, #1 -> 0.076, (118,81) -> 0.060, inc -> 0.048, 98 -> 0.046, #3 -> 0.041, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[29036.611s]Generation 99
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 48.55378486055777
Average Fitness: 3.5422971297709084E9
Fitness Variation: 3.7808138445891595E9
Distribution: pair1 -> 0.146, dec -> 0.117, (95,167) -> 0.115, times -> 0.094, #1 -> 0.078, (118,81) -> 0.062, inc -> 0.049, 98 -> 0.047, #3 -> 0.041, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[29865.788s]Generation 100
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 189 ; iter: dec(#1); seedExpr: 189 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(189,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 46.47011952191235
Average Fitness: 3.44184927718894E9
Fitness Variation: 3.778959862996777E9
Distribution: pair1 -> 0.146, (95,167) -> 0.115, dec -> 0.114, times -> 0.093, #1 -> 0.077, (118,81) -> 0.062, inc -> 0.049, 98 -> 0.048, #3 -> 0.041, mkPair -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[30444.079s]Generation 101
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.51792828685259
Average Fitness: 2.9988341473000355E9
Fitness Variation: 3.69958705177831E9
Distribution: pair1 -> 0.147, (95,167) -> 0.113, dec -> 0.110, times -> 0.092, #1 -> 0.075, (118,81) -> 0.064, inc -> 0.049, 98 -> 0.047, #3 -> 0.042, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[31067.629s]Generation 102
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.366533864541836
Average Fitness: 2.649560209354036E9
Fitness Variation: 3.569898708626641E9
Distribution: pair1 -> 0.147, (95,167) -> 0.113, dec -> 0.109, times -> 0.093, #1 -> 0.072, (118,81) -> 0.065, inc -> 0.050, 98 -> 0.047, #3 -> 0.042, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[31589.288s]Generation 103
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.50996015936255
Average Fitness: 2.5399170164135904E9
Fitness Variation: 3.5365436446141105E9
Distribution: pair1 -> 0.146, (95,167) -> 0.114, dec -> 0.104, times -> 0.091, #1 -> 0.066, (118,81) -> 0.063, inc -> 0.049, 98 -> 0.047, #3 -> 0.044, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[32113.416s]Generation 104
Best Result: (fitness: 8358121532.1, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.00796812749004
Average Fitness: 2.997184722415713E9
Fitness Variation: 3.7400105158146396E9
Distribution: pair1 -> 0.148, (95,167) -> 0.113, dec -> 0.103, times -> 0.092, (118,81) -> 0.065, #1 -> 0.062, inc -> 0.049, 98 -> 0.047, #3 -> 0.044, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[32762.063s]Generation 105
Best Result: (fitness: 8566722148.9, performance: 9662971996.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((121,96)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-72),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-72),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-72),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-72),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-72),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-72),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.16334661354582
Average Fitness: 3.0107827879072995E9
Fitness Variation: 3.741792931376124E9
Distribution: pair1 -> 0.149, (95,167) -> 0.116, dec -> 0.102, times -> 0.094, (118,81) -> 0.066, #1 -> 0.062, inc -> 0.051, 98 -> 0.050, #3 -> 0.045, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[33210.028s]Generation 106
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.38247011952191
Average Fitness: 2.886158202007163E9
Fitness Variation: 3.6489647617535324E9
Distribution: pair1 -> 0.149, (95,167) -> 0.117, dec -> 0.103, times -> 0.095, (118,81) -> 0.064, #1 -> 0.060, inc -> 0.051, 98 -> 0.051, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[33519.863s]Generation 107
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.669322709163346
Average Fitness: 3.0615898836515675E9
Fitness Variation: 3.7654431655015755E9
Distribution: pair1 -> 0.151, (95,167) -> 0.117, dec -> 0.101, times -> 0.096, (118,81) -> 0.066, #1 -> 0.059, inc -> 0.052, 98 -> 0.050, #3 -> 0.044, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[33954.324s]Generation 108
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.15139442231076
Average Fitness: 2.9039106344437366E9
Fitness Variation: 3.708845409083474E9
Distribution: pair1 -> 0.148, (95,167) -> 0.114, dec -> 0.100, times -> 0.094, (118,81) -> 0.066, #1 -> 0.059, inc -> 0.050, 98 -> 0.048, #3 -> 0.045, mkPair -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[34503.380s]Generation 109
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.0796812749004
Average Fitness: 2.8828812852702484E9
Fitness Variation: 3.7154083115627623E9
Distribution: pair1 -> 0.149, (95,167) -> 0.116, dec -> 0.100, times -> 0.095, (118,81) -> 0.067, #1 -> 0.059, inc -> 0.051, 98 -> 0.050, #3 -> 0.046, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[34946.922s]Generation 110
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.147410358565736
Average Fitness: 2.7575189755664616E9
Fitness Variation: 3.5740767766855817E9
Distribution: pair1 -> 0.150, (95,167) -> 0.117, dec -> 0.099, times -> 0.094, (118,81) -> 0.067, #1 -> 0.058, inc -> 0.051, 98 -> 0.049, #3 -> 0.044, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[35357.765s]Generation 111
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.16334661354582
Average Fitness: 2.8423600327770004E9
Fitness Variation: 3.6525015864991403E9
Distribution: pair1 -> 0.147, (95,167) -> 0.115, dec -> 0.099, times -> 0.094, (118,81) -> 0.067, #1 -> 0.061, inc -> 0.051, 98 -> 0.049, #3 -> 0.045, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[35843.520s]Generation 112
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 93 ; iter: dec(#1); seedExpr: 93 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(93,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.322709163346616
Average Fitness: 2.781353753108631E9
Fitness Variation: 3.5671957048590994E9
Distribution: pair1 -> 0.149, (95,167) -> 0.117, dec -> 0.100, times -> 0.094, (118,81) -> 0.065, #1 -> 0.060, inc -> 0.052, 98 -> 0.049, #3 -> 0.045, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[36365.980s]Generation 113
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 140 ; iter: dec(#1); seedExpr: 140 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(140,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.70916334661354
Average Fitness: 2.920371631694257E9
Fitness Variation: 3.58071160098243E9
Distribution: pair1 -> 0.145, (95,167) -> 0.113, dec -> 0.101, times -> 0.094, #1 -> 0.064, (118,81) -> 0.063, inc -> 0.051, 98 -> 0.049, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[36835.781s]Generation 114
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 189 ; iter: dec(#1); seedExpr: 189 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(189,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.21513944223108
Average Fitness: 2.8722810390139904E9
Fitness Variation: 3.6201439595630875E9
Distribution: pair1 -> 0.149, (95,167) -> 0.120, dec -> 0.102, times -> 0.096, (118,81) -> 0.064, #1 -> 0.059, 98 -> 0.052, inc -> 0.052, #3 -> 0.044, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[37405.119s]Generation 115
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.31872509960159
Average Fitness: 3.0102048726557283E9
Fitness Variation: 3.5945886319672647E9
Distribution: pair1 -> 0.151, (95,167) -> 0.119, dec -> 0.100, times -> 0.094, (118,81) -> 0.064, #1 -> 0.058, inc -> 0.051, 98 -> 0.051, #3 -> 0.044, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[37976.066s]Generation 116
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.59362549800797
Average Fitness: 3.092976259486124E9
Fitness Variation: 3.6691512701414094E9
Distribution: pair1 -> 0.150, (95,167) -> 0.115, dec -> 0.099, times -> 0.093, (118,81) -> 0.066, #1 -> 0.059, inc -> 0.051, 98 -> 0.048, #3 -> 0.044, mkPair -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[38445.474s]Generation 117
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (145,165) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (145,165) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(145,165),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.581673306772906
Average Fitness: 2.5896762181008396E9
Fitness Variation: 3.5284017473366446E9
Distribution: pair1 -> 0.148, (95,167) -> 0.113, dec -> 0.098, times -> 0.093, (118,81) -> 0.064, #1 -> 0.060, inc -> 0.051, 98 -> 0.049, #3 -> 0.045, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[39150.478s]Generation 118
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.78087649402391
Average Fitness: 2.761744222862835E9
Fitness Variation: 3.49943233053991E9
Distribution: pair1 -> 0.148, (95,167) -> 0.113, dec -> 0.100, times -> 0.095, (118,81) -> 0.062, #1 -> 0.059, inc -> 0.051, 98 -> 0.050, #3 -> 0.045, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[39690.272s]Generation 119
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 62 ; iter: dec(#1); seedExpr: 62 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(62,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.10756972111554
Average Fitness: 2.49876160571226E9
Fitness Variation: 3.461320860148744E9
Distribution: pair1 -> 0.147, (95,167) -> 0.111, dec -> 0.099, times -> 0.094, (118,81) -> 0.062, #1 -> 0.058, inc -> 0.052, 98 -> 0.050, #3 -> 0.044, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[40198.189s]Generation 120
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 140 ; iter: dec(#1); seedExpr: 140 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(140,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.581673306772906
Average Fitness: 2.903634583256504E9
Fitness Variation: 3.5154437430775776E9
Distribution: pair1 -> 0.148, (95,167) -> 0.115, dec -> 0.101, times -> 0.095, (118,81) -> 0.060, #1 -> 0.059, inc -> 0.052, 98 -> 0.051, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[40913.328s]Generation 121
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 45 ; iter: dec(#1); seedExpr: 45 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(45,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.00398406374502
Average Fitness: 2.863639455427803E9
Fitness Variation: 3.6292098479974627E9
Distribution: pair1 -> 0.147, (95,167) -> 0.115, dec -> 0.100, times -> 0.095, (118,81) -> 0.061, #1 -> 0.060, 98 -> 0.051, inc -> 0.050, #3 -> 0.044, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[41546.827s]Generation 122
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.96414342629482
Average Fitness: 2.9780820417465706E9
Fitness Variation: 3.6561839597408347E9
Distribution: pair1 -> 0.149, (95,167) -> 0.116, dec -> 0.100, times -> 0.092, (118,81) -> 0.062, #1 -> 0.059, inc -> 0.050, 98 -> 0.049, #3 -> 0.044, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[42228.498s]Generation 123
Best Result: (fitness: 8182898668.9, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.08764940239044
Average Fitness: 2.579010932363749E9
Fitness Variation: 3.45508044581221E9
Distribution: pair1 -> 0.149, (95,167) -> 0.119, dec -> 0.101, times -> 0.095, (118,81) -> 0.062, #1 -> 0.059, inc -> 0.051, 98 -> 0.050, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[42735.704s]Generation 124
Best Result: (fitness: 8281926156.9, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: prepend(#2, append(prepend((100,204), #3), (95,167))); seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.820717131474105
Average Fitness: 2.6575905408616004E9
Fitness Variation: 3.478528777053372E9
Distribution: pair1 -> 0.145, (95,167) -> 0.116, dec -> 0.099, times -> 0.093, (118,81) -> 0.059, #1 -> 0.059, 98 -> 0.050, inc -> 0.050, #3 -> 0.042, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[43298.286s]Generation 125
Best Result: (fitness: 8358121532.1, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.71713147410359
Average Fitness: 2.539657579283377E9
Fitness Variation: 3.446936515527671E9
Distribution: pair1 -> 0.145, (95,167) -> 0.111, dec -> 0.097, times -> 0.091, #1 -> 0.061, (118,81) -> 0.061, inc -> 0.050, 98 -> 0.049, #3 -> 0.042, mkPair -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[43972.248s]Generation 126
Best Result: (fitness: 8358121532.1, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.66135458167331
Average Fitness: 2.7103358018125978E9
Fitness Variation: 3.5638845738109255E9
Distribution: pair1 -> 0.143, (95,167) -> 0.112, dec -> 0.097, times -> 0.091, (118,81) -> 0.061, #1 -> 0.059, inc -> 0.049, 98 -> 0.048, #3 -> 0.044, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[44646.444s]Generation 127
Best Result: (fitness: 8358121532.1, performance: 9230032130.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.79282868525896
Average Fitness: 3.2918550515091476E9
Fitness Variation: 3.7356691603994994E9
Distribution: pair1 -> 0.142, (95,167) -> 0.113, dec -> 0.100, times -> 0.093, (118,81) -> 0.060, #1 -> 0.057, inc -> 0.049, 98 -> 0.049, #3 -> 0.045, mkPair -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[45139.268s]Generation 128
Best Result: (fitness: 8358121532.1, performance: 9230032130.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 45.342629482071715
Average Fitness: 2.91868068842349E9
Fitness Variation: 3.723792581543017E9
Distribution: pair1 -> 0.138, (95,167) -> 0.110, dec -> 0.100, times -> 0.094, (118,81) -> 0.061, #1 -> 0.060, inc -> 0.050, 98 -> 0.049, #3 -> 0.045, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[45701.135s]Generation 129
Best Result: (fitness: 8358121532.1, performance: 9230032130.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 189)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(85726871,189),(97,118)]), ...
Average Size: 44.9203187250996
Average Fitness: 2.5383473561407504E9
Fitness Variation: 3.51274664483079E9
Distribution: pair1 -> 0.130, (95,167) -> 0.102, dec -> 0.099, times -> 0.093, (118,81) -> 0.062, #1 -> 0.059, inc -> 0.051, 98 -> 0.048, #3 -> 0.047, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[46448.412s]Generation 130
Best Result: (fitness: 9160830458.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 45.53386454183267
Average Fitness: 3.2356111202550936E9
Fitness Variation: 3.754339315601988E9
Distribution: pair1 -> 0.126, dec -> 0.102, (95,167) -> 0.097, times -> 0.096, (118,81) -> 0.061, #1 -> 0.061, inc -> 0.052, 98 -> 0.051, #3 -> 0.046, mkPair -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[46964.967s]Generation 131
Best Result: (fitness: 9160830458.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.93625498007968
Average Fitness: 3.133766900950623E9
Fitness Variation: 3.7644929518778024E9
Distribution: pair1 -> 0.113, dec -> 0.100, times -> 0.095, (95,167) -> 0.080, (118,81) -> 0.066, #1 -> 0.061, inc -> 0.051, 98 -> 0.049, #3 -> 0.047, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[47604.394s]Generation 132
Best Result: (fitness: 9160830458.8, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.56573705179283
Average Fitness: 2.9819854270002484E9
Fitness Variation: 3.720864977015392E9
Distribution: pair1 -> 0.109, dec -> 0.102, times -> 0.097, (95,167) -> 0.074, (118,81) -> 0.066, #1 -> 0.063, inc -> 0.053, 98 -> 0.052, #3 -> 0.047, 95 -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[48270.319s]Generation 133
Best Result: (fitness: 9160830458.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.633466135458164
Average Fitness: 2.9121986707688084E9
Fitness Variation: 3.7523020424640036E9
Distribution: pair1 -> 0.111, dec -> 0.102, times -> 0.096, (95,167) -> 0.075, (118,81) -> 0.065, #1 -> 0.062, inc -> 0.053, 98 -> 0.050, 95 -> 0.046, #3 -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[48775.633s]Generation 134
Best Result: (fitness: 9160830458.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.60956175298805
Average Fitness: 2.7389342453466034E9
Fitness Variation: 3.741378408967062E9
Distribution: pair1 -> 0.114, dec -> 0.103, times -> 0.097, (95,167) -> 0.077, (118,81) -> 0.065, #1 -> 0.062, inc -> 0.053, 98 -> 0.051, #3 -> 0.044, 95 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[49330.537s]Generation 135
Best Result: (fitness: 9160830458.8, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(pair1((95,167)))), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 45.28286852589641
Average Fitness: 2.732637978876377E9
Fitness Variation: 3.7449520851198378E9
Distribution: pair1 -> 0.123, dec -> 0.101, times -> 0.094, (95,167) -> 0.088, (118,81) -> 0.064, #1 -> 0.059, inc -> 0.052, 98 -> 0.049, #3 -> 0.044, mkPair -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[50017.284s]Generation 136
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 45.1394422310757
Average Fitness: 2.8238791172610974E9
Fitness Variation: 3.8204036339470987E9
Distribution: pair1 -> 0.130, dec -> 0.103, (95,167) -> 0.096, times -> 0.096, (118,81) -> 0.061, #1 -> 0.060, inc -> 0.053, 98 -> 0.050, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[50827.550s]Generation 137
Best Result: (fitness: 9312921925.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (166,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: mkPair(166, inc(pair1((118,81)))) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(166,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 46.04382470119522
Average Fitness: 2.9097791412153535E9
Fitness Variation: 3.859716997698241E9
Distribution: pair1 -> 0.137, (95,167) -> 0.105, dec -> 0.099, times -> 0.090, (118,81) -> 0.061, #1 -> 0.057, inc -> 0.050, 98 -> 0.047, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[51654.557s]Generation 138
Best Result: (fitness: 9312921925.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (166,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: mkPair(166, inc(pair1((118,81)))) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(166,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 47.45816733067729
Average Fitness: 3.3712355280300107E9
Fitness Variation: 4.0653948869079647E9
Distribution: pair1 -> 0.137, (95,167) -> 0.104, dec -> 0.097, times -> 0.090, (118,81) -> 0.060, #1 -> 0.057, inc -> 0.050, 98 -> 0.048, #3 -> 0.043, mkPair -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[52533.273s]Generation 139
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 46.64143426294821
Average Fitness: 3.4397037588514056E9
Fitness Variation: 4.138998499273594E9
Distribution: pair1 -> 0.138, (95,167) -> 0.102, dec -> 0.096, times -> 0.091, (118,81) -> 0.064, #1 -> 0.058, inc -> 0.051, 98 -> 0.048, #3 -> 0.045, mkPair -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[53364.661s]Generation 140
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 46.48605577689243
Average Fitness: 3.6515756782451925E9
Fitness Variation: 4.2269782024485264E9
Distribution: pair1 -> 0.137, dec -> 0.100, (95,167) -> 0.099, times -> 0.094, (118,81) -> 0.066, #1 -> 0.059, inc -> 0.053, 98 -> 0.049, #3 -> 0.046, mkPair -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[54116.347s]Generation 141
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 45.820717131474105
Average Fitness: 2.9625552737934456E9
Fitness Variation: 4.022168154303971E9
Distribution: pair1 -> 0.129, dec -> 0.100, times -> 0.095, (95,167) -> 0.086, (118,81) -> 0.069, #1 -> 0.058, inc -> 0.053, 98 -> 0.049, #3 -> 0.046, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[54807.556s]Generation 142
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 45.55378486055777
Average Fitness: 3.039022811119132E9
Fitness Variation: 4.003201939581557E9
Distribution: pair1 -> 0.125, dec -> 0.097, times -> 0.091, (95,167) -> 0.078, (118,81) -> 0.072, #1 -> 0.060, inc -> 0.053, #3 -> 0.046, 98 -> 0.046, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[55527.030s]Generation 143
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 46.322709163346616
Average Fitness: 2.70816485428564E9
Fitness Variation: 3.903885466088892E9
Distribution: pair1 -> 0.120, dec -> 0.104, times -> 0.097, (95,167) -> 0.074, (118,81) -> 0.069, #1 -> 0.060, inc -> 0.056, 98 -> 0.051, #3 -> 0.044, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[56420.265s]Generation 144
Best Result: (fitness: 9356994068.7, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 160 ; iter: dec(#1); seedExpr: 160 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(160,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 47.50199203187251
Average Fitness: 3.171173645569103E9
Fitness Variation: 4.0846148873748946E9
Distribution: pair1 -> 0.112, dec -> 0.103, times -> 0.098, (95,167) -> 0.069, (118,81) -> 0.067, #1 -> 0.062, inc -> 0.055, 98 -> 0.050, 95 -> 0.046, #3 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[57207.648s]Generation 145
Best Result: (fitness: 9382817604.3, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 45.342629482071715
Average Fitness: 3.0786643726994576E9
Fitness Variation: 4.124673409226423E9
Distribution: pair1 -> 0.111, dec -> 0.099, times -> 0.094, (118,81) -> 0.067, (95,167) -> 0.066, #1 -> 0.061, inc -> 0.053, 98 -> 0.049, #3 -> 0.047, 95 -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[57944.449s]Generation 146
Best Result: (fitness: 9374738023.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 118 ; iter: dec(#1); seedExpr: pair1((118,81)) }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.88844621513944
Average Fitness: 2.953470509347707E9
Fitness Variation: 4.023004137021028E9
Distribution: pair1 -> 0.109, dec -> 0.103, times -> 0.098, (95,167) -> 0.067, (118,81) -> 0.064, #1 -> 0.061, inc -> 0.053, 98 -> 0.051, 95 -> 0.047, #3 -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[58667.682s]Generation 147
Best Result: (fitness: 9382817604.3, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 118 ; iter: dec(#1); seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,167) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,167) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(pair1((95,167))), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,167),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.90438247011952
Average Fitness: 2.8405587796097827E9
Fitness Variation: 3.952989489732964E9
Distribution: pair1 -> 0.105, dec -> 0.103, times -> 0.098, (95,167) -> 0.064, #1 -> 0.061, (118,81) -> 0.061, inc -> 0.052, 98 -> 0.050, 95 -> 0.048, #3 -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[59378.945s]Generation 148
Best Result: (fitness: 9523703316.2, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.55378486055777
Average Fitness: 3.332554087564776E9
Fitness Variation: 4.180532549226517E9
Distribution: pair1 -> 0.108, dec -> 0.102, times -> 0.096, (118,81) -> 0.064, (95,167) -> 0.064, #1 -> 0.062, inc -> 0.054, 98 -> 0.052, 95 -> 0.048, #3 -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[60215.778s]Generation 149
Best Result: (fitness: 9523703316.2, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.98804780876494
Average Fitness: 3.2787016815839376E9
Fitness Variation: 4.120201355422163E9
Distribution: pair1 -> 0.107, dec -> 0.103, times -> 0.096, (118,81) -> 0.066, (95,167) -> 0.062, #1 -> 0.060, inc -> 0.054, 95 -> 0.051, 98 -> 0.051, #3 -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[60884.998s]Generation 150
Best Result: (fitness: 9523703316.2, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.95219123505976
Average Fitness: 3.3726979773811226E9
Fitness Variation: 4.0937246537918415E9
Distribution: dec -> 0.107, times -> 0.101, pair1 -> 0.101, (118,81) -> 0.064, #1 -> 0.062, 95 -> 0.060, (95,167) -> 0.058, inc -> 0.053, 98 -> 0.052, #3 -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[61535.178s]Generation 151
Best Result: (fitness: 9523703316.2, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.66135458167331
Average Fitness: 3.2618502354167275E9
Fitness Variation: 4.12706816842433E9
Distribution: dec -> 0.105, times -> 0.101, pair1 -> 0.099, (118,81) -> 0.065, #1 -> 0.064, 95 -> 0.058, (95,167) -> 0.056, inc -> 0.054, 98 -> 0.054, #3 -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[62155.933s]Generation 152
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 44.04780876494024
Average Fitness: 2.8835355002928605E9
Fitness Variation: 4.0650850612706976E9
Distribution: dec -> 0.105, times -> 0.100, pair1 -> 0.096, (118,81) -> 0.065, #1 -> 0.064, 95 -> 0.061, inc -> 0.053, 98 -> 0.052, (95,167) -> 0.051, #3 -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[62863.577s]Generation 153
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.73705179282869
Average Fitness: 3.215172300695552E9
Fitness Variation: 4.1410323698084607E9
Distribution: dec -> 0.108, times -> 0.101, pair1 -> 0.094, 95 -> 0.064, #1 -> 0.063, (118,81) -> 0.062, inc -> 0.054, 98 -> 0.052, (95,167) -> 0.051, #3 -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[63526.718s]Generation 154
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.69322709163347
Average Fitness: 2.9064666668736224E9
Fitness Variation: 4.014082549474036E9
Distribution: dec -> 0.106, times -> 0.099, pair1 -> 0.091, 95 -> 0.070, (118,81) -> 0.066, #1 -> 0.063, inc -> 0.055, 98 -> 0.053, #3 -> 0.048, (95,167) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[64141.427s]Generation 155
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.41434262948207
Average Fitness: 3.241710774687269E9
Fitness Variation: 4.0150293049386663E9
Distribution: dec -> 0.109, times -> 0.103, pair1 -> 0.086, 95 -> 0.077, #1 -> 0.065, (118,81) -> 0.065, inc -> 0.054, 98 -> 0.054, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[64886.866s]Generation 156
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.669322709163346
Average Fitness: 2.8335536299339643E9
Fitness Variation: 4.013894190793844E9
Distribution: dec -> 0.104, times -> 0.097, pair1 -> 0.082, 95 -> 0.078, (118,81) -> 0.069, #1 -> 0.062, inc -> 0.053, 98 -> 0.050, #3 -> 0.048, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[65557.242s]Generation 157
Best Result: (fitness: 9523703316.2, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(pair1((95,167)), inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.93625498007968
Average Fitness: 2.9378391060789404E9
Fitness Variation: 4.0195855370055547E9
Distribution: dec -> 0.108, times -> 0.101, 95 -> 0.084, pair1 -> 0.076, (118,81) -> 0.065, #1 -> 0.064, inc -> 0.055, 98 -> 0.053, #3 -> 0.048, mkPair -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[66127.448s]Generation 158
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.70517928286853
Average Fitness: 3.286234829042558E9
Fitness Variation: 4.15194748778446E9
Distribution: dec -> 0.105, times -> 0.097, 95 -> 0.082, pair1 -> 0.079, (118,81) -> 0.067, #1 -> 0.063, inc -> 0.054, 98 -> 0.051, #3 -> 0.049, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[66790.622s]Generation 159
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 43.342629482071715
Average Fitness: 3.099011397442456E9
Fitness Variation: 4.087932887767299E9
Distribution: dec -> 0.108, times -> 0.100, 95 -> 0.089, pair1 -> 0.072, (118,81) -> 0.066, #1 -> 0.065, inc -> 0.055, 98 -> 0.053, #3 -> 0.049, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[67289.932s]Generation 160
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.20318725099602
Average Fitness: 2.598810148535204E9
Fitness Variation: 3.887309517260771E9
Distribution: dec -> 0.114, times -> 0.104, 95 -> 0.098, #1 -> 0.068, pair1 -> 0.066, (118,81) -> 0.064, inc -> 0.055, 98 -> 0.055, #3 -> 0.050, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[67909.888s]Generation 161
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.01593625498008
Average Fitness: 2.7548492432473955E9
Fitness Variation: 3.9331031043527684E9
Distribution: dec -> 0.112, times -> 0.104, 95 -> 0.100, #1 -> 0.066, (118,81) -> 0.064, pair1 -> 0.063, inc -> 0.058, 98 -> 0.056, #3 -> 0.049, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[68732.016s]Generation 162
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.745019920318725
Average Fitness: 3.271403783097773E9
Fitness Variation: 4.0258183757685857E9
Distribution: dec -> 0.111, times -> 0.103, 95 -> 0.102, #1 -> 0.067, (118,81) -> 0.065, pair1 -> 0.061, inc -> 0.056, 98 -> 0.054, #3 -> 0.050, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[69403.305s]Generation 163
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.05179282868526
Average Fitness: 3.3775170216590347E9
Fitness Variation: 4.2118435514924045E9
Distribution: dec -> 0.110, 95 -> 0.105, times -> 0.102, (118,81) -> 0.067, #1 -> 0.065, pair1 -> 0.061, inc -> 0.055, 98 -> 0.054, #3 -> 0.051, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[70175.226s]Generation 164
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.83665338645418
Average Fitness: 3.4773262717349463E9
Fitness Variation: 4.223221882140255E9
Distribution: dec -> 0.113, 95 -> 0.113, times -> 0.105, (118,81) -> 0.069, #1 -> 0.068, pair1 -> 0.059, inc -> 0.059, 98 -> 0.054, #3 -> 0.050, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[70898.579s]Generation 165
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.68127490039841
Average Fitness: 3.4149664198916025E9
Fitness Variation: 4.136377322491711E9
Distribution: 95 -> 0.115, dec -> 0.113, times -> 0.105, (118,81) -> 0.069, #1 -> 0.064, pair1 -> 0.059, inc -> 0.058, 98 -> 0.055, #3 -> 0.050, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[71436.379s]Generation 166
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (13,121) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (13,121) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(13,121),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.20717131474104
Average Fitness: 2.9237553306071787E9
Fitness Variation: 3.9930475719866204E9
Distribution: 95 -> 0.116, dec -> 0.113, times -> 0.107, (118,81) -> 0.068, #1 -> 0.065, inc -> 0.057, pair1 -> 0.056, 98 -> 0.056, #3 -> 0.050, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[71986.842s]Generation 167
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 75 ; iter: dec(#1); seedExpr: 75 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (151,176) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (151,176) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(151,176),(100,204),(148,52),(152,42),(142,141),(75,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.05577689243028
Average Fitness: 3.124137131723791E9
Fitness Variation: 4.0119084095719204E9
Distribution: 95 -> 0.116, dec -> 0.113, times -> 0.105, (118,81) -> 0.067, #1 -> 0.065, inc -> 0.057, pair1 -> 0.056, 98 -> 0.056, #3 -> 0.050, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[72447.260s]Generation 168
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (32,142) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (32,142) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(32,142),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.9601593625498
Average Fitness: 2.837990208157881E9
Fitness Variation: 3.972674248206129E9
Distribution: 95 -> 0.118, dec -> 0.114, times -> 0.106, (118,81) -> 0.067, #1 -> 0.064, inc -> 0.058, 98 -> 0.057, pair1 -> 0.057, #3 -> 0.051, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[72930.390s]Generation 169
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.04780876494024
Average Fitness: 3.280373413616493E9
Fitness Variation: 4.246240496812716E9
Distribution: 95 -> 0.116, dec -> 0.112, times -> 0.105, (118,81) -> 0.070, #1 -> 0.065, pair1 -> 0.059, inc -> 0.057, 98 -> 0.056, #3 -> 0.050, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[73380.420s]Generation 170
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.123505976095615
Average Fitness: 2.8394582581726227E9
Fitness Variation: 3.987189722874191E9
Distribution: 95 -> 0.118, dec -> 0.115, times -> 0.107, (118,81) -> 0.068, #1 -> 0.066, inc -> 0.058, pair1 -> 0.058, 98 -> 0.057, #3 -> 0.050, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[73972.521s]Generation 171
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.80478087649402
Average Fitness: 2.8977118917080817E9
Fitness Variation: 4.063258534379942E9
Distribution: 95 -> 0.116, dec -> 0.114, times -> 0.107, (118,81) -> 0.068, #1 -> 0.065, inc -> 0.058, 98 -> 0.058, pair1 -> 0.057, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[74643.595s]Generation 172
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.908366533864545
Average Fitness: 3.1433520687032876E9
Fitness Variation: 4.0008225576582546E9
Distribution: 95 -> 0.114, dec -> 0.113, times -> 0.105, (118,81) -> 0.065, #1 -> 0.065, inc -> 0.057, 98 -> 0.057, pair1 -> 0.055, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[75176.067s]Generation 173
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.67330677290837
Average Fitness: 2.555586764205533E9
Fitness Variation: 3.9021816545789337E9
Distribution: 95 -> 0.112, dec -> 0.110, times -> 0.102, (118,81) -> 0.071, #1 -> 0.064, pair1 -> 0.058, inc -> 0.056, 98 -> 0.055, #3 -> 0.050, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[75798.426s]Generation 174
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.00796812749004
Average Fitness: 2.792736690670409E9
Fitness Variation: 3.8902960644544888E9
Distribution: 95 -> 0.114, dec -> 0.113, times -> 0.106, (118,81) -> 0.068, #1 -> 0.065, inc -> 0.058, 98 -> 0.056, pair1 -> 0.055, #3 -> 0.047, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[76652.430s]Generation 175
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 146 ; iter: dec(#1); seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.462151394422314
Average Fitness: 3.5689964796269255E9
Fitness Variation: 4.1762360293092995E9
Distribution: 95 -> 0.112, dec -> 0.110, times -> 0.103, (118,81) -> 0.069, #1 -> 0.065, inc -> 0.057, pair1 -> 0.056, 98 -> 0.055, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[77188.954s]Generation 176
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.0398406374502
Average Fitness: 3.29765991456783E9
Fitness Variation: 4.286016317983596E9
Distribution: 95 -> 0.111, dec -> 0.111, times -> 0.106, (118,81) -> 0.069, #1 -> 0.067, inc -> 0.059, 98 -> 0.057, pair1 -> 0.055, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 25 generations ago.
------------
[77891.091s]Generation 177
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.37848605577689
Average Fitness: 3.4832417117860107E9
Fitness Variation: 4.306359930970756E9
Distribution: 95 -> 0.112, dec -> 0.112, times -> 0.107, (118,81) -> 0.068, #1 -> 0.067, inc -> 0.058, 98 -> 0.057, pair1 -> 0.056, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 26 generations ago.
------------
[78428.924s]Generation 178
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.167330677290835
Average Fitness: 3.123663017802713E9
Fitness Variation: 4.1639969657882833E9
Distribution: dec -> 0.112, 95 -> 0.111, times -> 0.106, #1 -> 0.070, (118,81) -> 0.067, inc -> 0.057, 98 -> 0.056, pair1 -> 0.056, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 27 generations ago.
------------
[78913.025s]Generation 179
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (82,132) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (82,132) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(82,132),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.0796812749004
Average Fitness: 3.1026282920796614E9
Fitness Variation: 4.191231751089981E9
Distribution: 95 -> 0.115, dec -> 0.114, times -> 0.107, (118,81) -> 0.067, #1 -> 0.066, inc -> 0.058, pair1 -> 0.057, 98 -> 0.057, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 28 generations ago.
------------
[79540.494s]Generation 180
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 49 ; iter: dec(#1); seedExpr: 49 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(49,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.85657370517928
Average Fitness: 3.0226443584978795E9
Fitness Variation: 4.040534888928983E9
Distribution: 95 -> 0.115, dec -> 0.114, times -> 0.106, (118,81) -> 0.071, #1 -> 0.067, pair1 -> 0.058, inc -> 0.058, 98 -> 0.056, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 29 generations ago.
------------
[80060.330s]Generation 181
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.00796812749004
Average Fitness: 2.992909452539707E9
Fitness Variation: 4.0832008267583976E9
Distribution: dec -> 0.111, 95 -> 0.111, times -> 0.103, (118,81) -> 0.068, #1 -> 0.068, inc -> 0.056, pair1 -> 0.055, 98 -> 0.055, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 30 generations ago.
------------
[80513.584s]Generation 182
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.67330677290837
Average Fitness: 3.0155955364802074E9
Fitness Variation: 4.115423912245782E9
Distribution: 95 -> 0.114, dec -> 0.114, times -> 0.107, (118,81) -> 0.069, #1 -> 0.068, inc -> 0.059, 98 -> 0.058, pair1 -> 0.055, #3 -> 0.049, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 31 generations ago.
------------
[81138.029s]Generation 183
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.49402390438247
Average Fitness: 3.3813237863205037E9
Fitness Variation: 4.265693648853397E9
Distribution: 95 -> 0.111, dec -> 0.110, times -> 0.102, (118,81) -> 0.072, #1 -> 0.066, pair1 -> 0.058, inc -> 0.057, 98 -> 0.055, #3 -> 0.049, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 32 generations ago.
------------
[81673.473s]Generation 184
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 146 ; iter: dec(#1); seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.298804780876495
Average Fitness: 3.603573207093773E9
Fitness Variation: 4.336625592026285E9
Distribution: 95 -> 0.116, dec -> 0.116, times -> 0.108, (118,81) -> 0.069, #1 -> 0.068, inc -> 0.058, 98 -> 0.056, pair1 -> 0.055, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 33 generations ago.
------------
[82426.779s]Generation 185
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.0796812749004
Average Fitness: 3.252478818798906E9
Fitness Variation: 4.214643238629843E9
Distribution: 95 -> 0.114, dec -> 0.112, times -> 0.104, (118,81) -> 0.073, #1 -> 0.064, pair1 -> 0.060, inc -> 0.056, 98 -> 0.055, #3 -> 0.048, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 34 generations ago.
------------
[82989.938s]Generation 186
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.60956175298805
Average Fitness: 2.5542256443762007E9
Fitness Variation: 3.9082999048387256E9
Distribution: dec -> 0.114, 95 -> 0.112, times -> 0.107, (118,81) -> 0.070, #1 -> 0.069, 98 -> 0.058, inc -> 0.058, pair1 -> 0.057, #3 -> 0.046, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 35 generations ago.
------------
[83492.737s]Generation 187
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.27091633466136
Average Fitness: 2.693032227249834E9
Fitness Variation: 3.9120262534479675E9
Distribution: dec -> 0.114, 95 -> 0.113, times -> 0.108, #1 -> 0.072, (118,81) -> 0.065, inc -> 0.057, 98 -> 0.056, pair1 -> 0.055, #3 -> 0.046, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 36 generations ago.
------------
[84020.894s]Generation 188
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.60956175298805
Average Fitness: 2.8665306299065475E9
Fitness Variation: 3.91759693479403E9
Distribution: 95 -> 0.113, dec -> 0.113, times -> 0.105, (118,81) -> 0.069, #1 -> 0.065, pair1 -> 0.057, inc -> 0.057, 98 -> 0.056, #3 -> 0.048, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 37 generations ago.
------------
[84622.313s]Generation 189
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.98804780876494
Average Fitness: 2.9525301347025185E9
Fitness Variation: 3.9345671487244453E9
Distribution: 95 -> 0.117, dec -> 0.115, times -> 0.108, (118,81) -> 0.068, #1 -> 0.067, inc -> 0.058, 98 -> 0.057, pair1 -> 0.056, #3 -> 0.047, mkPair -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 38 generations ago.
------------
[85413.681s]Generation 190
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (145,192) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (145,192) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(145,192),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.52988047808765
Average Fitness: 3.598126415516701E9
Fitness Variation: 4.2433636737781167E9
Distribution: 95 -> 0.114, dec -> 0.113, times -> 0.104, (118,81) -> 0.070, #1 -> 0.066, inc -> 0.058, pair1 -> 0.056, 98 -> 0.054, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 39 generations ago.
------------
[86069.974s]Generation 191
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (9,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (9,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(9,125),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.73705179282869
Average Fitness: 3.2570321707748475E9
Fitness Variation: 4.214286673981133E9
Distribution: dec -> 0.112, 95 -> 0.112, times -> 0.104, (118,81) -> 0.071, #1 -> 0.066, pair1 -> 0.058, inc -> 0.057, 98 -> 0.055, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 40 generations ago.
------------
[86662.249s]Generation 192
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 146 ; iter: dec(#1); seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (148,125) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (148,125) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(148,125),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.98406374501992
Average Fitness: 3.449534511426573E9
Fitness Variation: 4.2007945373459997E9
Distribution: dec -> 0.113, 95 -> 0.112, times -> 0.106, (118,81) -> 0.068, #1 -> 0.068, inc -> 0.056, pair1 -> 0.056, 98 -> 0.055, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 41 generations ago.
------------
[87181.441s]Generation 193
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 146 ; iter: dec(#1); seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (170,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (170,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(170,17),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.47011952191235
Average Fitness: 2.825545162759186E9
Fitness Variation: 4.047189963316667E9
Distribution: dec -> 0.111, 95 -> 0.107, times -> 0.104, (118,81) -> 0.069, #1 -> 0.066, inc -> 0.057, pair1 -> 0.056, 98 -> 0.056, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 42 generations ago.
------------
[87680.990s]Generation 194
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.569721115537845
Average Fitness: 2.838700619062107E9
Fitness Variation: 3.924649464377141E9
Distribution: dec -> 0.113, 95 -> 0.112, times -> 0.107, #1 -> 0.070, (118,81) -> 0.065, inc -> 0.057, 98 -> 0.057, pair1 -> 0.054, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 43 generations ago.
------------
[88392.966s]Generation 195
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: dec(#1); seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.91235059760956
Average Fitness: 3.2411258092450547E9
Fitness Variation: 4.1159238829760103E9
Distribution: dec -> 0.113, 95 -> 0.109, times -> 0.108, #1 -> 0.070, (118,81) -> 0.067, inc -> 0.058, 98 -> 0.056, pair1 -> 0.055, #3 -> 0.049, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 44 generations ago.
------------
[89074.279s]Generation 196
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.29083665338646
Average Fitness: 3.1417600964543004E9
Fitness Variation: 4.063017156643471E9
Distribution: dec -> 0.108, 95 -> 0.106, times -> 0.102, (118,81) -> 0.071, #1 -> 0.065, pair1 -> 0.057, inc -> 0.055, 98 -> 0.053, #3 -> 0.051, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 45 generations ago.
------------
[89628.063s]Generation 197
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (15,71) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (15,71) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(15,71),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.49800796812749
Average Fitness: 3.078231360810597E9
Fitness Variation: 4.050723615549606E9
Distribution: dec -> 0.112, 95 -> 0.107, times -> 0.105, (118,81) -> 0.068, #1 -> 0.067, 98 -> 0.057, inc -> 0.057, pair1 -> 0.056, #3 -> 0.050, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 46 generations ago.
------------
[90245.801s]Generation 198
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.41035856573705
Average Fitness: 2.841675558081852E9
Fitness Variation: 3.9943864236825385E9
Distribution: dec -> 0.113, 95 -> 0.110, times -> 0.106, #1 -> 0.067, (118,81) -> 0.066, pair1 -> 0.058, inc -> 0.057, 98 -> 0.056, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 47 generations ago.
------------
[90904.227s]Generation 199
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.2589641434263
Average Fitness: 3.283199935898531E9
Fitness Variation: 4.2014562164524446E9
Distribution: dec -> 0.113, 95 -> 0.110, times -> 0.106, #1 -> 0.069, (118,81) -> 0.068, inc -> 0.057, pair1 -> 0.057, 98 -> 0.056, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 48 generations ago.
------------
[91501.596s]Generation 200
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.38247011952191
Average Fitness: 3.1722541316950226E9
Fitness Variation: 4.167925643617177E9
Distribution: dec -> 0.113, 95 -> 0.112, times -> 0.108, (118,81) -> 0.069, #1 -> 0.066, inc -> 0.060, 98 -> 0.059, pair1 -> 0.057, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 49 generations ago.
------------
[92230.524s]Generation 201
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (86,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (86,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(136,17)] ; iter: #3; seedExpr: [(136,17)] }
Best Individual Pattern: Vector([(86,17),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.39043824701195
Average Fitness: 3.287756886304214E9
Fitness Variation: 4.1548002311053133E9
Distribution: dec -> 0.115, 95 -> 0.114, times -> 0.109, #1 -> 0.068, (118,81) -> 0.068, inc -> 0.058, 98 -> 0.057, pair1 -> 0.056, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 50 generations ago.
------------
[92885.277s]Generation 202
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 79 ; iter: dec(#1); seedExpr: 79 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(79,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.23107569721115
Average Fitness: 3.4325184344269047E9
Fitness Variation: 4.2818830125062304E9
Distribution: dec -> 0.113, 95 -> 0.110, times -> 0.105, (118,81) -> 0.071, #1 -> 0.066, pair1 -> 0.056, inc -> 0.056, 98 -> 0.055, #3 -> 0.046, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 51 generations ago.
------------
[93547.389s]Generation 203
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,119) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (95,119) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,119),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.01593625498008
Average Fitness: 2.9859891068859444E9
Fitness Variation: 4.059389230594225E9
Distribution: dec -> 0.114, 95 -> 0.111, times -> 0.105, (118,81) -> 0.070, #1 -> 0.065, inc -> 0.057, 98 -> 0.055, pair1 -> 0.055, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 52 generations ago.
------------
[94015.693s]Generation 204
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 146 ; iter: dec(98); seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.99203187250996
Average Fitness: 2.4940775467013535E9
Fitness Variation: 3.829417696719628E9
Distribution: dec -> 0.112, 95 -> 0.111, times -> 0.108, (118,81) -> 0.069, #1 -> 0.066, inc -> 0.059, 98 -> 0.057, pair1 -> 0.055, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 53 generations ago.
------------
[94516.364s]Generation 205
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (86,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (86,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(86,17),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.733067729083665
Average Fitness: 2.813504388358672E9
Fitness Variation: 3.9221984626713486E9
Distribution: dec -> 0.115, 95 -> 0.113, times -> 0.107, (118,81) -> 0.068, #1 -> 0.066, 98 -> 0.057, inc -> 0.057, pair1 -> 0.055, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 54 generations ago.
------------
[95203.133s]Generation 206
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (199,179) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (199,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(197,202)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(197,202)] }
Best Individual Pattern: Vector([(199,179),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.896414342629484
Average Fitness: 3.2676903364578867E9
Fitness Variation: 4.1229220797542143E9
Distribution: dec -> 0.113, 95 -> 0.112, times -> 0.106, (118,81) -> 0.068, #1 -> 0.066, 98 -> 0.058, inc -> 0.057, pair1 -> 0.056, #3 -> 0.047, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 55 generations ago.
------------
[95846.267s]Generation 207
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 79 ; iter: dec(#1); seedExpr: 79 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(79,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.57370517928287
Average Fitness: 3.4107268996541195E9
Fitness Variation: 4.2240015745016813E9
Distribution: dec -> 0.111, 95 -> 0.111, times -> 0.104, (118,81) -> 0.070, #1 -> 0.064, 98 -> 0.058, inc -> 0.057, pair1 -> 0.057, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 56 generations ago.
------------
[96543.508s]Generation 208
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.0398406374502
Average Fitness: 3.309460280487147E9
Fitness Variation: 4.188769313840404E9
Distribution: dec -> 0.114, 95 -> 0.113, times -> 0.106, (118,81) -> 0.072, #1 -> 0.066, pair1 -> 0.058, inc -> 0.057, 98 -> 0.057, #3 -> 0.048, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 57 generations ago.
------------
[97230.809s]Generation 209
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (131,65) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (131,65) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(131,65),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.0
Average Fitness: 3.1804069268697295E9
Fitness Variation: 4.1751676337942195E9
Distribution: dec -> 0.113, 95 -> 0.112, times -> 0.108, (118,81) -> 0.070, #1 -> 0.066, 98 -> 0.059, inc -> 0.059, pair1 -> 0.057, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 58 generations ago.
------------
[97635.340s]Generation 210
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 170 ; iter: dec(98); seedExpr: 170 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(170,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.103585657370516
Average Fitness: 3.011673006079922E9
Fitness Variation: 4.146929920014026E9
Distribution: dec -> 0.113, 95 -> 0.111, times -> 0.107, (118,81) -> 0.071, #1 -> 0.065, 98 -> 0.059, inc -> 0.057, pair1 -> 0.057, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 59 generations ago.
------------
[98306.987s]Generation 211
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 208 ; iter: dec(#1); seedExpr: 208 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(208,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.49800796812749
Average Fitness: 3.6292228480861564E9
Fitness Variation: 4.300813216487868E9
Distribution: dec -> 0.113, 95 -> 0.113, times -> 0.107, (118,81) -> 0.071, #1 -> 0.065, 98 -> 0.059, inc -> 0.059, pair1 -> 0.057, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 60 generations ago.
------------
[98834.817s]Generation 212
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 170 ; iter: dec(98); seedExpr: 170 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(170,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.16334661354582
Average Fitness: 3.0847894043214874E9
Fitness Variation: 4.1122464803805985E9
Distribution: dec -> 0.110, 95 -> 0.110, times -> 0.104, (118,81) -> 0.074, #1 -> 0.064, pair1 -> 0.061, inc -> 0.058, 98 -> 0.056, #3 -> 0.048, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 61 generations ago.
------------
[99461.192s]Generation 213
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 170 ; iter: dec(98); seedExpr: 170 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(170,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.7410358565737
Average Fitness: 3.123864363156288E9
Fitness Variation: 4.1329922861508474E9
Distribution: dec -> 0.115, 95 -> 0.112, times -> 0.107, (118,81) -> 0.068, #1 -> 0.066, 98 -> 0.058, inc -> 0.058, pair1 -> 0.055, #3 -> 0.048, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 62 generations ago.
------------
[100061.741s]Generation 214
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.75298804780876
Average Fitness: 3.3349769783622675E9
Fitness Variation: 4.2285224793935466E9
Distribution: dec -> 0.114, 95 -> 0.113, times -> 0.106, (118,81) -> 0.067, #1 -> 0.065, inc -> 0.059, 98 -> 0.058, pair1 -> 0.057, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 63 generations ago.
------------
[100646.011s]Generation 215
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.13147410358566
Average Fitness: 3.090618465935668E9
Fitness Variation: 4.138046518790179E9
Distribution: dec -> 0.112, 95 -> 0.110, times -> 0.103, (118,81) -> 0.068, #1 -> 0.066, inc -> 0.057, pair1 -> 0.056, 98 -> 0.056, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 64 generations ago.
------------
[101214.774s]Generation 216
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (86,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (86,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(86,17),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.77290836653386
Average Fitness: 2.917550866992154E9
Fitness Variation: 4.0695303989600573E9
Distribution: dec -> 0.112, 95 -> 0.109, times -> 0.104, (118,81) -> 0.070, #1 -> 0.066, 98 -> 0.058, pair1 -> 0.057, inc -> 0.056, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 65 generations ago.
------------
[101823.537s]Generation 217
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (86,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (86,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(86,17),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.98406374501992
Average Fitness: 2.8684796084368906E9
Fitness Variation: 4.007153326498232E9
Distribution: dec -> 0.113, 95 -> 0.110, times -> 0.103, (118,81) -> 0.070, #1 -> 0.065, 98 -> 0.059, inc -> 0.057, pair1 -> 0.056, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 66 generations ago.
------------
[102438.510s]Generation 218
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.35059760956175
Average Fitness: 2.9204471264066324E9
Fitness Variation: 4.028916080960865E9
Distribution: dec -> 0.113, 95 -> 0.111, times -> 0.106, (118,81) -> 0.066, #1 -> 0.065, 98 -> 0.061, inc -> 0.059, pair1 -> 0.055, #3 -> 0.046, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 67 generations ago.
------------
[102857.411s]Generation 219
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.04382470119522
Average Fitness: 3.178186922185325E9
Fitness Variation: 4.1244303082605844E9
Distribution: dec -> 0.114, 95 -> 0.113, times -> 0.108, #1 -> 0.065, (118,81) -> 0.065, 98 -> 0.061, inc -> 0.058, pair1 -> 0.053, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 68 generations ago.
------------
[103537.838s]Generation 220
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (182,164) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (182,164) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(182,164),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.645418326693225
Average Fitness: 3.224497008204137E9
Fitness Variation: 4.1956749391542163E9
Distribution: dec -> 0.113, 95 -> 0.112, times -> 0.107, (118,81) -> 0.068, #1 -> 0.064, 98 -> 0.060, inc -> 0.059, pair1 -> 0.057, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 69 generations ago.
------------
[104009.807s]Generation 221
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 177 ; iter: dec(#1); seedExpr: 177 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (6,140) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (6,140) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(6,140),(100,204),(148,52),(152,42),(142,141),(177,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.537848605577686
Average Fitness: 3.0435391000906625E9
Fitness Variation: 4.154751119765196E9
Distribution: dec -> 0.113, 95 -> 0.111, times -> 0.106, (118,81) -> 0.069, #1 -> 0.062, 98 -> 0.061, inc -> 0.057, pair1 -> 0.056, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 70 generations ago.
------------
[104531.878s]Generation 222
Best Result: (fitness: 9549430964.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(98); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, dec(95)), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.298804780876495
Average Fitness: 3.21600113812415E9
Fitness Variation: 4.291477734075907E9
Distribution: dec -> 0.112, 95 -> 0.110, times -> 0.106, (118,81) -> 0.071, #1 -> 0.065, 98 -> 0.061, inc -> 0.058, pair1 -> 0.057, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[105028.880s]Generation 223
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.50199203187251
Average Fitness: 2.7333710734837646E9
Fitness Variation: 3.9733897449200726E9
Distribution: dec -> 0.110, 95 -> 0.108, times -> 0.106, (118,81) -> 0.068, #1 -> 0.068, 98 -> 0.060, inc -> 0.056, pair1 -> 0.056, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[105532.520s]Generation 224
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.613545816733065
Average Fitness: 3.0155488112294602E9
Fitness Variation: 4.0758420579311647E9
Distribution: dec -> 0.112, 95 -> 0.109, times -> 0.107, #1 -> 0.067, (118,81) -> 0.066, 98 -> 0.061, inc -> 0.057, pair1 -> 0.055, #3 -> 0.048, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[106072.534s]Generation 225
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.2589641434263
Average Fitness: 3.003046259638935E9
Fitness Variation: 4.044228941340966E9
Distribution: dec -> 0.108, 95 -> 0.106, times -> 0.103, (118,81) -> 0.070, #1 -> 0.062, 98 -> 0.060, pair1 -> 0.059, inc -> 0.057, #3 -> 0.049, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[106678.137s]Generation 226
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.9203187250996
Average Fitness: 2.9792219068630447E9
Fitness Variation: 4.0186942692827973E9
Distribution: dec -> 0.109, times -> 0.109, 95 -> 0.104, #1 -> 0.066, (118,81) -> 0.064, 98 -> 0.063, inc -> 0.058, pair1 -> 0.054, #3 -> 0.047, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[107193.140s]Generation 227
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.54980079681275
Average Fitness: 2.883146952789147E9
Fitness Variation: 4.061393143131283E9
Distribution: times -> 0.107, dec -> 0.106, 95 -> 0.103, #1 -> 0.065, (118,81) -> 0.065, 98 -> 0.064, inc -> 0.058, pair1 -> 0.054, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[107786.411s]Generation 228
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.53386454183267
Average Fitness: 3.064551551271103E9
Fitness Variation: 4.089013621212014E9
Distribution: times -> 0.108, dec -> 0.104, 95 -> 0.099, (118,81) -> 0.067, #1 -> 0.064, 98 -> 0.063, inc -> 0.058, pair1 -> 0.056, #3 -> 0.045, mkPair -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[108315.447s]Generation 229
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 42.03585657370518
Average Fitness: 3.07116627426475E9
Fitness Variation: 4.1457876275689645E9
Distribution: times -> 0.109, dec -> 0.096, 95 -> 0.089, (118,81) -> 0.070, #1 -> 0.066, 98 -> 0.063, inc -> 0.059, pair1 -> 0.057, #3 -> 0.047, mkPair -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[108969.142s]Generation 230
Best Result: (fitness: 9688896217.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(dec(95), times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.286852589641434
Average Fitness: 3.149207515283522E9
Fitness Variation: 4.1873545675886464E9
Distribution: times -> 0.109, dec -> 0.086, 95 -> 0.079, (118,81) -> 0.071, #1 -> 0.069, 98 -> 0.063, inc -> 0.059, pair1 -> 0.059, #3 -> 0.048, mkPair -> 0.046
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[109744.673s]Generation 231
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (151,47) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (151,47) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(151,47),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.02390438247012
Average Fitness: 3.1749419720288296E9
Fitness Variation: 4.17507518458636E9
Distribution: times -> 0.109, dec -> 0.079, (118,81) -> 0.071, 95 -> 0.071, #1 -> 0.070, 98 -> 0.062, inc -> 0.060, pair1 -> 0.059, #3 -> 0.048, mkPair -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[110257.785s]Generation 232
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (151,47) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (151,47) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(151,47),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.103585657370516
Average Fitness: 3.106514061608468E9
Fitness Variation: 4.0444699043397336E9
Distribution: times -> 0.112, dec -> 0.077, (118,81) -> 0.068, #1 -> 0.068, 95 -> 0.068, 98 -> 0.067, inc -> 0.060, pair1 -> 0.057, #3 -> 0.048, mkPair -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[110933.429s]Generation 233
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.1593625498008
Average Fitness: 3.3118991674600067E9
Fitness Variation: 4.1985344844705315E9
Distribution: times -> 0.115, dec -> 0.071, #1 -> 0.070, (118,81) -> 0.068, 98 -> 0.066, 95 -> 0.062, inc -> 0.061, pair1 -> 0.057, 94 -> 0.051, #3 -> 0.047
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[111540.685s]Generation 234
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.72908366533864
Average Fitness: 3.2621912714371634E9
Fitness Variation: 4.277952125983242E9
Distribution: times -> 0.112, (118,81) -> 0.073, dec -> 0.070, #1 -> 0.068, 98 -> 0.066, inc -> 0.061, pair1 -> 0.061, 95 -> 0.061, 94 -> 0.051, mkPair -> 0.048
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[112109.261s]Generation 235
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.68127490039841
Average Fitness: 2.9635734539568696E9
Fitness Variation: 4.1524010530393343E9
Distribution: times -> 0.111, (118,81) -> 0.075, #1 -> 0.067, dec -> 0.066, 98 -> 0.065, pair1 -> 0.061, inc -> 0.061, 95 -> 0.057, 94 -> 0.054, mkPair -> 0.048
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[112671.654s]Generation 236
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 41.123505976095615
Average Fitness: 3.3802546125166106E9
Fitness Variation: 4.268676771568101E9
Distribution: times -> 0.115, (118,81) -> 0.073, #1 -> 0.069, 98 -> 0.065, dec -> 0.064, inc -> 0.062, pair1 -> 0.061, 94 -> 0.059, 95 -> 0.054, mkPair -> 0.048
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[113254.891s]Generation 237
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.418326693227094
Average Fitness: 3.3336753348527327E9
Fitness Variation: 4.306943189218497E9
Distribution: times -> 0.113, (118,81) -> 0.078, #1 -> 0.070, pair1 -> 0.063, 98 -> 0.063, 94 -> 0.062, dec -> 0.060, inc -> 0.060, mkPair -> 0.049, 95 -> 0.049
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[113917.280s]Generation 238
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.20318725099602
Average Fitness: 3.2536244463987865E9
Fitness Variation: 4.320347372215972E9
Distribution: times -> 0.117, (118,81) -> 0.077, 94 -> 0.075, #1 -> 0.073, 98 -> 0.065, pair1 -> 0.062, inc -> 0.061, dec -> 0.051, mkPair -> 0.049, #3 -> 0.048
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[114412.909s]Generation 239
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.0796812749004
Average Fitness: 3.406664749813251E9
Fitness Variation: 4.356058181307741E9
Distribution: times -> 0.121, 94 -> 0.086, (118,81) -> 0.080, #1 -> 0.074, 98 -> 0.067, inc -> 0.065, pair1 -> 0.063, mkPair -> 0.049, #3 -> 0.048, dec -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[114803.566s]Generation 240
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 29 ; iter: dec(#1); seedExpr: 29 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(29,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.2390438247012
Average Fitness: 3.1256266477465043E9
Fitness Variation: 4.269001874162299E9
Distribution: times -> 0.117, 94 -> 0.088, (118,81) -> 0.080, #1 -> 0.073, pair1 -> 0.066, 98 -> 0.065, inc -> 0.062, mkPair -> 0.051, #3 -> 0.049, dec -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[115222.193s]Generation 241
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 29 ; iter: dec(#1); seedExpr: 29 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(29,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.46613545816733
Average Fitness: 2.6511751394450655E9
Fitness Variation: 3.911975104468588E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.082, #1 -> 0.072, 98 -> 0.067, pair1 -> 0.065, inc -> 0.063, mkPair -> 0.050, #3 -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[115718.300s]Generation 242
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.24701195219124
Average Fitness: 2.740956304787932E9
Fitness Variation: 3.993915971615484E9
Distribution: times -> 0.111, 94 -> 0.088, (118,81) -> 0.080, #1 -> 0.069, pair1 -> 0.065, 98 -> 0.065, inc -> 0.063, mkPair -> 0.051, #3 -> 0.051, dec -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[116195.593s]Generation 243
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.52589641434263
Average Fitness: 3.096768232304341E9
Fitness Variation: 4.1644983697111297E9
Distribution: times -> 0.113, 94 -> 0.091, (118,81) -> 0.080, #1 -> 0.070, pair1 -> 0.065, 98 -> 0.065, inc -> 0.063, mkPair -> 0.051, #3 -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[116672.531s]Generation 244
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (192,61) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (192,61) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(192,61),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.91633466135458
Average Fitness: 3.553735248862163E9
Fitness Variation: 4.345578498079117E9
Distribution: times -> 0.122, 94 -> 0.096, (118,81) -> 0.078, #1 -> 0.075, 98 -> 0.066, inc -> 0.066, pair1 -> 0.062, mkPair -> 0.049, #3 -> 0.049, dec -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[117008.167s]Generation 245
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 173 ; iter: dec(#1); seedExpr: 173 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(173,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.0
Average Fitness: 3.099672206832737E9
Fitness Variation: 4.28177678315815E9
Distribution: times -> 0.116, 94 -> 0.094, (118,81) -> 0.084, #1 -> 0.072, 98 -> 0.065, pair1 -> 0.065, inc -> 0.064, mkPair -> 0.050, #3 -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[117482.610s]Generation 246
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.42231075697211
Average Fitness: 3.2022054904410725E9
Fitness Variation: 4.245814613349922E9
Distribution: times -> 0.120, 94 -> 0.097, (118,81) -> 0.079, #1 -> 0.076, 98 -> 0.068, inc -> 0.066, pair1 -> 0.061, #3 -> 0.050, mkPair -> 0.049, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[118069.349s]Generation 247
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (66,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (66,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(66,17),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.0199203187251
Average Fitness: 3.3385646353268833E9
Fitness Variation: 4.357896446684945E9
Distribution: times -> 0.121, 94 -> 0.098, (118,81) -> 0.080, #1 -> 0.074, 98 -> 0.066, inc -> 0.065, pair1 -> 0.063, mkPair -> 0.050, #3 -> 0.048, dec -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[118715.794s]Generation 248
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.44223107569721
Average Fitness: 3.6990855713759193E9
Fitness Variation: 4.410676405717552E9
Distribution: times -> 0.122, 94 -> 0.099, (118,81) -> 0.080, #1 -> 0.074, 98 -> 0.067, inc -> 0.064, pair1 -> 0.063, #3 -> 0.051, mkPair -> 0.049, dec -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[119349.613s]Generation 249
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.50996015936255
Average Fitness: 2.8649222632086625E9
Fitness Variation: 4.139343390911785E9
Distribution: times -> 0.120, 94 -> 0.095, (118,81) -> 0.079, #1 -> 0.077, 98 -> 0.065, pair1 -> 0.062, inc -> 0.062, #3 -> 0.050, mkPair -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[119808.529s]Generation 250
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.581673306772906
Average Fitness: 3.315533189890753E9
Fitness Variation: 4.315417059200021E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.080, #1 -> 0.074, 98 -> 0.066, pair1 -> 0.064, inc -> 0.063, #3 -> 0.051, mkPair -> 0.050, dec -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[120255.284s]Generation 251
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.733067729083665
Average Fitness: 3.316900854268965E9
Fitness Variation: 4.352513093247437E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.078, #1 -> 0.077, 98 -> 0.065, inc -> 0.063, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.049, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[120697.137s]Generation 252
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.24701195219124
Average Fitness: 3.4449821150194135E9
Fitness Variation: 4.386721307080691E9
Distribution: times -> 0.122, 94 -> 0.096, (118,81) -> 0.078, #1 -> 0.076, 98 -> 0.068, inc -> 0.064, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.049, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[121201.562s]Generation 253
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 45 ; iter: dec(#1); seedExpr: 45 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (141,15) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (141,15) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(141,15),(100,204),(148,52),(152,42),(142,141),(45,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.0398406374502
Average Fitness: 3.129354007016874E9
Fitness Variation: 4.281029885779584E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.078, #1 -> 0.074, 98 -> 0.068, inc -> 0.064, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.049, dec -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[121716.742s]Generation 254
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.47410358565737
Average Fitness: 2.9259360468360205E9
Fitness Variation: 4.1132661841255155E9
Distribution: times -> 0.124, 94 -> 0.096, (118,81) -> 0.077, #1 -> 0.076, 98 -> 0.068, inc -> 0.064, pair1 -> 0.060, #3 -> 0.049, mkPair -> 0.049, dec -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[122302.145s]Generation 255
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.53386454183267
Average Fitness: 3.1262875625618544E9
Fitness Variation: 4.1587710327683883E9
Distribution: times -> 0.116, 94 -> 0.092, (118,81) -> 0.080, #1 -> 0.072, 98 -> 0.067, inc -> 0.063, pair1 -> 0.063, mkPair -> 0.049, #3 -> 0.049, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 25 generations ago.
------------
[122928.259s]Generation 256
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.44223107569721
Average Fitness: 3.387326476657138E9
Fitness Variation: 4.331821919047458E9
Distribution: times -> 0.119, 94 -> 0.094, (118,81) -> 0.080, #1 -> 0.072, 98 -> 0.069, inc -> 0.065, pair1 -> 0.063, mkPair -> 0.049, #3 -> 0.048, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 26 generations ago.
------------
[123559.895s]Generation 257
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.79282868525896
Average Fitness: 3.0666898126605444E9
Fitness Variation: 4.193816980623259E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.079, #1 -> 0.075, 98 -> 0.065, pair1 -> 0.064, inc -> 0.063, mkPair -> 0.050, #3 -> 0.048, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 27 generations ago.
------------
[124272.760s]Generation 258
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.42231075697211
Average Fitness: 3.228280313316849E9
Fitness Variation: 4.244324846761143E9
Distribution: times -> 0.115, 94 -> 0.089, (118,81) -> 0.076, #1 -> 0.074, 98 -> 0.064, inc -> 0.064, pair1 -> 0.063, mkPair -> 0.050, #3 -> 0.047, (100,204) -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 28 generations ago.
------------
[124913.376s]Generation 259
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 146 ; iter: dec(#1); seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.69322709163347
Average Fitness: 2.803074132051384E9
Fitness Variation: 3.9728243938826995E9
Distribution: times -> 0.113, 94 -> 0.089, (118,81) -> 0.075, #1 -> 0.074, 98 -> 0.066, inc -> 0.064, pair1 -> 0.062, mkPair -> 0.051, #3 -> 0.048, (100,204) -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 29 generations ago.
------------
[125666.847s]Generation 260
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.83665338645418
Average Fitness: 3.3401840227912445E9
Fitness Variation: 4.2743683338904324E9
Distribution: times -> 0.115, 94 -> 0.091, (118,81) -> 0.076, #1 -> 0.073, 98 -> 0.065, inc -> 0.063, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.048, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 30 generations ago.
------------
[126344.414s]Generation 261
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 145 ; iter: dec(#1); seedExpr: 145 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.68127490039841
Average Fitness: 3.276613437794245E9
Fitness Variation: 4.308544829062567E9
Distribution: times -> 0.115, 94 -> 0.090, (118,81) -> 0.076, #1 -> 0.073, 98 -> 0.065, inc -> 0.063, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.048, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 31 generations ago.
------------
[127021.697s]Generation 262
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (109,52) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (109,52) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(109,52),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.82470119521912
Average Fitness: 2.970082815616322E9
Fitness Variation: 4.1331800337017245E9
Distribution: times -> 0.115, 94 -> 0.090, (118,81) -> 0.076, #1 -> 0.075, 98 -> 0.065, inc -> 0.063, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.049, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 32 generations ago.
------------
[127684.582s]Generation 263
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 138 ; iter: dec(#1); seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.95617529880478
Average Fitness: 3.1799531406579914E9
Fitness Variation: 4.1803264007078724E9
Distribution: times -> 0.120, 94 -> 0.095, #1 -> 0.075, (118,81) -> 0.075, 98 -> 0.064, inc -> 0.063, pair1 -> 0.061, mkPair -> 0.049, #3 -> 0.048, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 33 generations ago.
------------
[128315.622s]Generation 264
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 83 ; iter: dec(#1); seedExpr: 83 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(83,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.72908366533864
Average Fitness: 3.4932222825979366E9
Fitness Variation: 4.374284985525337E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.076, #1 -> 0.073, inc -> 0.065, 98 -> 0.065, pair1 -> 0.063, mkPair -> 0.051, #3 -> 0.048, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 34 generations ago.
------------
[128821.588s]Generation 265
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (202,203) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (202,203) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(202,203),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.96812749003984
Average Fitness: 2.9632940158646817E9
Fitness Variation: 4.2181129090972104E9
Distribution: times -> 0.113, 94 -> 0.088, (118,81) -> 0.080, #1 -> 0.074, inc -> 0.064, pair1 -> 0.063, 98 -> 0.062, mkPair -> 0.050, #3 -> 0.049, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 35 generations ago.
------------
[129327.217s]Generation 266
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.99601593625498
Average Fitness: 3.374071926820233E9
Fitness Variation: 4.309411811042734E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.076, #1 -> 0.073, inc -> 0.065, 98 -> 0.064, pair1 -> 0.061, mkPair -> 0.049, #3 -> 0.047, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 36 generations ago.
------------
[130005.614s]Generation 267
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: dec(#1); seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.733067729083665
Average Fitness: 3.4074346157840614E9
Fitness Variation: 4.290547814990615E9
Distribution: times -> 0.116, 94 -> 0.091, (118,81) -> 0.080, #1 -> 0.073, inc -> 0.064, pair1 -> 0.064, 98 -> 0.062, mkPair -> 0.050, #3 -> 0.049, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 37 generations ago.
------------
[130735.774s]Generation 268
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 145 ; iter: dec(#1); seedExpr: 145 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.04382470119522
Average Fitness: 3.5949722406585317E9
Fitness Variation: 4.351926998300569E9
Distribution: times -> 0.117, 94 -> 0.091, (118,81) -> 0.080, #1 -> 0.072, 98 -> 0.064, pair1 -> 0.063, inc -> 0.063, mkPair -> 0.050, #3 -> 0.048, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 38 generations ago.
------------
[131353.883s]Generation 269
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.79681274900398
Average Fitness: 3.145372492140875E9
Fitness Variation: 4.2260585514079633E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.079, #1 -> 0.073, inc -> 0.065, 98 -> 0.064, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.048, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 39 generations ago.
------------
[132099.054s]Generation 270
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 145 ; iter: dec(#1); seedExpr: 145 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.51792828685259
Average Fitness: 3.498591256214253E9
Fitness Variation: 4.301136722316223E9
Distribution: times -> 0.115, 94 -> 0.091, (118,81) -> 0.079, #1 -> 0.075, inc -> 0.063, 98 -> 0.063, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.048, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 40 generations ago.
------------
[132676.930s]Generation 271
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 145 ; iter: dec(#1); seedExpr: 145 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.74900398406375
Average Fitness: 3.6089958896738033E9
Fitness Variation: 4.459125026470449E9
Distribution: times -> 0.116, 94 -> 0.091, (118,81) -> 0.080, #1 -> 0.075, inc -> 0.064, 98 -> 0.063, pair1 -> 0.063, mkPair -> 0.051, #3 -> 0.048, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 41 generations ago.
------------
[133325.743s]Generation 272
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.01195219123506
Average Fitness: 2.985431757661812E9
Fitness Variation: 4.212946610307775E9
Distribution: times -> 0.113, 94 -> 0.088, (118,81) -> 0.083, #1 -> 0.073, pair1 -> 0.067, inc -> 0.062, 98 -> 0.061, mkPair -> 0.051, #3 -> 0.049, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 42 generations ago.
------------
[133889.672s]Generation 273
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 145 ; iter: dec(#1); seedExpr: 145 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.1593625498008
Average Fitness: 3.3149800798636746E9
Fitness Variation: 4.2761071533963284E9
Distribution: times -> 0.118, 94 -> 0.095, (118,81) -> 0.079, #1 -> 0.077, inc -> 0.064, pair1 -> 0.062, 98 -> 0.062, #3 -> 0.050, mkPair -> 0.049, dec -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 43 generations ago.
------------
[134565.699s]Generation 274
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (202,203) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (202,203) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(202,203),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.059760956175296
Average Fitness: 3.641423599042926E9
Fitness Variation: 4.367732285100541E9
Distribution: times -> 0.118, 94 -> 0.094, (118,81) -> 0.081, #1 -> 0.073, inc -> 0.065, 98 -> 0.064, pair1 -> 0.063, #3 -> 0.051, mkPair -> 0.049, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 44 generations ago.
------------
[135068.660s]Generation 275
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.49003984063745
Average Fitness: 3.4432153281809583E9
Fitness Variation: 4.379105740473519E9
Distribution: times -> 0.119, 94 -> 0.097, (118,81) -> 0.078, #1 -> 0.074, inc -> 0.064, 98 -> 0.064, pair1 -> 0.061, mkPair -> 0.049, #3 -> 0.048, (100,204) -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 45 generations ago.
------------
[135835.541s]Generation 276
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.72908366533864
Average Fitness: 3.340535424011905E9
Fitness Variation: 4.2368942379826508E9
Distribution: times -> 0.119, 94 -> 0.096, (118,81) -> 0.077, #1 -> 0.073, inc -> 0.064, 98 -> 0.063, pair1 -> 0.062, mkPair -> 0.049, #3 -> 0.048, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 46 generations ago.
------------
[136353.179s]Generation 277
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.59760956175299
Average Fitness: 2.9324506873896923E9
Fitness Variation: 4.13720902522836E9
Distribution: times -> 0.119, 94 -> 0.098, (118,81) -> 0.076, #1 -> 0.074, inc -> 0.064, 98 -> 0.063, pair1 -> 0.061, mkPair -> 0.050, #3 -> 0.049, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 47 generations ago.
------------
[136937.692s]Generation 278
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.54980079681275
Average Fitness: 3.0098499426281095E9
Fitness Variation: 4.1127181747677703E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.076, #1 -> 0.074, inc -> 0.065, 98 -> 0.063, pair1 -> 0.063, mkPair -> 0.049, #3 -> 0.048, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 48 generations ago.
------------
[137544.373s]Generation 279
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 190 ; iter: dec(#1); seedExpr: 190 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(190,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.60557768924303
Average Fitness: 3.5374892754477563E9
Fitness Variation: 4.344958507679145E9
Distribution: times -> 0.118, 94 -> 0.094, (118,81) -> 0.077, #1 -> 0.074, inc -> 0.064, pair1 -> 0.063, 98 -> 0.062, mkPair -> 0.050, #3 -> 0.049, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 49 generations ago.
------------
[138174.117s]Generation 280
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.95219123505976
Average Fitness: 3.3508346531042514E9
Fitness Variation: 4.294558583461145E9
Distribution: times -> 0.118, 94 -> 0.094, (118,81) -> 0.077, #1 -> 0.074, inc -> 0.065, 98 -> 0.062, pair1 -> 0.062, mkPair -> 0.050, #3 -> 0.049, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 50 generations ago.
------------
[138684.681s]Generation 281
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.58964143426295
Average Fitness: 3.187479839423215E9
Fitness Variation: 4.252772167011939E9
Distribution: times -> 0.115, 94 -> 0.094, (118,81) -> 0.077, #1 -> 0.074, inc -> 0.062, pair1 -> 0.061, 98 -> 0.061, mkPair -> 0.049, #3 -> 0.049, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 51 generations ago.
------------
[139399.352s]Generation 282
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 109 ; iter: dec(#1); seedExpr: 109 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(109,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.199203187250994
Average Fitness: 2.909831082416426E9
Fitness Variation: 4.093470583096443E9
Distribution: times -> 0.115, 94 -> 0.092, (118,81) -> 0.077, #1 -> 0.073, pair1 -> 0.063, inc -> 0.063, 98 -> 0.061, #3 -> 0.052, mkPair -> 0.051, (100,204) -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 52 generations ago.
------------
[139956.989s]Generation 283
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 166 ; iter: dec(#1); seedExpr: 166 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(166,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.689243027888445
Average Fitness: 3.3015943649874334E9
Fitness Variation: 4.254103952353552E9
Distribution: times -> 0.117, 94 -> 0.094, (118,81) -> 0.077, #1 -> 0.072, inc -> 0.063, 98 -> 0.063, pair1 -> 0.062, #3 -> 0.051, mkPair -> 0.051, (100,204) -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 53 generations ago.
------------
[140469.393s]Generation 284
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (202,203) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (202,203) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(202,203),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.46613545816733
Average Fitness: 3.245963067210632E9
Fitness Variation: 4.344078996785936E9
Distribution: times -> 0.116, 94 -> 0.092, (118,81) -> 0.078, #1 -> 0.073, 98 -> 0.063, inc -> 0.063, pair1 -> 0.062, #3 -> 0.052, mkPair -> 0.050, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 54 generations ago.
------------
[141060.295s]Generation 285
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.50996015936255
Average Fitness: 3.1038637250706105E9
Fitness Variation: 4.138788920211894E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.077, #1 -> 0.073, inc -> 0.063, 98 -> 0.062, pair1 -> 0.061, #3 -> 0.050, mkPair -> 0.049, dec -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 55 generations ago.
------------
[141663.218s]Generation 286
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.398406374501995
Average Fitness: 3.244792069974069E9
Fitness Variation: 4.170790056403789E9
Distribution: times -> 0.121, 94 -> 0.098, #1 -> 0.076, (118,81) -> 0.074, 98 -> 0.065, inc -> 0.064, pair1 -> 0.059, #3 -> 0.051, mkPair -> 0.049, (100,204) -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 56 generations ago.
------------
[142295.178s]Generation 287
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.41035856573705
Average Fitness: 4.0137177560236387E9
Fitness Variation: 4.547997721099515E9
Distribution: times -> 0.120, 94 -> 0.097, (118,81) -> 0.079, #1 -> 0.074, 98 -> 0.066, inc -> 0.064, pair1 -> 0.062, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 57 generations ago.
------------
[143079.377s]Generation 288
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: dec(#1); seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.49003984063745
Average Fitness: 3.6551463498175273E9
Fitness Variation: 4.439227213347582E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.080, #1 -> 0.073, pair1 -> 0.063, 98 -> 0.063, inc -> 0.063, #3 -> 0.052, mkPair -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 58 generations ago.
------------
[143685.214s]Generation 289
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,207) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (142,207) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,207),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.98804780876494
Average Fitness: 3.1963225981244545E9
Fitness Variation: 4.1958662692545834E9
Distribution: times -> 0.116, 94 -> 0.092, (118,81) -> 0.079, #1 -> 0.073, inc -> 0.064, pair1 -> 0.064, 98 -> 0.063, #3 -> 0.050, mkPair -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 59 generations ago.
------------
[144182.554s]Generation 290
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.54581673306773
Average Fitness: 3.2781380629361973E9
Fitness Variation: 4.2306312001580415E9
Distribution: times -> 0.119, 94 -> 0.094, (118,81) -> 0.081, #1 -> 0.073, 98 -> 0.065, pair1 -> 0.065, inc -> 0.065, #3 -> 0.050, mkPair -> 0.049, 194 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 60 generations ago.
------------
[144695.005s]Generation 291
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.45816733067729
Average Fitness: 3.227061715160396E9
Fitness Variation: 4.2327918732869635E9
Distribution: times -> 0.120, 94 -> 0.095, (118,81) -> 0.081, #1 -> 0.076, inc -> 0.064, pair1 -> 0.064, 98 -> 0.063, #3 -> 0.050, mkPair -> 0.050, dec -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 61 generations ago.
------------
[145492.176s]Generation 292
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.88446215139442
Average Fitness: 3.7177164932639556E9
Fitness Variation: 4.352332692429752E9
Distribution: times -> 0.120, 94 -> 0.097, (118,81) -> 0.080, #1 -> 0.075, 98 -> 0.065, inc -> 0.065, pair1 -> 0.062, #3 -> 0.050, mkPair -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 62 generations ago.
------------
[146082.391s]Generation 293
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.57768924302789
Average Fitness: 3.1626906046303315E9
Fitness Variation: 4.236056207111579E9
Distribution: times -> 0.116, 94 -> 0.093, (118,81) -> 0.081, #1 -> 0.072, 98 -> 0.065, inc -> 0.065, pair1 -> 0.062, #3 -> 0.051, mkPair -> 0.050, 194 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 63 generations ago.
------------
[146701.681s]Generation 294
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.98804780876494
Average Fitness: 2.776838206052246E9
Fitness Variation: 4.054101663600532E9
Distribution: times -> 0.118, 94 -> 0.093, (118,81) -> 0.078, #1 -> 0.076, 98 -> 0.064, inc -> 0.063, pair1 -> 0.062, mkPair -> 0.049, #3 -> 0.049, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 64 generations ago.
------------
[147384.350s]Generation 295
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.08366533864542
Average Fitness: 3.0417285017711854E9
Fitness Variation: 4.0971548356530147E9
Distribution: times -> 0.114, 94 -> 0.092, (118,81) -> 0.080, #1 -> 0.073, pair1 -> 0.064, inc -> 0.062, 98 -> 0.062, #3 -> 0.053, mkPair -> 0.050, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 65 generations ago.
------------
[148011.045s]Generation 296
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.41035856573705
Average Fitness: 2.6650670391359687E9
Fitness Variation: 3.9495270806955805E9
Distribution: times -> 0.115, 94 -> 0.092, (118,81) -> 0.080, #1 -> 0.069, 98 -> 0.065, inc -> 0.064, pair1 -> 0.063, #3 -> 0.052, mkPair -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 66 generations ago.
------------
[148698.705s]Generation 297
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.26294820717131
Average Fitness: 3.2245891287125483E9
Fitness Variation: 4.09505753461964E9
Distribution: times -> 0.118, 94 -> 0.096, #1 -> 0.077, (118,81) -> 0.075, inc -> 0.063, 98 -> 0.063, pair1 -> 0.059, #3 -> 0.051, mkPair -> 0.049, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 67 generations ago.
------------
[149237.420s]Generation 298
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.91235059760956
Average Fitness: 3.146516805756498E9
Fitness Variation: 4.258179620262426E9
Distribution: times -> 0.120, 94 -> 0.096, #1 -> 0.079, (118,81) -> 0.075, inc -> 0.065, 98 -> 0.064, pair1 -> 0.060, #3 -> 0.050, mkPair -> 0.049, dec -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 68 generations ago.
------------
[149889.147s]Generation 299
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (135,10) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (135,10) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(135,10),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.286852589641434
Average Fitness: 3.601223541967172E9
Fitness Variation: 4.3967851409311905E9
Distribution: times -> 0.115, 94 -> 0.092, (118,81) -> 0.078, #1 -> 0.072, inc -> 0.063, 98 -> 0.063, pair1 -> 0.062, #3 -> 0.051, mkPair -> 0.048, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 69 generations ago.
------------
[150444.018s]Generation 300
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 194 ; iter: dec(#1); seedExpr: 194 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (196,135) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (196,135) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(196,135),(100,204),(148,52),(152,42),(142,141),(194,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.73705179282869
Average Fitness: 3.8607244553459935E9
Fitness Variation: 4.528349731892553E9
Distribution: times -> 0.115, 94 -> 0.093, (118,81) -> 0.083, #1 -> 0.070, pair1 -> 0.065, inc -> 0.062, 98 -> 0.061, #3 -> 0.052, mkPair -> 0.049, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 70 generations ago.
------------
[151045.652s]Generation 301
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.243027888446214
Average Fitness: 3.041068040574463E9
Fitness Variation: 4.1958175508788447E9
Distribution: times -> 0.118, 94 -> 0.093, (118,81) -> 0.079, #1 -> 0.072, 98 -> 0.065, pair1 -> 0.064, inc -> 0.062, #3 -> 0.050, mkPair -> 0.050, #0 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 71 generations ago.
------------
[151717.115s]Generation 302
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (135,10) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (135,10) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(135,10),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.342629482071715
Average Fitness: 3.46054818665254E9
Fitness Variation: 4.321760888366333E9
Distribution: times -> 0.116, 94 -> 0.093, (118,81) -> 0.079, #1 -> 0.073, 98 -> 0.064, pair1 -> 0.063, inc -> 0.062, mkPair -> 0.050, #3 -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 72 generations ago.
------------
[152331.589s]Generation 303
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (135,10) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (135,10) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(135,10),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.54183266932271
Average Fitness: 3.1670157395108542E9
Fitness Variation: 4.157806412755083E9
Distribution: times -> 0.119, 94 -> 0.096, (118,81) -> 0.078, #1 -> 0.072, 98 -> 0.066, inc -> 0.065, pair1 -> 0.063, mkPair -> 0.050, #3 -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 73 generations ago.
------------
[152964.101s]Generation 304
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 138 ; iter: dec(#1); seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.278884462151396
Average Fitness: 3.3337532025003467E9
Fitness Variation: 4.2461938904585824E9
Distribution: times -> 0.120, 94 -> 0.097, (118,81) -> 0.075, #1 -> 0.075, 98 -> 0.068, inc -> 0.065, pair1 -> 0.060, #3 -> 0.051, mkPair -> 0.049, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 74 generations ago.
------------
[153567.101s]Generation 305
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 209 ; iter: dec(#1); seedExpr: 209 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(209,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.8804780876494
Average Fitness: 3.263177284764731E9
Fitness Variation: 4.2569639888255424E9
Distribution: times -> 0.120, 94 -> 0.096, (118,81) -> 0.078, #1 -> 0.074, 98 -> 0.068, inc -> 0.065, pair1 -> 0.061, #3 -> 0.054, mkPair -> 0.049, dec -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 75 generations ago.
------------
[154131.372s]Generation 306
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: dec(#1); seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.059760956175296
Average Fitness: 3.158997236895049E9
Fitness Variation: 4.2035732709609265E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.080, #1 -> 0.073, pair1 -> 0.065, 98 -> 0.064, inc -> 0.064, #3 -> 0.053, mkPair -> 0.050, 194 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 76 generations ago.
------------
[154675.009s]Generation 307
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.45019920318725
Average Fitness: 3.456571203569618E9
Fitness Variation: 4.311019199679235E9
Distribution: times -> 0.118, 94 -> 0.094, (118,81) -> 0.079, #1 -> 0.075, 98 -> 0.064, inc -> 0.063, pair1 -> 0.062, #3 -> 0.052, mkPair -> 0.050, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 77 generations ago.
------------
[155210.381s]Generation 308
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: dec(#1); seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (135,10) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (135,10) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(135,10),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.65338645418327
Average Fitness: 2.703292141272694E9
Fitness Variation: 3.9988499532586093E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.078, #1 -> 0.075, 98 -> 0.065, inc -> 0.063, pair1 -> 0.062, #3 -> 0.052, mkPair -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 78 generations ago.
------------
[155697.953s]Generation 309
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 33 ; iter: dec(#1); seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.52589641434263
Average Fitness: 2.8938999993760242E9
Fitness Variation: 4.186393918475784E9
Distribution: times -> 0.121, 94 -> 0.094, #1 -> 0.077, (118,81) -> 0.076, 98 -> 0.065, inc -> 0.065, pair1 -> 0.061, #3 -> 0.052, mkPair -> 0.049, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 79 generations ago.
------------
[156284.082s]Generation 310
Best Result: (fitness: 9803819365.6, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: dec(#1); seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.78087649402391
Average Fitness: 3.2861017096982226E9
Fitness Variation: 4.324777146582501E9
Distribution: times -> 0.114, 94 -> 0.089, (118,81) -> 0.077, #1 -> 0.073, pair1 -> 0.063, inc -> 0.062, 98 -> 0.061, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[156928.368s]Generation 311
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.18326693227092
Average Fitness: 3.3500662348306794E9
Fitness Variation: 4.2953403159680195E9
Distribution: times -> 0.116, 94 -> 0.091, (118,81) -> 0.078, #1 -> 0.075, pair1 -> 0.065, inc -> 0.064, 98 -> 0.063, #3 -> 0.054, mkPair -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[157735.898s]Generation 312
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.733067729083665
Average Fitness: 3.907192475670963E9
Fitness Variation: 4.455434156795215E9
Distribution: times -> 0.118, 94 -> 0.093, (118,81) -> 0.075, #1 -> 0.073, 98 -> 0.064, inc -> 0.063, pair1 -> 0.062, #3 -> 0.054, mkPair -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[158290.087s]Generation 313
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 190 ; iter: 97; seedExpr: 190 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(190,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.16334661354582
Average Fitness: 3.3916745106492968E9
Fitness Variation: 4.360487616190899E9
Distribution: times -> 0.115, 94 -> 0.091, (118,81) -> 0.080, #1 -> 0.072, pair1 -> 0.066, 98 -> 0.063, inc -> 0.063, #3 -> 0.054, mkPair -> 0.051, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[158843.733s]Generation 314
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.613545816733065
Average Fitness: 3.210512753949651E9
Fitness Variation: 4.313913152553469E9
Distribution: times -> 0.115, 94 -> 0.090, (118,81) -> 0.078, #1 -> 0.072, pair1 -> 0.064, inc -> 0.063, 98 -> 0.062, #3 -> 0.053, mkPair -> 0.049, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[159458.486s]Generation 315
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.58964143426295
Average Fitness: 2.888751588710007E9
Fitness Variation: 4.1344401019661703E9
Distribution: times -> 0.113, 94 -> 0.088, (118,81) -> 0.078, #1 -> 0.072, pair1 -> 0.064, inc -> 0.063, 98 -> 0.061, #3 -> 0.055, mkPair -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[160029.338s]Generation 316
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.733067729083665
Average Fitness: 3.3128096818316784E9
Fitness Variation: 4.2543094693133345E9
Distribution: times -> 0.116, 94 -> 0.091, (118,81) -> 0.077, #1 -> 0.072, 98 -> 0.065, inc -> 0.065, pair1 -> 0.064, #3 -> 0.053, mkPair -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[160613.655s]Generation 317
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.7609561752988
Average Fitness: 3.007853521320554E9
Fitness Variation: 4.139810855412949E9
Distribution: times -> 0.115, 94 -> 0.090, (118,81) -> 0.077, #1 -> 0.071, inc -> 0.065, 98 -> 0.063, pair1 -> 0.062, #3 -> 0.053, mkPair -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[161469.266s]Generation 318
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.30278884462152
Average Fitness: 3.8638708418104906E9
Fitness Variation: 4.389185814882811E9
Distribution: times -> 0.111, 94 -> 0.088, (118,81) -> 0.077, #1 -> 0.069, pair1 -> 0.064, inc -> 0.063, 98 -> 0.062, #3 -> 0.053, mkPair -> 0.051, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[162071.495s]Generation 319
Best Result: (fitness: 9822208574.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: dec(#1); seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(145,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.733067729083665
Average Fitness: 3.175631197830685E9
Fitness Variation: 4.230386058342248E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.077, #1 -> 0.071, 98 -> 0.065, pair1 -> 0.063, inc -> 0.063, #3 -> 0.052, mkPair -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[162726.812s]Generation 320
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.61752988047809
Average Fitness: 3.2532595968165956E9
Fitness Variation: 4.259051907327629E9
Distribution: times -> 0.114, 94 -> 0.090, (118,81) -> 0.075, #1 -> 0.071, inc -> 0.063, pair1 -> 0.062, 98 -> 0.061, #3 -> 0.052, mkPair -> 0.052, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[163453.478s]Generation 321
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.81673306772908
Average Fitness: 3.4800423722133555E9
Fitness Variation: 4.2928155617846518E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.075, #1 -> 0.070, 98 -> 0.064, inc -> 0.064, pair1 -> 0.061, mkPair -> 0.051, #3 -> 0.049, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[164133.744s]Generation 322
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.78087649402391
Average Fitness: 3.0537968898994827E9
Fitness Variation: 4.1660509962404466E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.074, #1 -> 0.067, 98 -> 0.065, inc -> 0.064, pair1 -> 0.061, #3 -> 0.050, mkPair -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[164811.163s]Generation 323
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #4), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 164 ; iter: 97; seedExpr: 164 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (11,55) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (11,55) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(11,55),(100,204),(164,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.45019920318725
Average Fitness: 2.679440221051558E9
Fitness Variation: 3.900361439096339E9
Distribution: times -> 0.114, 94 -> 0.090, (118,81) -> 0.074, #1 -> 0.065, 98 -> 0.064, inc -> 0.063, pair1 -> 0.061, mkPair -> 0.051, #3 -> 0.049, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[165461.569s]Generation 324
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.31474103585657
Average Fitness: 3.3009947028072577E9
Fitness Variation: 4.1649368577328773E9
Distribution: times -> 0.113, 94 -> 0.089, (118,81) -> 0.073, 98 -> 0.064, inc -> 0.061, pair1 -> 0.061, #1 -> 0.060, #3 -> 0.051, mkPair -> 0.049, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[166218.979s]Generation 325
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.36254980079681
Average Fitness: 3.114033006347243E9
Fitness Variation: 4.0813974900203624E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.075, 98 -> 0.066, #1 -> 0.064, inc -> 0.063, pair1 -> 0.060, mkPair -> 0.051, #3 -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[166894.044s]Generation 326
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.97609561752988
Average Fitness: 3.0654742983555865E9
Fitness Variation: 4.060039969241157E9
Distribution: times -> 0.120, 94 -> 0.096, (118,81) -> 0.074, 98 -> 0.068, #1 -> 0.066, inc -> 0.065, pair1 -> 0.059, #3 -> 0.052, mkPair -> 0.049, prepend -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[167565.200s]Generation 327
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.8804780876494
Average Fitness: 3.5078272870362663E9
Fitness Variation: 4.366682042404619E9
Distribution: times -> 0.117, 94 -> 0.094, (118,81) -> 0.077, 98 -> 0.066, inc -> 0.063, #1 -> 0.062, pair1 -> 0.062, #3 -> 0.052, mkPair -> 0.049, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[168283.847s]Generation 328
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 152 ; iter: 97; seedExpr: 152 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(152,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.06374501992032
Average Fitness: 3.31290968741391E9
Fitness Variation: 4.2722024216835337E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.078, 98 -> 0.067, inc -> 0.064, pair1 -> 0.063, #1 -> 0.061, #3 -> 0.050, mkPair -> 0.050, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[169058.634s]Generation 329
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.342629482071715
Average Fitness: 3.678597152919178E9
Fitness Variation: 4.491603315618908E9
Distribution: times -> 0.120, 94 -> 0.094, (118,81) -> 0.078, 98 -> 0.067, inc -> 0.065, pair1 -> 0.063, #1 -> 0.062, mkPair -> 0.050, #3 -> 0.050, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[169681.145s]Generation 330
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (132,17) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (132,17) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(152,154),(21,129)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(152,154),(21,129)] }
Best Individual Pattern: Vector([(132,17),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.27490039840637
Average Fitness: 3.5518294056962795E9
Fitness Variation: 4.428929061150103E9
Distribution: times -> 0.121, 94 -> 0.093, (118,81) -> 0.077, 98 -> 0.067, inc -> 0.064, pair1 -> 0.063, #1 -> 0.063, #3 -> 0.051, mkPair -> 0.049, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[170429.411s]Generation 331
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (175,67) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (175,67) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(175,67),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.41035856573705
Average Fitness: 3.320191895745722E9
Fitness Variation: 4.2932544496542315E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.075, 98 -> 0.066, inc -> 0.063, pair1 -> 0.062, #1 -> 0.060, mkPair -> 0.050, #3 -> 0.049, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[171160.643s]Generation 332
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.05179282868526
Average Fitness: 3.717007234638075E9
Fitness Variation: 4.378805081913985E9
Distribution: times -> 0.115, 94 -> 0.090, (118,81) -> 0.076, 98 -> 0.065, pair1 -> 0.064, inc -> 0.063, #1 -> 0.058, #3 -> 0.051, mkPair -> 0.050, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[171832.234s]Generation 333
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 23 ; iter: 97; seedExpr: 23 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(23,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.191235059760956
Average Fitness: 3.4598914948270087E9
Fitness Variation: 4.3496867506078825E9
Distribution: times -> 0.120, 94 -> 0.094, (118,81) -> 0.075, 98 -> 0.068, inc -> 0.064, pair1 -> 0.062, #1 -> 0.060, #3 -> 0.052, mkPair -> 0.049, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[172413.985s]Generation 334
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 20 ; iter: 97; seedExpr: 20 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(20,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.82868525896414
Average Fitness: 3.0793772211592264E9
Fitness Variation: 4.1459387594865546E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.075, 98 -> 0.065, inc -> 0.064, pair1 -> 0.062, #1 -> 0.059, #3 -> 0.052, mkPair -> 0.049, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[173136.327s]Generation 335
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (18,130) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (18,130) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(18,130),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.820717131474105
Average Fitness: 3.5337350800834537E9
Fitness Variation: 4.295245518154251E9
Distribution: times -> 0.121, 94 -> 0.094, (118,81) -> 0.073, inc -> 0.066, 98 -> 0.066, pair1 -> 0.060, #1 -> 0.059, #3 -> 0.051, mkPair -> 0.051, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[173744.187s]Generation 336
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 152 ; iter: 97; seedExpr: 152 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(152,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.55776892430279
Average Fitness: 3.56875763642771E9
Fitness Variation: 4.423685586470801E9
Distribution: times -> 0.118, 94 -> 0.092, (118,81) -> 0.078, 98 -> 0.066, inc -> 0.064, pair1 -> 0.063, #1 -> 0.060, mkPair -> 0.052, #3 -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[174309.926s]Generation 337
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 152 ; iter: 97; seedExpr: 152 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(152,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.32669322709163
Average Fitness: 3.382929949048765E9
Fitness Variation: 4.346023166885688E9
Distribution: times -> 0.118, 94 -> 0.093, (118,81) -> 0.080, 98 -> 0.065, pair1 -> 0.064, inc -> 0.064, #1 -> 0.058, mkPair -> 0.051, #3 -> 0.051, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[174818.836s]Generation 338
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #4), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (104,142) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (104,142) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(104,142),(100,204),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.199203187250994
Average Fitness: 3.1283049930833E9
Fitness Variation: 4.309108634997965E9
Distribution: times -> 0.116, 94 -> 0.091, (118,81) -> 0.080, 98 -> 0.066, pair1 -> 0.065, inc -> 0.064, #1 -> 0.057, #3 -> 0.052, mkPair -> 0.052, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[175243.139s]Generation 339
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 69 ; iter: 97; seedExpr: 69 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(69,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.43426294820717
Average Fitness: 2.9351455985464096E9
Fitness Variation: 4.1550068075657105E9
Distribution: times -> 0.121, 94 -> 0.095, (118,81) -> 0.077, 98 -> 0.067, inc -> 0.066, pair1 -> 0.063, #1 -> 0.058, #3 -> 0.051, mkPair -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[175820.084s]Generation 340
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 7 ; iter: 97; seedExpr: 7 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(7,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.62948207171315
Average Fitness: 3.0992440482306657E9
Fitness Variation: 4.2123969519060183E9
Distribution: times -> 0.120, 94 -> 0.093, (118,81) -> 0.080, pair1 -> 0.065, 98 -> 0.065, inc -> 0.065, #1 -> 0.058, #3 -> 0.051, mkPair -> 0.050, (100,204) -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[176281.359s]Generation 341
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.852589641434264
Average Fitness: 2.8226619213474264E9
Fitness Variation: 4.0686763579594655E9
Distribution: times -> 0.122, 94 -> 0.097, (118,81) -> 0.077, 98 -> 0.064, inc -> 0.064, pair1 -> 0.062, #1 -> 0.061, #3 -> 0.051, mkPair -> 0.049, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[176842.683s]Generation 342
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 86 ; iter: 97; seedExpr: 86 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(86,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.94422310756972
Average Fitness: 2.977395312397389E9
Fitness Variation: 4.1768558089392996E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.073, inc -> 0.065, 98 -> 0.064, #1 -> 0.063, pair1 -> 0.060, #3 -> 0.051, mkPair -> 0.050, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[177311.203s]Generation 343
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.94422310756972
Average Fitness: 3.0574803217500477E9
Fitness Variation: 4.233265076653849E9
Distribution: times -> 0.117, 94 -> 0.091, (118,81) -> 0.073, inc -> 0.065, 98 -> 0.064, pair1 -> 0.062, #1 -> 0.059, #3 -> 0.052, mkPair -> 0.049, (100,204) -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 25 generations ago.
------------
[178028.740s]Generation 344
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (150,12) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (150,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(150,12),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.81673306772908
Average Fitness: 3.672613224292366E9
Fitness Variation: 4.396950435724074E9
Distribution: times -> 0.119, 94 -> 0.093, (118,81) -> 0.077, inc -> 0.064, 98 -> 0.063, pair1 -> 0.063, #1 -> 0.060, #3 -> 0.053, mkPair -> 0.050, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 26 generations ago.
------------
[178682.239s]Generation 345
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (165,158) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (165,158) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(165,158),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.8605577689243
Average Fitness: 3.2157006014360905E9
Fitness Variation: 4.1719205080653543E9
Distribution: times -> 0.120, 94 -> 0.093, (118,81) -> 0.075, inc -> 0.064, 98 -> 0.063, pair1 -> 0.062, #1 -> 0.061, #3 -> 0.054, mkPair -> 0.050, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 27 generations ago.
------------
[179185.039s]Generation 346
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.820717131474105
Average Fitness: 3.2490042296428986E9
Fitness Variation: 4.284986440910853E9
Distribution: times -> 0.119, 94 -> 0.094, (118,81) -> 0.078, 98 -> 0.065, inc -> 0.064, pair1 -> 0.062, #1 -> 0.059, #3 -> 0.055, mkPair -> 0.049, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 28 generations ago.
------------
[179982.960s]Generation 347
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 76 ; iter: 97; seedExpr: 76 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(76,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.01593625498008
Average Fitness: 3.247671103077053E9
Fitness Variation: 4.2372118777831597E9
Distribution: times -> 0.117, 94 -> 0.090, (118,81) -> 0.079, pair1 -> 0.064, 98 -> 0.063, inc -> 0.063, #1 -> 0.059, #3 -> 0.055, mkPair -> 0.051, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 29 generations ago.
------------
[180529.438s]Generation 348
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: #0; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.322709163346616
Average Fitness: 3.191987768616208E9
Fitness Variation: 4.249307874997507E9
Distribution: times -> 0.119, 94 -> 0.092, (118,81) -> 0.080, 98 -> 0.064, pair1 -> 0.064, inc -> 0.064, #1 -> 0.059, #3 -> 0.055, mkPair -> 0.051, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 30 generations ago.
------------
[181207.191s]Generation 349
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.80478087649402
Average Fitness: 3.5888459200034847E9
Fitness Variation: 4.34592989183667E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.083, 98 -> 0.065, pair1 -> 0.065, inc -> 0.065, #1 -> 0.057, #3 -> 0.056, mkPair -> 0.051, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 31 generations ago.
------------
[181920.523s]Generation 350
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 135 ; iter: 97; seedExpr: 135 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(135,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.55776892430279
Average Fitness: 3.4349774339643636E9
Fitness Variation: 4.362654672352693E9
Distribution: times -> 0.118, 94 -> 0.092, (118,81) -> 0.083, pair1 -> 0.066, inc -> 0.065, 98 -> 0.065, #1 -> 0.057, #3 -> 0.056, mkPair -> 0.051, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 32 generations ago.
------------
[182611.292s]Generation 351
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 29 ; iter: 97; seedExpr: 29 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (150,12) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (150,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(150,12),(100,204),(148,52),(152,42),(142,141),(29,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.65338645418327
Average Fitness: 3.5178216499529014E9
Fitness Variation: 4.302113879305578E9
Distribution: times -> 0.121, 94 -> 0.094, (118,81) -> 0.079, 98 -> 0.065, inc -> 0.064, pair1 -> 0.062, #1 -> 0.060, #3 -> 0.055, mkPair -> 0.050, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 33 generations ago.
------------
[183268.504s]Generation 352
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: #0; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (10,79) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (10,79) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(10,79),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.69721115537848
Average Fitness: 3.5265535025838857E9
Fitness Variation: 4.211872358302679E9
Distribution: times -> 0.115, 94 -> 0.091, (118,81) -> 0.080, pair1 -> 0.064, 98 -> 0.064, inc -> 0.063, #1 -> 0.057, #3 -> 0.057, mkPair -> 0.051, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 34 generations ago.
------------
[183751.548s]Generation 353
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.14342629482072
Average Fitness: 3.1530362286230397E9
Fitness Variation: 4.218593476105385E9
Distribution: times -> 0.116, 94 -> 0.092, (118,81) -> 0.078, 98 -> 0.066, inc -> 0.065, pair1 -> 0.062, #3 -> 0.056, #1 -> 0.055, mkPair -> 0.051, #0 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 35 generations ago.
------------
[184421.363s]Generation 354
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.65338645418327
Average Fitness: 3.5586465332250195E9
Fitness Variation: 4.2903296845625973E9
Distribution: times -> 0.116, 94 -> 0.091, (118,81) -> 0.082, 98 -> 0.066, inc -> 0.065, pair1 -> 0.065, #1 -> 0.058, #3 -> 0.057, mkPair -> 0.050, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 36 generations ago.
------------
[185043.415s]Generation 355
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.310756972111555
Average Fitness: 3.2355303519106045E9
Fitness Variation: 4.2535016959607806E9
Distribution: times -> 0.123, 94 -> 0.097, (118,81) -> 0.081, 98 -> 0.067, inc -> 0.065, pair1 -> 0.063, #1 -> 0.062, #3 -> 0.055, mkPair -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 37 generations ago.
------------
[185543.826s]Generation 356
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.36254980079681
Average Fitness: 3.4349626034497123E9
Fitness Variation: 4.343356132454777E9
Distribution: times -> 0.121, 94 -> 0.096, (118,81) -> 0.081, 98 -> 0.068, inc -> 0.066, pair1 -> 0.063, #1 -> 0.061, #3 -> 0.057, mkPair -> 0.051, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 38 generations ago.
------------
[186187.368s]Generation 357
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.179282868525895
Average Fitness: 3.8137634343082485E9
Fitness Variation: 4.533130302325024E9
Distribution: times -> 0.120, 94 -> 0.095, (118,81) -> 0.082, 98 -> 0.065, inc -> 0.064, pair1 -> 0.064, #1 -> 0.059, #3 -> 0.057, mkPair -> 0.051, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 39 generations ago.
------------
[186774.266s]Generation 358
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: #0; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.40637450199203
Average Fitness: 3.291746921468531E9
Fitness Variation: 4.314624945150287E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.081, 98 -> 0.065, inc -> 0.065, pair1 -> 0.063, #1 -> 0.059, #3 -> 0.057, mkPair -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 40 generations ago.
------------
[187305.889s]Generation 359
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.99601593625498
Average Fitness: 3.290715932212806E9
Fitness Variation: 4.2057371986708946E9
Distribution: times -> 0.122, 94 -> 0.096, (118,81) -> 0.080, 98 -> 0.068, inc -> 0.065, pair1 -> 0.062, #1 -> 0.060, #3 -> 0.057, mkPair -> 0.049, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 41 generations ago.
------------
[187945.364s]Generation 360
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.82470119521912
Average Fitness: 3.2721690281454444E9
Fitness Variation: 4.2661468623436785E9
Distribution: times -> 0.118, 94 -> 0.094, (118,81) -> 0.080, 98 -> 0.064, pair1 -> 0.064, inc -> 0.063, #1 -> 0.057, #3 -> 0.056, mkPair -> 0.049, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 42 generations ago.
------------
[188447.515s]Generation 361
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: 97; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.56573705179283
Average Fitness: 2.740284184948698E9
Fitness Variation: 3.93872250946832E9
Distribution: times -> 0.120, 94 -> 0.095, (118,81) -> 0.083, 98 -> 0.065, pair1 -> 0.065, inc -> 0.064, #1 -> 0.059, #3 -> 0.057, mkPair -> 0.050, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 43 generations ago.
------------
[189109.593s]Generation 362
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.32669322709163
Average Fitness: 2.8047055806376266E9
Fitness Variation: 3.9386726811064544E9
Distribution: times -> 0.118, 94 -> 0.093, (118,81) -> 0.079, 98 -> 0.066, inc -> 0.065, pair1 -> 0.062, #1 -> 0.060, #3 -> 0.055, mkPair -> 0.049, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 44 generations ago.
------------
[189714.767s]Generation 363
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.123505976095615
Average Fitness: 3.1471739880971684E9
Fitness Variation: 4.127145706557106E9
Distribution: times -> 0.119, 94 -> 0.094, (118,81) -> 0.076, 98 -> 0.067, inc -> 0.064, #1 -> 0.061, pair1 -> 0.061, #3 -> 0.056, mkPair -> 0.050, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 45 generations ago.
------------
[190287.000s]Generation 364
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.11155378486056
Average Fitness: 3.4066027019494963E9
Fitness Variation: 4.2755448426214323E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.077, 98 -> 0.066, inc -> 0.064, pair1 -> 0.061, #1 -> 0.059, #3 -> 0.056, mkPair -> 0.050, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 46 generations ago.
------------
[190893.083s]Generation 365
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.62948207171315
Average Fitness: 3.3462251698661914E9
Fitness Variation: 4.346920080515899E9
Distribution: times -> 0.117, 94 -> 0.094, (118,81) -> 0.082, 98 -> 0.064, pair1 -> 0.063, inc -> 0.063, #1 -> 0.058, #3 -> 0.057, mkPair -> 0.051, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 47 generations ago.
------------
[191705.914s]Generation 366
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.1394422310757
Average Fitness: 3.7456612171046414E9
Fitness Variation: 4.378103067742298E9
Distribution: times -> 0.117, 94 -> 0.092, (118,81) -> 0.081, 98 -> 0.065, inc -> 0.063, pair1 -> 0.063, #1 -> 0.059, #3 -> 0.054, mkPair -> 0.051, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 48 generations ago.
------------
[192461.434s]Generation 367
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.72908366533864
Average Fitness: 3.9801684872986083E9
Fitness Variation: 4.519969428844761E9
Distribution: times -> 0.116, 94 -> 0.092, (118,81) -> 0.080, inc -> 0.064, 98 -> 0.064, pair1 -> 0.063, #1 -> 0.057, #3 -> 0.052, mkPair -> 0.049, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 49 generations ago.
------------
[192910.176s]Generation 368
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.32669322709163
Average Fitness: 3.3049742159011745E9
Fitness Variation: 4.384484194615623E9
Distribution: times -> 0.112, 94 -> 0.090, (118,81) -> 0.086, pair1 -> 0.067, inc -> 0.060, 98 -> 0.060, #1 -> 0.056, #3 -> 0.055, mkPair -> 0.051, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 50 generations ago.
------------
[193460.225s]Generation 369
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.93625498007968
Average Fitness: 3.0852193274328094E9
Fitness Variation: 4.213575703443609E9
Distribution: times -> 0.120, 94 -> 0.095, (118,81) -> 0.083, 98 -> 0.066, pair1 -> 0.065, inc -> 0.064, #1 -> 0.056, #3 -> 0.053, mkPair -> 0.052, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 51 generations ago.
------------
[194120.684s]Generation 370
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.49003984063745
Average Fitness: 3.254461382370891E9
Fitness Variation: 4.302737160260493E9
Distribution: times -> 0.117, 94 -> 0.094, (118,81) -> 0.086, pair1 -> 0.067, inc -> 0.064, 98 -> 0.062, #1 -> 0.057, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 52 generations ago.
------------
[194761.381s]Generation 371
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.701195219123505
Average Fitness: 3.529561096337956E9
Fitness Variation: 4.326792242387435E9
Distribution: times -> 0.126, 94 -> 0.100, (118,81) -> 0.080, 98 -> 0.066, inc -> 0.066, pair1 -> 0.062, #1 -> 0.059, #3 -> 0.053, mkPair -> 0.050, #0 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 53 generations ago.
------------
[195490.174s]Generation 372
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.05179282868526
Average Fitness: 3.4701392800929065E9
Fitness Variation: 4.324497414976262E9
Distribution: times -> 0.120, 94 -> 0.096, (118,81) -> 0.082, 98 -> 0.065, inc -> 0.063, pair1 -> 0.063, #1 -> 0.059, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 54 generations ago.
------------
[196094.837s]Generation 373
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 206 ; iter: 97; seedExpr: 206 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(206,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.45418326693227
Average Fitness: 3.2986093588636656E9
Fitness Variation: 4.296203984162108E9
Distribution: times -> 0.121, 94 -> 0.097, (118,81) -> 0.081, 98 -> 0.063, inc -> 0.063, pair1 -> 0.062, #1 -> 0.060, #3 -> 0.054, mkPair -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 55 generations ago.
------------
[196571.280s]Generation 374
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.03187250996016
Average Fitness: 2.672296944839062E9
Fitness Variation: 4.124306755617047E9
Distribution: times -> 0.120, 94 -> 0.096, (118,81) -> 0.082, inc -> 0.064, 98 -> 0.064, pair1 -> 0.063, #1 -> 0.058, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 56 generations ago.
------------
[197088.679s]Generation 375
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.76892430278885
Average Fitness: 2.7475123903681216E9
Fitness Variation: 4.0780831032714777E9
Distribution: times -> 0.118, 94 -> 0.093, (118,81) -> 0.084, pair1 -> 0.065, inc -> 0.063, 98 -> 0.063, #1 -> 0.059, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 57 generations ago.
------------
[197712.157s]Generation 376
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 40.00398406374502
Average Fitness: 3.339503915191145E9
Fitness Variation: 4.283325750533263E9
Distribution: times -> 0.117, 94 -> 0.093, (118,81) -> 0.084, pair1 -> 0.065, inc -> 0.065, 98 -> 0.062, #1 -> 0.058, #3 -> 0.053, mkPair -> 0.051, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 58 generations ago.
------------
[198259.964s]Generation 377
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 95 ; iter: 97; seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (29,66) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (29,66) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(29,66),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.70517928286853
Average Fitness: 3.4448717658382816E9
Fitness Variation: 4.348542068540676E9
Distribution: times -> 0.119, 94 -> 0.097, (118,81) -> 0.082, 98 -> 0.065, inc -> 0.064, pair1 -> 0.063, #1 -> 0.057, #3 -> 0.054, mkPair -> 0.051, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 59 generations ago.
------------
[198936.465s]Generation 378
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.02788844621514
Average Fitness: 3.4727823256348476E9
Fitness Variation: 4.353298948830145E9
Distribution: times -> 0.117, 94 -> 0.094, (118,81) -> 0.080, 98 -> 0.064, pair1 -> 0.063, inc -> 0.062, #1 -> 0.057, #3 -> 0.052, mkPair -> 0.050, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 60 generations ago.
------------
[199509.259s]Generation 379
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 18 ; iter: 97; seedExpr: 18 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(18,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.02788844621514
Average Fitness: 2.8425183116723614E9
Fitness Variation: 4.0916954034118676E9
Distribution: times -> 0.115, 94 -> 0.092, (118,81) -> 0.080, pair1 -> 0.063, 98 -> 0.062, inc -> 0.061, #1 -> 0.059, mkPair -> 0.051, #3 -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 61 generations ago.
------------
[200056.671s]Generation 380
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.677290836653384
Average Fitness: 3.1009811986124415E9
Fitness Variation: 4.207436391820777E9
Distribution: times -> 0.115, 94 -> 0.095, (118,81) -> 0.083, 98 -> 0.064, pair1 -> 0.064, inc -> 0.062, #1 -> 0.055, #3 -> 0.049, mkPair -> 0.049, #0 -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 62 generations ago.
------------
[200704.088s]Generation 381
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 97 ; iter: 97; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.97211155378486
Average Fitness: 3.290824166615055E9
Fitness Variation: 4.2407521340212927E9
Distribution: times -> 0.116, 94 -> 0.095, (118,81) -> 0.082, pair1 -> 0.064, inc -> 0.063, 98 -> 0.063, #1 -> 0.057, mkPair -> 0.050, #3 -> 0.050, #0 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 63 generations ago.
------------
[201394.477s]Generation 382
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.72908366533864
Average Fitness: 3.692445401465221E9
Fitness Variation: 4.396473463125451E9
Distribution: times -> 0.119, 94 -> 0.098, (118,81) -> 0.083, inc -> 0.065, 98 -> 0.065, pair1 -> 0.064, #1 -> 0.057, mkPair -> 0.051, #3 -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 64 generations ago.
------------
[201973.030s]Generation 383
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.60557768924303
Average Fitness: 3.431487836402116E9
Fitness Variation: 4.433172985197097E9
Distribution: times -> 0.119, 94 -> 0.095, (118,81) -> 0.087, pair1 -> 0.066, inc -> 0.063, 98 -> 0.062, #1 -> 0.058, #3 -> 0.051, mkPair -> 0.050, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 65 generations ago.
------------
[202464.835s]Generation 384
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.93625498007968
Average Fitness: 3.5184384880540657E9
Fitness Variation: 4.449942697744903E9
Distribution: times -> 0.121, 94 -> 0.099, (118,81) -> 0.084, inc -> 0.066, 98 -> 0.065, pair1 -> 0.064, #1 -> 0.061, mkPair -> 0.049, #3 -> 0.049, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 66 generations ago.
------------
[203072.322s]Generation 385
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.94820717131474
Average Fitness: 3.0481155428058066E9
Fitness Variation: 4.200000595363524E9
Distribution: times -> 0.120, 94 -> 0.098, (118,81) -> 0.084, inc -> 0.064, pair1 -> 0.064, 98 -> 0.063, #1 -> 0.059, mkPair -> 0.050, #3 -> 0.050, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 67 generations ago.
------------
[203638.809s]Generation 386
Best Result: (fitness: 9810142608.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, pair1((118,81)))))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (172,194) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (172,194) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(172,194),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.06772908366534
Average Fitness: 3.3138181570192637E9
Fitness Variation: 4.183800978729575E9
Distribution: times -> 0.117, 94 -> 0.097, (118,81) -> 0.081, inc -> 0.063, 98 -> 0.063, pair1 -> 0.063, #1 -> 0.056, mkPair -> 0.051, #3 -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[204287.183s]Generation 387
Best Result: (fitness: 9853977334.5, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.04382470119522
Average Fitness: 2.7956236333105526E9
Fitness Variation: 3.9994424588237343E9
Distribution: times -> 0.121, 94 -> 0.099, (118,81) -> 0.080, inc -> 0.065, 98 -> 0.063, pair1 -> 0.062, #1 -> 0.058, mkPair -> 0.051, #3 -> 0.050, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[204872.815s]Generation 388
Best Result: (fitness: 9853977334.5, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.54183266932271
Average Fitness: 3.5081338337681036E9
Fitness Variation: 4.337978228689957E9
Distribution: times -> 0.119, 94 -> 0.096, (118,81) -> 0.080, inc -> 0.064, pair1 -> 0.063, 98 -> 0.062, #1 -> 0.058, mkPair -> 0.051, #3 -> 0.051, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[205493.914s]Generation 389
Best Result: (fitness: 9853977334.5, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(pair1((118,81)), 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.254980079681275
Average Fitness: 3.2227784104501195E9
Fitness Variation: 4.297811781809798E9
Distribution: times -> 0.118, 94 -> 0.097, (118,81) -> 0.079, inc -> 0.065, 98 -> 0.063, pair1 -> 0.059, #1 -> 0.059, #3 -> 0.053, mkPair -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[206064.746s]Generation 390
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.68525896414343
Average Fitness: 3.4631044401692424E9
Fitness Variation: 4.488472314266527E9
Distribution: times -> 0.117, 94 -> 0.095, (118,81) -> 0.076, inc -> 0.064, 98 -> 0.062, #1 -> 0.058, pair1 -> 0.058, #3 -> 0.052, mkPair -> 0.052, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[206763.084s]Generation 391
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.07171314741036
Average Fitness: 3.77770654439753E9
Fitness Variation: 4.484315983546941E9
Distribution: times -> 0.120, 94 -> 0.096, (118,81) -> 0.073, inc -> 0.065, 98 -> 0.063, #1 -> 0.059, pair1 -> 0.054, mkPair -> 0.051, #3 -> 0.051, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[207281.297s]Generation 392
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.69322709163347
Average Fitness: 2.777808011306406E9
Fitness Variation: 4.0489826453951597E9
Distribution: times -> 0.121, 94 -> 0.094, inc -> 0.067, 98 -> 0.064, (118,81) -> 0.060, #1 -> 0.059, #3 -> 0.051, mkPair -> 0.051, pair1 -> 0.044, prepend -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[207919.562s]Generation 393
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.56573705179283
Average Fitness: 3.025929526628694E9
Fitness Variation: 4.2288871625526056E9
Distribution: times -> 0.120, 94 -> 0.095, inc -> 0.066, 98 -> 0.063, #1 -> 0.059, (118,81) -> 0.058, mkPair -> 0.050, #3 -> 0.049, pair1 -> 0.044, 194 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[208405.359s]Generation 394
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 39.16334661354582
Average Fitness: 3.615844632592709E9
Fitness Variation: 4.356426546482029E9
Distribution: times -> 0.125, 94 -> 0.100, inc -> 0.066, 98 -> 0.064, #1 -> 0.062, mkPair -> 0.051, (118,81) -> 0.050, #3 -> 0.049, pair1 -> 0.036, prepend -> 0.033
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[209207.177s]Generation 395
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.86852589641434
Average Fitness: 3.5564638073992333E9
Fitness Variation: 4.412267153103561E9
Distribution: times -> 0.119, 94 -> 0.097, inc -> 0.065, 98 -> 0.063, #1 -> 0.058, mkPair -> 0.052, #3 -> 0.051, (118,81) -> 0.046, #0 -> 0.036, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[209825.790s]Generation 396
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.52988047808765
Average Fitness: 3.1718351408879447E9
Fitness Variation: 4.277436019515376E9
Distribution: times -> 0.123, 94 -> 0.099, inc -> 0.065, 98 -> 0.063, #1 -> 0.061, mkPair -> 0.052, #3 -> 0.051, #0 -> 0.039, (118,81) -> 0.038, 118 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[210395.356s]Generation 397
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.286852589641434
Average Fitness: 3.5993587261178694E9
Fitness Variation: 4.453229177852687E9
Distribution: times -> 0.120, 94 -> 0.096, inc -> 0.066, 98 -> 0.063, #1 -> 0.059, #3 -> 0.052, mkPair -> 0.052, 118 -> 0.040, #0 -> 0.039, (118,81) -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[211005.321s]Generation 398
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.57370517928287
Average Fitness: 3.1725751423525248E9
Fitness Variation: 4.34888921946837E9
Distribution: times -> 0.123, 94 -> 0.098, inc -> 0.068, 98 -> 0.065, #1 -> 0.059, #3 -> 0.054, mkPair -> 0.052, 118 -> 0.048, #0 -> 0.039, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[211673.051s]Generation 399
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.29083665338646
Average Fitness: 3.589897785706037E9
Fitness Variation: 4.51529453908213E9
Distribution: times -> 0.126, 94 -> 0.103, inc -> 0.069, 98 -> 0.066, #1 -> 0.061, #3 -> 0.054, mkPair -> 0.052, 118 -> 0.052, prepend -> 0.037, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[212324.190s]Generation 400
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 95 ; iter: 97; seedExpr: 95 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(123,53),(46,204)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(123,53),(46,204)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(95,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.87250996015936
Average Fitness: 3.314450420823597E9
Fitness Variation: 4.416977307858707E9
Distribution: times -> 0.126, 94 -> 0.104, inc -> 0.069, 98 -> 0.066, #1 -> 0.062, 118 -> 0.061, #3 -> 0.055, mkPair -> 0.054, #0 -> 0.038, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[213082.989s]Generation 401
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.01593625498008
Average Fitness: 3.2074627358580203E9
Fitness Variation: 4.310385329708757E9
Distribution: times -> 0.125, 94 -> 0.104, inc -> 0.069, 118 -> 0.066, 98 -> 0.064, #1 -> 0.063, #3 -> 0.055, mkPair -> 0.054, #0 -> 0.036, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[213733.060s]Generation 402
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (60,12) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (60,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(60,12),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.53386454183267
Average Fitness: 2.9009155420447407E9
Fitness Variation: 4.194612681869367E9
Distribution: times -> 0.129, 94 -> 0.107, inc -> 0.069, 98 -> 0.067, 118 -> 0.066, #1 -> 0.065, #3 -> 0.059, mkPair -> 0.054, #0 -> 0.038, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[214364.382s]Generation 403
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(79,60)] ; iter: []; seedExpr: [(79,60)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.72908366533864
Average Fitness: 2.94661206165231E9
Fitness Variation: 4.1602439060709567E9
Distribution: times -> 0.131, 94 -> 0.107, inc -> 0.069, 98 -> 0.068, #1 -> 0.066, 118 -> 0.064, #3 -> 0.055, mkPair -> 0.054, prepend -> 0.035, 194 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[214964.209s]Generation 404
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.0
Average Fitness: 3.0458219798426485E9
Fitness Variation: 4.234945907992482E9
Distribution: times -> 0.131, 94 -> 0.108, inc -> 0.070, 98 -> 0.068, #1 -> 0.065, 118 -> 0.065, mkPair -> 0.055, #3 -> 0.054, #0 -> 0.037, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[215640.590s]Generation 405
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 0 ; iter: 97; seedExpr: 0 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(0,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.43426294820717
Average Fitness: 3.504596668220554E9
Fitness Variation: 4.45823285864422E9
Distribution: times -> 0.130, 94 -> 0.106, inc -> 0.071, 98 -> 0.068, 118 -> 0.067, #1 -> 0.062, #3 -> 0.054, mkPair -> 0.054, #0 -> 0.040, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[216119.387s]Generation 406
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.191235059760956
Average Fitness: 3.31402935489998E9
Fitness Variation: 4.35588336041678E9
Distribution: times -> 0.128, 94 -> 0.104, inc -> 0.071, 118 -> 0.069, 98 -> 0.068, #1 -> 0.063, mkPair -> 0.054, #3 -> 0.053, #0 -> 0.037, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[216758.938s]Generation 407
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (148,192) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (148,192) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(148,192),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.764940239043824
Average Fitness: 3.409683435800548E9
Fitness Variation: 4.424977187339546E9
Distribution: times -> 0.134, 94 -> 0.109, inc -> 0.069, #1 -> 0.068, 98 -> 0.067, 118 -> 0.066, mkPair -> 0.053, #3 -> 0.052, prepend -> 0.035, #0 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[217374.500s]Generation 408
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (78,142) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (78,142) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(78,142),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.97211155378486
Average Fitness: 3.3165683377168627E9
Fitness Variation: 4.377906596738781E9
Distribution: times -> 0.131, 94 -> 0.107, inc -> 0.070, 98 -> 0.068, 118 -> 0.067, #1 -> 0.064, #3 -> 0.054, mkPair -> 0.053, #0 -> 0.037, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[217763.192s]Generation 409
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.852589641434264
Average Fitness: 3.2452992645851936E9
Fitness Variation: 4.408297363671059E9
Distribution: times -> 0.123, 94 -> 0.101, 118 -> 0.072, inc -> 0.069, 98 -> 0.066, #1 -> 0.060, #3 -> 0.056, mkPair -> 0.055, prepend -> 0.039, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[218233.363s]Generation 410
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.79681274900398
Average Fitness: 3.448286549263798E9
Fitness Variation: 4.461468626555428E9
Distribution: times -> 0.129, 94 -> 0.106, 118 -> 0.071, inc -> 0.068, 98 -> 0.065, #1 -> 0.063, #3 -> 0.054, mkPair -> 0.053, #0 -> 0.039, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[218854.059s]Generation 411
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.33466135458168
Average Fitness: 3.2018726346737633E9
Fitness Variation: 4.404230172878686E9
Distribution: times -> 0.129, 94 -> 0.107, inc -> 0.072, 118 -> 0.071, 98 -> 0.068, #1 -> 0.062, mkPair -> 0.055, #3 -> 0.054, #0 -> 0.038, 194 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[219294.547s]Generation 412
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.42231075697211
Average Fitness: 2.9948928275795236E9
Fitness Variation: 4.235857207817754E9
Distribution: times -> 0.125, 94 -> 0.103, 118 -> 0.073, inc -> 0.071, 98 -> 0.066, #1 -> 0.063, #3 -> 0.055, mkPair -> 0.055, #0 -> 0.038, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[219745.605s]Generation 413
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.39442231075697
Average Fitness: 2.888191371154653E9
Fitness Variation: 4.1220589905891514E9
Distribution: times -> 0.130, 94 -> 0.107, inc -> 0.069, 98 -> 0.069, 118 -> 0.064, #1 -> 0.063, mkPair -> 0.053, #3 -> 0.052, prepend -> 0.037, (100,204) -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[220498.275s]Generation 414
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (60,12) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (60,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(60,12),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.569721115537845
Average Fitness: 3.3205557961164346E9
Fitness Variation: 4.318885502226228E9
Distribution: times -> 0.130, 94 -> 0.105, inc -> 0.068, 98 -> 0.067, 118 -> 0.064, #1 -> 0.063, mkPair -> 0.052, #3 -> 0.052, #0 -> 0.036, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 25 generations ago.
------------
[221107.497s]Generation 415
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(123,53),(46,204)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(123,53),(46,204)] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.54581673306773
Average Fitness: 3.519824308880989E9
Fitness Variation: 4.372435615813558E9
Distribution: times -> 0.128, 94 -> 0.102, 98 -> 0.068, inc -> 0.068, 118 -> 0.064, #1 -> 0.061, mkPair -> 0.053, #3 -> 0.052, prepend -> 0.037, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 26 generations ago.
------------
[221866.424s]Generation 416
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (60,12) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (60,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(60,12),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.70517928286853
Average Fitness: 3.397021929326865E9
Fitness Variation: 4.479057962226523E9
Distribution: times -> 0.127, 94 -> 0.104, inc -> 0.070, 118 -> 0.068, 98 -> 0.067, #1 -> 0.060, #3 -> 0.054, mkPair -> 0.053, prepend -> 0.037, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 27 generations ago.
------------
[222273.312s]Generation 417
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (60,12) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (60,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(60,12),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.56573705179283
Average Fitness: 3.2658952442650466E9
Fitness Variation: 4.4092826764888315E9
Distribution: times -> 0.131, 94 -> 0.108, 118 -> 0.071, inc -> 0.071, 98 -> 0.068, #1 -> 0.061, #3 -> 0.056, mkPair -> 0.054, #0 -> 0.038, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 28 generations ago.
------------
[222939.426s]Generation 418
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (65,41) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (65,41) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(65,41),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.88844621513944
Average Fitness: 3.4466694883411827E9
Fitness Variation: 4.465561784109597E9
Distribution: times -> 0.131, 94 -> 0.107, inc -> 0.070, 98 -> 0.069, 118 -> 0.066, #1 -> 0.064, #3 -> 0.056, mkPair -> 0.054, #0 -> 0.038, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 29 generations ago.
------------
[223537.699s]Generation 419
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.354581673306775
Average Fitness: 3.001168909125716E9
Fitness Variation: 4.2191659092792344E9
Distribution: times -> 0.129, 94 -> 0.105, inc -> 0.069, 118 -> 0.069, 98 -> 0.068, #1 -> 0.065, #3 -> 0.057, mkPair -> 0.054, #0 -> 0.037, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 30 generations ago.
------------
[224237.646s]Generation 420
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.0398406374502
Average Fitness: 3.295776419733559E9
Fitness Variation: 4.2869244525206404E9
Distribution: times -> 0.132, 94 -> 0.110, inc -> 0.070, 98 -> 0.067, 118 -> 0.065, #1 -> 0.064, #3 -> 0.055, mkPair -> 0.053, #0 -> 0.037, prepend -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 31 generations ago.
------------
[225035.343s]Generation 421
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.386454183266935
Average Fitness: 3.7698249453317347E9
Fitness Variation: 4.466441190564534E9
Distribution: times -> 0.131, 94 -> 0.108, inc -> 0.070, 118 -> 0.068, 98 -> 0.068, #1 -> 0.063, #3 -> 0.054, mkPair -> 0.054, prepend -> 0.037, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 32 generations ago.
------------
[225642.344s]Generation 422
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (118,81) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (118,81) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(118,81),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.82868525896414
Average Fitness: 3.323087375665321E9
Fitness Variation: 4.348443984196551E9
Distribution: times -> 0.132, 94 -> 0.107, inc -> 0.069, 118 -> 0.069, 98 -> 0.067, #1 -> 0.064, mkPair -> 0.054, #3 -> 0.054, #0 -> 0.037, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 33 generations ago.
------------
[226134.760s]Generation 423
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.65338645418327
Average Fitness: 2.7803822516130695E9
Fitness Variation: 4.128078294066258E9
Distribution: times -> 0.132, 94 -> 0.104, inc -> 0.071, 98 -> 0.070, 118 -> 0.067, #1 -> 0.064, mkPair -> 0.054, #3 -> 0.053, prepend -> 0.036, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 34 generations ago.
------------
[226617.208s]Generation 424
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (60,12) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (60,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(60,12),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.97609561752988
Average Fitness: 3.086076952945799E9
Fitness Variation: 4.299977479691763E9
Distribution: times -> 0.122, 94 -> 0.098, 118 -> 0.067, inc -> 0.066, 98 -> 0.063, #1 -> 0.062, #3 -> 0.055, mkPair -> 0.054, #0 -> 0.040, prepend -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 35 generations ago.
------------
[227327.208s]Generation 425
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (60,12) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (60,12) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(60,12),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.72908366533864
Average Fitness: 2.9701334553133993E9
Fitness Variation: 4.2716805763199425E9
Distribution: times -> 0.126, 94 -> 0.099, 118 -> 0.069, inc -> 0.069, 98 -> 0.066, #1 -> 0.062, #3 -> 0.055, mkPair -> 0.054, #0 -> 0.040, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 36 generations ago.
------------
[228073.490s]Generation 426
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.03187250996016
Average Fitness: 3.4577907235688286E9
Fitness Variation: 4.504237193579929E9
Distribution: times -> 0.129, 94 -> 0.103, inc -> 0.068, 98 -> 0.067, 118 -> 0.067, #1 -> 0.064, mkPair -> 0.055, #3 -> 0.055, #0 -> 0.039, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 37 generations ago.
------------
[228511.115s]Generation 427
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 167 ; iter: 97; seedExpr: 167 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(167,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.788844621513945
Average Fitness: 3.5176281578203416E9
Fitness Variation: 4.488182121515804E9
Distribution: times -> 0.128, 94 -> 0.100, inc -> 0.069, 118 -> 0.068, 98 -> 0.066, #1 -> 0.064, mkPair -> 0.054, #3 -> 0.053, #0 -> 0.039, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 38 generations ago.
------------
[228995.481s]Generation 428
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.93227091633466
Average Fitness: 3.19844843759829E9
Fitness Variation: 4.321518024571325E9
Distribution: times -> 0.127, 94 -> 0.100, inc -> 0.070, 118 -> 0.069, 98 -> 0.068, #1 -> 0.063, #3 -> 0.055, mkPair -> 0.055, prepend -> 0.038, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 39 generations ago.
------------
[229338.615s]Generation 429
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.71713147410359
Average Fitness: 3.5210222924360704E9
Fitness Variation: 4.523013924485441E9
Distribution: times -> 0.131, 94 -> 0.103, inc -> 0.071, 118 -> 0.070, 98 -> 0.070, #1 -> 0.061, #3 -> 0.055, mkPair -> 0.054, 194 -> 0.038, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 40 generations ago.
------------
[229967.801s]Generation 430
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.53386454183267
Average Fitness: 3.090358992436703E9
Fitness Variation: 4.2842214221061215E9
Distribution: times -> 0.132, 94 -> 0.104, inc -> 0.069, 118 -> 0.069, 98 -> 0.066, #1 -> 0.064, mkPair -> 0.055, #3 -> 0.054, prepend -> 0.037, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 41 generations ago.
------------
[230579.588s]Generation 431
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.04780876494024
Average Fitness: 3.2210091498342304E9
Fitness Variation: 4.403989214618611E9
Distribution: times -> 0.132, 94 -> 0.103, inc -> 0.069, 118 -> 0.067, 98 -> 0.066, #1 -> 0.063, mkPair -> 0.054, #3 -> 0.053, prepend -> 0.037, #0 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 42 generations ago.
------------
[231055.838s]Generation 432
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 114 ; iter: 97; seedExpr: 114 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (29,51) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (29,51) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(29,51),(100,204),(148,52),(152,42),(142,141),(114,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.0
Average Fitness: 3.5912907691950583E9
Fitness Variation: 4.503193301855996E9
Distribution: times -> 0.126, 94 -> 0.101, 118 -> 0.068, inc -> 0.068, 98 -> 0.065, #1 -> 0.062, #3 -> 0.054, mkPair -> 0.054, prepend -> 0.037, 194 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 43 generations ago.
------------
[231672.522s]Generation 433
Best Result: (fitness: 9871544086.1, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), inc(98)))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.97211155378486
Average Fitness: 3.642428589304969E9
Fitness Variation: 4.543449269137144E9
Distribution: times -> 0.128, 94 -> 0.102, inc -> 0.070, 118 -> 0.068, 98 -> 0.067, #1 -> 0.064, mkPair -> 0.054, #3 -> 0.053, prepend -> 0.036, 194 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[232122.870s]Generation 434
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.23107569721115
Average Fitness: 3.3499497529723516E9
Fitness Variation: 4.448898941663272E9
Distribution: times -> 0.133, 94 -> 0.105, 118 -> 0.070, inc -> 0.070, 98 -> 0.067, #1 -> 0.063, mkPair -> 0.054, #3 -> 0.054, #0 -> 0.036, 194 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[232573.447s]Generation 435
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.39043824701195
Average Fitness: 2.9747308519014645E9
Fitness Variation: 4.2525811485580535E9
Distribution: times -> 0.130, 94 -> 0.101, 118 -> 0.069, inc -> 0.067, #1 -> 0.065, 98 -> 0.065, #3 -> 0.053, mkPair -> 0.053, prepend -> 0.036, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[233149.276s]Generation 436
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.20717131474104
Average Fitness: 3.0125184212757063E9
Fitness Variation: 4.235528896850433E9
Distribution: times -> 0.124, 94 -> 0.098, 118 -> 0.070, inc -> 0.067, 98 -> 0.063, #1 -> 0.061, mkPair -> 0.055, #3 -> 0.054, 194 -> 0.037, prepend -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[233769.200s]Generation 437
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.135458167330675
Average Fitness: 2.9958040827200465E9
Fitness Variation: 4.158377692558143E9
Distribution: times -> 0.135, 94 -> 0.107, inc -> 0.066, #1 -> 0.066, 118 -> 0.066, 98 -> 0.065, mkPair -> 0.054, #3 -> 0.052, prepend -> 0.036, (100,204) -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[234477.175s]Generation 438
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.52589641434263
Average Fitness: 2.8876304171151943E9
Fitness Variation: 4.1580315415955935E9
Distribution: times -> 0.133, 94 -> 0.106, #1 -> 0.066, 118 -> 0.064, inc -> 0.064, 98 -> 0.062, mkPair -> 0.053, #3 -> 0.052, prepend -> 0.037, 194 -> 0.034
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[235199.896s]Generation 439
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -117 ; iter: 97; seedExpr: -117 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(-117,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.18326693227092
Average Fitness: 3.304691339030845E9
Fitness Variation: 4.394153515515686E9
Distribution: times -> 0.132, 94 -> 0.103, 118 -> 0.065, #1 -> 0.065, inc -> 0.064, 98 -> 0.061, mkPair -> 0.053, #3 -> 0.052, prepend -> 0.037, 194 -> 0.035
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[235789.726s]Generation 440
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.48605577689243
Average Fitness: 2.8514827254041047E9
Fitness Variation: 4.117601199685114E9
Distribution: times -> 0.130, 94 -> 0.103, 118 -> 0.068, #1 -> 0.065, inc -> 0.059, mkPair -> 0.054, #3 -> 0.054, 98 -> 0.052, 194 -> 0.037, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[236564.745s]Generation 441
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 8 ; iter: 97; seedExpr: 8 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(8,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.12749003984064
Average Fitness: 3.12919529273269E9
Fitness Variation: 4.239632468992465E9
Distribution: times -> 0.131, 94 -> 0.102, 118 -> 0.068, #1 -> 0.063, inc -> 0.058, 98 -> 0.055, #3 -> 0.055, mkPair -> 0.054, prepend -> 0.037, 194 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[237344.234s]Generation 442
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 38.147410358565736
Average Fitness: 3.8094649977529974E9
Fitness Variation: 4.571724453141447E9
Distribution: times -> 0.129, 94 -> 0.101, 118 -> 0.070, #1 -> 0.063, #3 -> 0.056, mkPair -> 0.055, inc -> 0.052, 98 -> 0.045, 194 -> 0.038, prepend -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[238000.709s]Generation 443
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.39442231075697
Average Fitness: 3.921408997867294E9
Fitness Variation: 4.64045470049745E9
Distribution: times -> 0.128, 94 -> 0.100, 118 -> 0.080, #3 -> 0.060, #1 -> 0.058, mkPair -> 0.056, inc -> 0.043, 194 -> 0.042, prepend -> 0.038, (100,204) -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[238961.624s]Generation 444
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -117 ; iter: 97; seedExpr: -117 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(-117,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 37.49003984063745
Average Fitness: 3.8152145752397594E9
Fitness Variation: 4.570534117891777E9
Distribution: times -> 0.132, 94 -> 0.102, 118 -> 0.075, #1 -> 0.063, #3 -> 0.059, mkPair -> 0.056, 99 -> 0.045, 194 -> 0.041, prepend -> 0.038, (100,204) -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[239749.339s]Generation 445
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 183 ; iter: 97; seedExpr: 183 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(183,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.50199203187251
Average Fitness: 3.793853867718905E9
Fitness Variation: 4.561273192596549E9
Distribution: times -> 0.134, 94 -> 0.105, 118 -> 0.074, #1 -> 0.065, #3 -> 0.060, mkPair -> 0.058, 99 -> 0.051, #0 -> 0.039, prepend -> 0.038, (100,204) -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[240492.794s]Generation 446
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (160,70) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (160,70) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(160,70),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.17131474103586
Average Fitness: 3.685175216995858E9
Fitness Variation: 4.483966163977807E9
Distribution: times -> 0.141, 94 -> 0.112, 118 -> 0.070, #1 -> 0.068, #3 -> 0.057, mkPair -> 0.057, 99 -> 0.054, prepend -> 0.038, #0 -> 0.037, (100,204) -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[241202.393s]Generation 447
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -117 ; iter: 97; seedExpr: -117 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(-117,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.70517928286853
Average Fitness: 3.4623315443303013E9
Fitness Variation: 4.438275348897006E9
Distribution: times -> 0.141, 94 -> 0.112, 118 -> 0.073, #1 -> 0.068, #3 -> 0.060, mkPair -> 0.057, 99 -> 0.054, #0 -> 0.040, prepend -> 0.039, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[241909.117s]Generation 448
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 97 ; iter: 97; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.0796812749004
Average Fitness: 3.25436961293666E9
Fitness Variation: 4.393925794685816E9
Distribution: times -> 0.139, 94 -> 0.109, 118 -> 0.073, #1 -> 0.066, mkPair -> 0.058, #3 -> 0.057, 99 -> 0.055, #0 -> 0.041, (100,204) -> 0.038, prepend -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[242480.838s]Generation 449
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -75 ; iter: 97; seedExpr: -75 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(-75,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.45019920318725
Average Fitness: 3.5731197382801027E9
Fitness Variation: 4.4986773027125435E9
Distribution: times -> 0.146, 94 -> 0.114, #1 -> 0.072, 118 -> 0.069, 99 -> 0.058, mkPair -> 0.056, #3 -> 0.055, #0 -> 0.038, prepend -> 0.037, 194 -> 0.036
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[243092.588s]Generation 450
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -117 ; iter: 97; seedExpr: -117 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(-117,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.235059760956176
Average Fitness: 3.273941930127669E9
Fitness Variation: 4.440643053025269E9
Distribution: times -> 0.143, 94 -> 0.112, 118 -> 0.070, #1 -> 0.067, #3 -> 0.057, mkPair -> 0.057, 99 -> 0.054, #0 -> 0.039, prepend -> 0.037, 194 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[243753.321s]Generation 451
Best Result: (fitness: 9963941919.5, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 183 ; iter: 97; seedExpr: 183 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (185,199) ; iter: mkPair(95, inc(minus(118, 194))); seedExpr: (185,199) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(185,199),(100,204),(148,52),(152,42),(142,141),(183,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 36.10756972111554
Average Fitness: 3.8100087396281395E9
Fitness Variation: 4.553971337042751E9
Distribution: times -> 0.139, 94 -> 0.109, 118 -> 0.072, #1 -> 0.067, #3 -> 0.057, mkPair -> 0.056, 99 -> 0.055, prepend -> 0.038, 194 -> 0.038, (100,204) -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[244561.072s]Generation 452
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.8605577689243
Average Fitness: 3.3948929443159175E9
Fitness Variation: 4.4377047016368065E9
Distribution: times -> 0.141, 94 -> 0.109, 118 -> 0.073, #1 -> 0.070, #3 -> 0.058, mkPair -> 0.057, 99 -> 0.055, #0 -> 0.039, (100,204) -> 0.039, prepend -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[245204.483s]Generation 453
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.36254980079681
Average Fitness: 3.3693376576143603E9
Fitness Variation: 4.440843891139669E9
Distribution: times -> 0.136, 94 -> 0.108, 118 -> 0.077, #1 -> 0.066, #3 -> 0.060, mkPair -> 0.060, 99 -> 0.054, #0 -> 0.043, (100,204) -> 0.041, prepend -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[245922.443s]Generation 454
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.776892430278885
Average Fitness: 3.7480091433656397E9
Fitness Variation: 4.537361559935757E9
Distribution: times -> 0.140, 94 -> 0.106, 118 -> 0.074, #1 -> 0.070, #3 -> 0.059, mkPair -> 0.058, 99 -> 0.055, (100,204) -> 0.040, prepend -> 0.039, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[246374.958s]Generation 455
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 168 ; iter: 97; seedExpr: 168 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(168,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 35.08764940239044
Average Fitness: 3.4779026613995886E9
Fitness Variation: 4.536255571557321E9
Distribution: times -> 0.143, 94 -> 0.111, 118 -> 0.069, #1 -> 0.068, #3 -> 0.060, mkPair -> 0.060, 99 -> 0.056, #0 -> 0.042, (100,204) -> 0.041, prepend -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[246864.942s]Generation 456
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 34.147410358565736
Average Fitness: 3.0461869367309995E9
Fitness Variation: 4.402483587097206E9
Distribution: times -> 0.145, 94 -> 0.113, #1 -> 0.070, 118 -> 0.064, mkPair -> 0.060, #3 -> 0.060, 99 -> 0.057, #0 -> 0.041, (100,204) -> 0.040, prepend -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[247468.501s]Generation 457
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.89243027888446
Average Fitness: 3.150571512359054E9
Fitness Variation: 4.405222263198089E9
Distribution: times -> 0.144, 94 -> 0.112, #1 -> 0.071, mkPair -> 0.063, #3 -> 0.061, 118 -> 0.061, 99 -> 0.057, #0 -> 0.043, prepend -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[248069.162s]Generation 458
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 168 ; iter: 97; seedExpr: 168 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(168,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.96414342629482
Average Fitness: 3.889123076432405E9
Fitness Variation: 4.723155837861869E9
Distribution: times -> 0.149, 94 -> 0.116, #1 -> 0.072, mkPair -> 0.064, #3 -> 0.062, 99 -> 0.059, 118 -> 0.058, #0 -> 0.044, prepend -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[248447.851s]Generation 459
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 168 ; iter: 97; seedExpr: 168 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(168,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.94422310756972
Average Fitness: 3.1225457438551345E9
Fitness Variation: 4.466647787296215E9
Distribution: times -> 0.141, 94 -> 0.111, #1 -> 0.070, #3 -> 0.067, mkPair -> 0.065, 99 -> 0.055, 118 -> 0.053, #0 -> 0.047, prepend -> 0.044, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[249139.050s]Generation 460
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 34.0199203187251
Average Fitness: 3.293426118223362E9
Fitness Variation: 4.430611700586484E9
Distribution: times -> 0.154, 94 -> 0.120, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.062, 99 -> 0.060, 118 -> 0.045, #0 -> 0.043, prepend -> 0.043, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[249897.958s]Generation 461
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.38247011952191
Average Fitness: 3.462542950406371E9
Fitness Variation: 4.480731369040691E9
Distribution: times -> 0.152, 94 -> 0.117, #1 -> 0.074, #3 -> 0.065, mkPair -> 0.065, 99 -> 0.057, 118 -> 0.048, #0 -> 0.045, prepend -> 0.043, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[250390.697s]Generation 462
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.05179282868526
Average Fitness: 3.4470938411775603E9
Fitness Variation: 4.539788527892201E9
Distribution: times -> 0.154, 94 -> 0.121, #1 -> 0.074, #3 -> 0.064, mkPair -> 0.063, 99 -> 0.060, 118 -> 0.045, #0 -> 0.042, prepend -> 0.041, (100,204) -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[250982.573s]Generation 463
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.90438247011952
Average Fitness: 2.9278414084406066E9
Fitness Variation: 4.2823587285351424E9
Distribution: times -> 0.154, 94 -> 0.120, #1 -> 0.074, #3 -> 0.065, mkPair -> 0.063, 99 -> 0.061, 118 -> 0.043, prepend -> 0.043, #0 -> 0.043, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[251524.640s]Generation 464
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.18725099601593
Average Fitness: 3.00081955198205E9
Fitness Variation: 4.304734757161006E9
Distribution: times -> 0.151, 94 -> 0.116, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.065, 99 -> 0.060, 118 -> 0.047, prepend -> 0.044, #0 -> 0.043, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[252123.801s]Generation 465
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.0398406374502
Average Fitness: 3.3557022912737646E9
Fitness Variation: 4.449913864682941E9
Distribution: times -> 0.147, 94 -> 0.116, #1 -> 0.072, #3 -> 0.066, mkPair -> 0.064, 99 -> 0.057, 118 -> 0.046, #0 -> 0.043, prepend -> 0.043, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[252599.553s]Generation 466
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 154 ; iter: 97; seedExpr: 154 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(154,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.29083665338646
Average Fitness: 3.5629510580104756E9
Fitness Variation: 4.541228691235589E9
Distribution: times -> 0.150, 94 -> 0.118, #1 -> 0.072, #3 -> 0.067, mkPair -> 0.064, 99 -> 0.059, 118 -> 0.044, prepend -> 0.044, #0 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[253344.684s]Generation 467
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.65338645418327
Average Fitness: 3.8686978737110476E9
Fitness Variation: 4.620268853048856E9
Distribution: times -> 0.150, 94 -> 0.118, #1 -> 0.075, #3 -> 0.065, mkPair -> 0.065, 99 -> 0.058, 118 -> 0.045, prepend -> 0.045, #0 -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[254219.927s]Generation 468
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.9203187250996
Average Fitness: 3.4839753014311967E9
Fitness Variation: 4.534380938226339E9
Distribution: times -> 0.156, 94 -> 0.120, #1 -> 0.076, #3 -> 0.064, mkPair -> 0.062, 99 -> 0.062, prepend -> 0.043, 118 -> 0.042, #0 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[254697.394s]Generation 469
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.52191235059761
Average Fitness: 2.921971623078709E9
Fitness Variation: 4.38314805212887E9
Distribution: times -> 0.146, 94 -> 0.112, #1 -> 0.069, #3 -> 0.068, mkPair -> 0.066, 99 -> 0.057, prepend -> 0.046, #0 -> 0.045, 118 -> 0.044, (100,204) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[255208.094s]Generation 470
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.9203187250996
Average Fitness: 3.4724188909729967E9
Fitness Variation: 4.570928172029223E9
Distribution: times -> 0.155, 94 -> 0.118, #1 -> 0.072, mkPair -> 0.065, #3 -> 0.065, 99 -> 0.062, 118 -> 0.044, #0 -> 0.043, prepend -> 0.043, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[255693.615s]Generation 471
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (37,196) ; iter: mkPair(95, -75); seedExpr: (37,196) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(37,196),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.51792828685259
Average Fitness: 3.337636625493899E9
Fitness Variation: 4.524132065339052E9
Distribution: times -> 0.152, 94 -> 0.118, #1 -> 0.074, mkPair -> 0.066, #3 -> 0.065, 99 -> 0.060, prepend -> 0.045, 118 -> 0.044, #0 -> 0.044, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[256242.203s]Generation 472
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (208,206) ; iter: mkPair(95, -75); seedExpr: (208,206) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(208,206),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.29083665338646
Average Fitness: 3.3657876286874137E9
Fitness Variation: 4.502113740019583E9
Distribution: times -> 0.152, 94 -> 0.120, #1 -> 0.074, #3 -> 0.067, mkPair -> 0.065, 99 -> 0.060, 118 -> 0.044, prepend -> 0.043, #0 -> 0.043, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[256889.432s]Generation 473
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.167330677290835
Average Fitness: 3.5721988193206377E9
Fitness Variation: 4.524621524031939E9
Distribution: times -> 0.159, 94 -> 0.127, #1 -> 0.076, mkPair -> 0.063, #3 -> 0.063, 99 -> 0.063, 118 -> 0.041, prepend -> 0.041, #0 -> 0.040, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[257396.162s]Generation 474
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 2 ; iter: 97; seedExpr: 2 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(2,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.62948207171315
Average Fitness: 3.436919085642292E9
Fitness Variation: 4.563381450821911E9
Distribution: times -> 0.156, 94 -> 0.121, #1 -> 0.073, #3 -> 0.067, 99 -> 0.063, mkPair -> 0.063, 118 -> 0.043, prepend -> 0.042, #0 -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[257910.778s]Generation 475
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,95) ; iter: mkPair(95, -75); seedExpr: (142,95) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,95),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.2589641434263
Average Fitness: 2.909206254614936E9
Fitness Variation: 4.2480714371991134E9
Distribution: times -> 0.149, 94 -> 0.118, #1 -> 0.075, #3 -> 0.068, mkPair -> 0.066, 99 -> 0.059, 118 -> 0.045, prepend -> 0.044, (100,204) -> 0.043, #0 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[258335.993s]Generation 476
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 78 ; iter: 97; seedExpr: 78 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,157) ; iter: mkPair(95, -75); seedExpr: (142,157) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,157),(100,204),(148,52),(152,42),(142,141),(78,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.82470119521912
Average Fitness: 2.9886132732614856E9
Fitness Variation: 4.2166630283997016E9
Distribution: times -> 0.152, 94 -> 0.121, #1 -> 0.073, #3 -> 0.065, mkPair -> 0.065, 99 -> 0.059, prepend -> 0.044, #0 -> 0.044, 118 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 25 generations ago.
------------
[259137.277s]Generation 477
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (5,84) ; iter: mkPair(95, -75); seedExpr: (5,84) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(5,84),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.36254980079681
Average Fitness: 3.554917212068314E9
Fitness Variation: 4.445832898993598E9
Distribution: times -> 0.154, 94 -> 0.120, #1 -> 0.075, #3 -> 0.064, mkPair -> 0.064, 99 -> 0.061, #0 -> 0.045, prepend -> 0.043, 118 -> 0.041, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 26 generations ago.
------------
[259743.921s]Generation 478
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (75,3) ; iter: mkPair(95, -75); seedExpr: (75,3) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(75,3),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.21513944223108
Average Fitness: 3.3677234862101407E9
Fitness Variation: 4.46882464284666E9
Distribution: times -> 0.155, 94 -> 0.124, #1 -> 0.078, mkPair -> 0.065, #3 -> 0.065, 99 -> 0.059, #0 -> 0.044, 118 -> 0.043, prepend -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 27 generations ago.
------------
[260377.009s]Generation 479
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (37,196) ; iter: mkPair(95, -75); seedExpr: (37,196) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(37,196),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.1195219123506
Average Fitness: 3.7909079120257864E9
Fitness Variation: 4.636103120749072E9
Distribution: times -> 0.159, 94 -> 0.123, #1 -> 0.079, #3 -> 0.065, mkPair -> 0.064, 99 -> 0.062, #0 -> 0.044, 118 -> 0.043, prepend -> 0.042, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 0 generations ago.
------------
[261062.684s]Generation 480
Best Result: (fitness: 10042521065.9, performance: 10756863171.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (75,3) ; iter: mkPair(95, -75); seedExpr: (75,3) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), modular(inc(#1), #0))); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(75,3),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,147),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,147),(85726871,2),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,147),(85726871,2),(85726871,2),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,147),(85726871,2),(85726871,2),(85726871,2),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,147),(85726871,2),(85726871,2),(85726871,2),(85726871,2),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,147),(85726871,2),(85726871,2),(85726871,2),(85726871,2),(85726871,2),(97,118)]), ...
Average Size: 32.657370517928285
Average Fitness: 3.501243775177318E9
Fitness Variation: 4.540863138021754E9
Distribution: times -> 0.153, 94 -> 0.120, #1 -> 0.075, #3 -> 0.068, mkPair -> 0.064, 99 -> 0.060, 118 -> 0.044, prepend -> 0.043, #0 -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 1 generations ago.
------------
[261855.862s]Generation 481
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,95) ; iter: mkPair(95, -75); seedExpr: (142,95) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,95),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.11155378486056
Average Fitness: 4.008848234528019E9
Fitness Variation: 4.675332887325137E9
Distribution: times -> 0.154, 94 -> 0.122, #1 -> 0.077, #3 -> 0.065, mkPair -> 0.064, 99 -> 0.060, 118 -> 0.044, #0 -> 0.044, prepend -> 0.043, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 2 generations ago.
------------
[262753.807s]Generation 482
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (5,84) ; iter: mkPair(95, -75); seedExpr: (5,84) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(5,84),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.08366533864542
Average Fitness: 3.891360862864887E9
Fitness Variation: 4.576782467907795E9
Distribution: times -> 0.154, 94 -> 0.122, #1 -> 0.075, mkPair -> 0.065, #3 -> 0.065, 99 -> 0.059, #0 -> 0.044, prepend -> 0.042, 118 -> 0.041, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 3 generations ago.
------------
[263311.761s]Generation 483
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (142,95) ; iter: mkPair(95, -75); seedExpr: (142,95) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(142,95),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.51394422310757
Average Fitness: 3.6208320724600315E9
Fitness Variation: 4.55399911989212E9
Distribution: times -> 0.154, 94 -> 0.122, #1 -> 0.073, #3 -> 0.066, mkPair -> 0.064, 99 -> 0.062, prepend -> 0.043, #0 -> 0.043, (100,204) -> 0.041, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 4 generations ago.
------------
[263863.406s]Generation 484
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (5,84) ; iter: mkPair(95, -75); seedExpr: (5,84) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(5,84),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.820717131474105
Average Fitness: 3.723476074475924E9
Fitness Variation: 4.633837201466411E9
Distribution: times -> 0.150, 94 -> 0.118, #1 -> 0.076, #3 -> 0.065, mkPair -> 0.064, 99 -> 0.059, #0 -> 0.044, prepend -> 0.043, (100,204) -> 0.042, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 5 generations ago.
------------
[264373.636s]Generation 485
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 168 ; iter: 97; seedExpr: 168 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(168,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.147410358565736
Average Fitness: 2.982784658442412E9
Fitness Variation: 4.361272463867385E9
Distribution: times -> 0.157, 94 -> 0.125, #1 -> 0.076, #3 -> 0.066, mkPair -> 0.063, 99 -> 0.061, prepend -> 0.043, #0 -> 0.040, 118 -> 0.040, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 6 generations ago.
------------
[264843.180s]Generation 486
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 97 ; iter: 97; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (5,84) ; iter: mkPair(95, -75); seedExpr: (5,84) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(5,84),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.9203187250996
Average Fitness: 3.136706548784628E9
Fitness Variation: 4.480912692306698E9
Distribution: times -> 0.154, 94 -> 0.121, #1 -> 0.076, #3 -> 0.065, mkPair -> 0.065, 99 -> 0.060, #0 -> 0.044, prepend -> 0.044, 118 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 7 generations ago.
------------
[265434.320s]Generation 487
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.418326693227094
Average Fitness: 2.773496286764791E9
Fitness Variation: 4.2608320666249475E9
Distribution: times -> 0.157, 94 -> 0.124, #1 -> 0.077, #3 -> 0.065, mkPair -> 0.065, 99 -> 0.061, #0 -> 0.042, prepend -> 0.041, 118 -> 0.041, (100,204) -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 8 generations ago.
------------
[265950.414s]Generation 488
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 169 ; iter: 97; seedExpr: 169 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(169,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.05179282868526
Average Fitness: 3.2181295623712287E9
Fitness Variation: 4.392392722330939E9
Distribution: times -> 0.150, 94 -> 0.119, #1 -> 0.075, mkPair -> 0.066, #3 -> 0.064, 99 -> 0.059, #0 -> 0.044, prepend -> 0.043, 118 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 9 generations ago.
------------
[266585.146s]Generation 489
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 74 ; iter: 97; seedExpr: 74 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(74,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.091633466135455
Average Fitness: 3.7698267654474115E9
Fitness Variation: 4.649074094900645E9
Distribution: times -> 0.148, 94 -> 0.119, #1 -> 0.072, #3 -> 0.066, mkPair -> 0.064, 99 -> 0.058, prepend -> 0.045, #0 -> 0.044, (100,204) -> 0.043, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 10 generations ago.
------------
[267096.779s]Generation 490
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 207 ; iter: 97; seedExpr: 207 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(207,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.776892430278885
Average Fitness: 3.3390605830020266E9
Fitness Variation: 4.453991013331059E9
Distribution: times -> 0.151, 94 -> 0.120, #1 -> 0.074, mkPair -> 0.066, #3 -> 0.065, 99 -> 0.059, #0 -> 0.044, prepend -> 0.043, (100,204) -> 0.042, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 11 generations ago.
------------
[267514.301s]Generation 491
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.89243027888446
Average Fitness: 3.1373941576345997E9
Fitness Variation: 4.451426408314641E9
Distribution: times -> 0.151, 94 -> 0.119, #1 -> 0.072, #3 -> 0.066, mkPair -> 0.065, 99 -> 0.060, #0 -> 0.044, prepend -> 0.043, (100,204) -> 0.041, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 12 generations ago.
------------
[268079.880s]Generation 492
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.59760956175299
Average Fitness: 3.371363237093174E9
Fitness Variation: 4.53712826870727E9
Distribution: times -> 0.156, 94 -> 0.125, #1 -> 0.074, #3 -> 0.066, mkPair -> 0.065, 99 -> 0.061, (100,204) -> 0.046, prepend -> 0.044, #0 -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 13 generations ago.
------------
[268652.517s]Generation 493
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 169 ; iter: 97; seedExpr: 169 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(169,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.50996015936255
Average Fitness: 3.452461751109961E9
Fitness Variation: 4.536991362860284E9
Distribution: times -> 0.153, 94 -> 0.117, #1 -> 0.074, #3 -> 0.066, mkPair -> 0.065, 99 -> 0.060, #0 -> 0.044, (100,204) -> 0.043, prepend -> 0.042, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 14 generations ago.
------------
[269317.945s]Generation 494
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 169 ; iter: 97; seedExpr: 169 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(169,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.45019920318725
Average Fitness: 3.731989537502714E9
Fitness Variation: 4.605247824516737E9
Distribution: times -> 0.150, 94 -> 0.116, #1 -> 0.072, mkPair -> 0.068, #3 -> 0.064, 99 -> 0.061, #0 -> 0.048, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 15 generations ago.
------------
[269875.489s]Generation 495
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (75,3) ; iter: mkPair(95, -75); seedExpr: (75,3) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(75,3),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.2589641434263
Average Fitness: 3.742004043841368E9
Fitness Variation: 4.630204550969592E9
Distribution: times -> 0.150, 94 -> 0.118, #1 -> 0.072, mkPair -> 0.066, #3 -> 0.066, 99 -> 0.058, #0 -> 0.045, (100,204) -> 0.045, prepend -> 0.045, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 16 generations ago.
------------
[270364.789s]Generation 496
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 169 ; iter: 97; seedExpr: 169 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(169,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.51792828685259
Average Fitness: 3.3845829494155107E9
Fitness Variation: 4.523240725298367E9
Distribution: times -> 0.152, 94 -> 0.118, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.063, 99 -> 0.059, #0 -> 0.044, prepend -> 0.042, (100,204) -> 0.042, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 17 generations ago.
------------
[270996.255s]Generation 497
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: mkPair(95, -75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.689243027888445
Average Fitness: 3.5146190163001986E9
Fitness Variation: 4.518183274636028E9
Distribution: times -> 0.157, 94 -> 0.122, #1 -> 0.076, mkPair -> 0.065, #3 -> 0.062, 99 -> 0.061, #0 -> 0.044, prepend -> 0.042, (100,204) -> 0.040, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 18 generations ago.
------------
[271790.925s]Generation 498
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.64143426294821
Average Fitness: 3.619482518072879E9
Fitness Variation: 4.566135504250238E9
Distribution: times -> 0.156, 94 -> 0.123, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.064, 99 -> 0.063, prepend -> 0.044, (100,204) -> 0.043, 118 -> 0.043, #0 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 19 generations ago.
------------
[272374.315s]Generation 499
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (75,3) ; iter: mkPair(95, -75); seedExpr: (75,3) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(75,3),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.8605577689243
Average Fitness: 3.7135255105103693E9
Fitness Variation: 4.646774611737364E9
Distribution: times -> 0.156, 94 -> 0.122, #1 -> 0.078, mkPair -> 0.063, #3 -> 0.062, 99 -> 0.061, prepend -> 0.043, (100,204) -> 0.042, #0 -> 0.041, 118 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 20 generations ago.
------------
[272960.001s]Generation 500
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.537848605577686
Average Fitness: 3.2926442783360476E9
Fitness Variation: 4.489228396110921E9
Distribution: times -> 0.153, 94 -> 0.120, #1 -> 0.072, mkPair -> 0.066, #3 -> 0.063, 99 -> 0.060, #0 -> 0.047, (100,204) -> 0.043, prepend -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 21 generations ago.
------------
[273454.093s]Generation 501
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (75,3) ; iter: mkPair(95, -75); seedExpr: (75,3) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(75,3),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 33.0996015936255
Average Fitness: 2.9932026827371507E9
Fitness Variation: 4.362112163423825E9
Distribution: times -> 0.150, 94 -> 0.117, #1 -> 0.073, mkPair -> 0.064, #3 -> 0.063, 99 -> 0.057, #0 -> 0.046, prepend -> 0.043, (100,204) -> 0.041, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 22 generations ago.
------------
[273976.718s]Generation 502
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (177,10) ; iter: mkPair(95, -75); seedExpr: (177,10) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(177,10),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.36254980079681
Average Fitness: 3.506300828251289E9
Fitness Variation: 4.527075240519445E9
Distribution: times -> 0.151, 94 -> 0.119, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.064, 99 -> 0.060, prepend -> 0.045, #0 -> 0.043, (100,204) -> 0.043, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 23 generations ago.
------------
[274610.538s]Generation 503
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 156 ; iter: 97; seedExpr: 156 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(156,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.310756972111555
Average Fitness: 3.724627863632868E9
Fitness Variation: 4.649547285263992E9
Distribution: times -> 0.154, 94 -> 0.124, #1 -> 0.076, mkPair -> 0.064, #3 -> 0.063, 99 -> 0.059, prepend -> 0.042, (100,204) -> 0.041, #0 -> 0.041, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 24 generations ago.
------------
[275248.617s]Generation 504
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.48605577689243
Average Fitness: 3.1968848560583496E9
Fitness Variation: 4.420408394235306E9
Distribution: times -> 0.154, 94 -> 0.121, #1 -> 0.076, mkPair -> 0.064, #3 -> 0.063, 99 -> 0.060, prepend -> 0.043, #0 -> 0.043, (100,204) -> 0.043, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 25 generations ago.
------------
[275883.898s]Generation 505
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.18725099601593
Average Fitness: 3.3624800484781837E9
Fitness Variation: 4.452587062472503E9
Distribution: times -> 0.152, 94 -> 0.120, #1 -> 0.076, #3 -> 0.065, mkPair -> 0.065, 99 -> 0.060, prepend -> 0.043, (100,204) -> 0.043, #0 -> 0.042, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 26 generations ago.
------------
[276555.993s]Generation 506
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -75 ; iter: 97; seedExpr: -75 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: mkPair(95, -75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(-75,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.83665338645418
Average Fitness: 3.3825323004688325E9
Fitness Variation: 4.484207965001089E9
Distribution: times -> 0.153, 94 -> 0.122, #1 -> 0.076, #3 -> 0.065, mkPair -> 0.064, 99 -> 0.060, prepend -> 0.044, (100,204) -> 0.043, #0 -> 0.041, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 27 generations ago.
------------
[277225.889s]Generation 507
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: -137 ; iter: 97; seedExpr: -137 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(-137,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.677290836653384
Average Fitness: 3.4855377273711915E9
Fitness Variation: 4.550713383092622E9
Distribution: times -> 0.151, 94 -> 0.117, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.063, 99 -> 0.060, prepend -> 0.043, #0 -> 0.042, 118 -> 0.041, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 28 generations ago.
------------
[277817.908s]Generation 508
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.633466135458164
Average Fitness: 2.984702494065391E9
Fitness Variation: 4.372079298778333E9
Distribution: times -> 0.154, 94 -> 0.121, #1 -> 0.074, mkPair -> 0.065, #3 -> 0.063, 99 -> 0.060, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.041, #0 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 29 generations ago.
------------
[278520.295s]Generation 509
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 144 ; iter: 97; seedExpr: 144 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (75,3) ; iter: mkPair(95, -75); seedExpr: (75,3) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(75,3),(100,204),(148,52),(152,42),(142,141),(144,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.788844621513945
Average Fitness: 3.50970306741449E9
Fitness Variation: 4.504936429200206E9
Distribution: times -> 0.152, 94 -> 0.119, #1 -> 0.072, mkPair -> 0.065, #3 -> 0.065, 99 -> 0.060, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.041, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 30 generations ago.
------------
[279314.489s]Generation 510
Best Result: (fitness: 9990014939.8, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (42,179) ; iter: mkPair(95, -75); seedExpr: (42,179) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(42,179),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.896414342629484
Average Fitness: 3.6874144322284217E9
Fitness Variation: 4.546079972104403E9
Distribution: times -> 0.150, 94 -> 0.118, #1 -> 0.073, mkPair -> 0.066, #3 -> 0.066, 99 -> 0.059, prepend -> 0.044, (100,204) -> 0.042, 118 -> 0.042, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 31 generations ago.
------------
[280071.697s]Generation 511
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.95219123505976
Average Fitness: 3.6750794597955847E9
Fitness Variation: 4.581590388629008E9
Distribution: times -> 0.153, 94 -> 0.120, #1 -> 0.072, #3 -> 0.065, mkPair -> 0.064, 99 -> 0.061, prepend -> 0.042, (100,204) -> 0.041, 118 -> 0.040, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 32 generations ago.
------------
[280624.424s]Generation 512
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.657370517928285
Average Fitness: 3.4926837089182277E9
Fitness Variation: 4.535435911237286E9
Distribution: times -> 0.152, 94 -> 0.120, #1 -> 0.073, #3 -> 0.065, mkPair -> 0.064, 99 -> 0.058, prepend -> 0.045, (100,204) -> 0.042, 118 -> 0.040, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 33 generations ago.
------------
[281394.339s]Generation 513
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 35 ; iter: 97; seedExpr: 35 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(35,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.01593625498008
Average Fitness: 3.532049954867379E9
Fitness Variation: 4.549347819469837E9
Distribution: times -> 0.153, 94 -> 0.122, #1 -> 0.073, mkPair -> 0.065, #3 -> 0.064, 99 -> 0.060, (100,204) -> 0.045, prepend -> 0.044, #0 -> 0.043, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 34 generations ago.
------------
[282109.828s]Generation 514
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.298804780876495
Average Fitness: 4.067764533459403E9
Fitness Variation: 4.722654804593841E9
Distribution: times -> 0.158, 94 -> 0.124, #1 -> 0.077, mkPair -> 0.064, 99 -> 0.063, #3 -> 0.062, (100,204) -> 0.043, prepend -> 0.043, #0 -> 0.040, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 35 generations ago.
------------
[282739.460s]Generation 515
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.07171314741036
Average Fitness: 3.771625290495489E9
Fitness Variation: 4.59337742031164E9
Distribution: times -> 0.154, 94 -> 0.121, #1 -> 0.074, #3 -> 0.066, mkPair -> 0.063, 99 -> 0.061, #0 -> 0.045, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 36 generations ago.
------------
[283392.307s]Generation 516
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 32.10756972111554
Average Fitness: 3.732815730550588E9
Fitness Variation: 4.613274479082909E9
Distribution: times -> 0.157, 94 -> 0.126, #1 -> 0.074, #3 -> 0.062, mkPair -> 0.061, 99 -> 0.061, #0 -> 0.046, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 37 generations ago.
------------
[284001.350s]Generation 517
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.44223107569721
Average Fitness: 3.3813273286548276E9
Fitness Variation: 4.459405961861436E9
Distribution: times -> 0.158, 94 -> 0.125, #1 -> 0.074, #3 -> 0.066, 99 -> 0.062, mkPair -> 0.060, #0 -> 0.045, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 38 generations ago.
------------
[284589.832s]Generation 518
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.64541832669323
Average Fitness: 3.711906501014069E9
Fitness Variation: 4.552536323741096E9
Distribution: times -> 0.157, 94 -> 0.125, #1 -> 0.076, #3 -> 0.069, 99 -> 0.064, mkPair -> 0.059, 118 -> 0.047, #0 -> 0.047, prepend -> 0.046, (100,204) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 39 generations ago.
------------
[285110.661s]Generation 519
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.454183266932272
Average Fitness: 3.2378096700972495E9
Fitness Variation: 4.476836839299658E9
Distribution: times -> 0.158, 94 -> 0.124, #1 -> 0.077, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.056, 118 -> 0.047, prepend -> 0.045, #0 -> 0.045, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 40 generations ago.
------------
[285646.865s]Generation 520
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 69 ; iter: 97; seedExpr: 69 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.545816733067728
Average Fitness: 3.2731083149453325E9
Fitness Variation: 4.40019332401001E9
Distribution: times -> 0.155, 94 -> 0.121, #1 -> 0.075, #3 -> 0.069, 99 -> 0.059, mkPair -> 0.058, 118 -> 0.049, prepend -> 0.047, #0 -> 0.047, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 41 generations ago.
------------
[286144.371s]Generation 521
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.163346613545816
Average Fitness: 3.4100688625503902E9
Fitness Variation: 4.39452985530648E9
Distribution: times -> 0.168, 94 -> 0.134, #1 -> 0.081, #3 -> 0.065, 99 -> 0.065, mkPair -> 0.055, 118 -> 0.045, #0 -> 0.044, prepend -> 0.043, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 42 generations ago.
------------
[286588.808s]Generation 522
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.01195219123506
Average Fitness: 3.3439285523295116E9
Fitness Variation: 4.407298763247049E9
Distribution: times -> 0.163, 94 -> 0.129, #1 -> 0.076, #3 -> 0.065, 99 -> 0.065, mkPair -> 0.055, #0 -> 0.045, prepend -> 0.044, 118 -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 43 generations ago.
------------
[287014.094s]Generation 523
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.50199203187251
Average Fitness: 3.8474633709084616E9
Fitness Variation: 4.654157706855144E9
Distribution: times -> 0.163, 94 -> 0.128, #1 -> 0.077, #3 -> 0.066, 99 -> 0.064, mkPair -> 0.056, 118 -> 0.046, #0 -> 0.046, prepend -> 0.045, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 44 generations ago.
------------
[287326.535s]Generation 524
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.143426294820717
Average Fitness: 3.411869812469815E9
Fitness Variation: 4.5967624647515545E9
Distribution: times -> 0.157, 94 -> 0.125, #1 -> 0.073, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.057, #0 -> 0.050, 118 -> 0.048, prepend -> 0.047, (100,204) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 45 generations ago.
------------
[287731.952s]Generation 525
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.195219123505975
Average Fitness: 3.6633483891652656E9
Fitness Variation: 4.6523116564206505E9
Distribution: times -> 0.160, 94 -> 0.125, #1 -> 0.074, #3 -> 0.068, 99 -> 0.064, mkPair -> 0.057, 118 -> 0.048, #0 -> 0.048, prepend -> 0.046, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 46 generations ago.
------------
[288252.295s]Generation 526
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 106 ; iter: 97; seedExpr: 106 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(106,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.215139442231077
Average Fitness: 3.648690053647946E9
Fitness Variation: 4.647042477513681E9
Distribution: times -> 0.159, 94 -> 0.125, #1 -> 0.079, #3 -> 0.068, 99 -> 0.063, mkPair -> 0.056, 118 -> 0.046, prepend -> 0.045, #0 -> 0.045, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 47 generations ago.
------------
[288792.870s]Generation 527
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 106 ; iter: 97; seedExpr: 106 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(106,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.175298804780876
Average Fitness: 4.2344979558258076E9
Fitness Variation: 4.74561643991825E9
Distribution: times -> 0.161, 94 -> 0.125, #1 -> 0.078, #3 -> 0.069, 99 -> 0.065, mkPair -> 0.057, 118 -> 0.047, prepend -> 0.046, #0 -> 0.046, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 48 generations ago.
------------
[289352.702s]Generation 528
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 86 ; iter: 97; seedExpr: 86 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(86,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 29.99203187250996
Average Fitness: 3.4469922005593247E9
Fitness Variation: 4.642770672045603E9
Distribution: times -> 0.163, 94 -> 0.125, #1 -> 0.076, #3 -> 0.066, 99 -> 0.066, mkPair -> 0.055, 118 -> 0.046, #0 -> 0.045, prepend -> 0.045, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 49 generations ago.
------------
[289916.043s]Generation 529
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.0
Average Fitness: 3.6417875705837674E9
Fitness Variation: 4.597420788385918E9
Distribution: times -> 0.163, 94 -> 0.126, #1 -> 0.079, #3 -> 0.065, 99 -> 0.064, mkPair -> 0.055, prepend -> 0.044, #0 -> 0.043, 118 -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 50 generations ago.
------------
[290444.091s]Generation 530
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.314741035856574
Average Fitness: 3.7493343876510634E9
Fitness Variation: 4.654720461025868E9
Distribution: times -> 0.159, 94 -> 0.124, #1 -> 0.077, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.058, 118 -> 0.047, #0 -> 0.047, prepend -> 0.044, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 51 generations ago.
------------
[290852.943s]Generation 531
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.56972111553785
Average Fitness: 3.2890165211551595E9
Fitness Variation: 4.503383635522349E9
Distribution: times -> 0.165, 94 -> 0.127, #1 -> 0.079, #3 -> 0.067, 99 -> 0.066, mkPair -> 0.056, prepend -> 0.045, 118 -> 0.045, #0 -> 0.044, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 52 generations ago.
------------
[291280.214s]Generation 532
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.840637450199203
Average Fitness: 3.299555807188554E9
Fitness Variation: 4.489195626608666E9
Distribution: times -> 0.165, 94 -> 0.129, #1 -> 0.082, #3 -> 0.067, 99 -> 0.065, mkPair -> 0.057, prepend -> 0.045, 118 -> 0.043, #0 -> 0.043, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 53 generations ago.
------------
[291742.181s]Generation 533
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.745019920318725
Average Fitness: 3.1477603860508914E9
Fitness Variation: 4.452550656418591E9
Distribution: times -> 0.163, 94 -> 0.123, #1 -> 0.081, #3 -> 0.065, 99 -> 0.065, mkPair -> 0.056, prepend -> 0.044, #0 -> 0.044, 118 -> 0.042, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 54 generations ago.
------------
[292341.067s]Generation 534
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.199203187250998
Average Fitness: 3.40090897673127E9
Fitness Variation: 4.5086538925043335E9
Distribution: times -> 0.162, 94 -> 0.127, #1 -> 0.082, #3 -> 0.068, 99 -> 0.063, mkPair -> 0.059, prepend -> 0.044, 118 -> 0.044, #0 -> 0.042, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 55 generations ago.
------------
[292934.190s]Generation 535
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.43426294820717
Average Fitness: 3.997835315644265E9
Fitness Variation: 4.664908872422865E9
Distribution: times -> 0.168, 94 -> 0.130, #1 -> 0.080, 99 -> 0.067, #3 -> 0.066, mkPair -> 0.056, prepend -> 0.043, 118 -> 0.043, #0 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 56 generations ago.
------------
[293339.551s]Generation 536
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.111553784860558
Average Fitness: 3.516438198870053E9
Fitness Variation: 4.596785577968634E9
Distribution: times -> 0.158, 94 -> 0.124, #1 -> 0.078, #3 -> 0.069, 99 -> 0.060, mkPair -> 0.057, 118 -> 0.048, #0 -> 0.046, prepend -> 0.046, (100,204) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 57 generations ago.
------------
[293872.884s]Generation 537
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.262948207171316
Average Fitness: 3.888727817828495E9
Fitness Variation: 4.65330661539536E9
Distribution: times -> 0.163, 94 -> 0.127, #1 -> 0.080, #3 -> 0.068, 99 -> 0.064, mkPair -> 0.057, prepend -> 0.046, #0 -> 0.044, 118 -> 0.044, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 58 generations ago.
------------
[294310.966s]Generation 538
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.219123505976096
Average Fitness: 3.4857869455692368E9
Fitness Variation: 4.558952182492083E9
Distribution: times -> 0.157, 94 -> 0.122, #1 -> 0.076, #3 -> 0.067, 99 -> 0.064, mkPair -> 0.056, #0 -> 0.047, prepend -> 0.047, 118 -> 0.044, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 59 generations ago.
------------
[294728.416s]Generation 539
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 54 ; iter: 97; seedExpr: 54 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(54,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 29.804780876494025
Average Fitness: 3.7763307455652876E9
Fitness Variation: 4.688290536930864E9
Distribution: times -> 0.153, 94 -> 0.122, #1 -> 0.076, #3 -> 0.071, 99 -> 0.061, mkPair -> 0.058, prepend -> 0.048, 118 -> 0.047, #0 -> 0.046, (100,204) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 60 generations ago.
------------
[295241.975s]Generation 540
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 54 ; iter: 97; seedExpr: 54 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(54,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 29.733067729083665
Average Fitness: 3.370641758499198E9
Fitness Variation: 4.544178965243908E9
Distribution: times -> 0.160, 94 -> 0.126, #1 -> 0.079, #3 -> 0.069, 99 -> 0.063, mkPair -> 0.056, 118 -> 0.046, #0 -> 0.045, prepend -> 0.045, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 61 generations ago.
------------
[295665.207s]Generation 541
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.302788844621514
Average Fitness: 3.244282597172667E9
Fitness Variation: 4.409803345716165E9
Distribution: times -> 0.161, 94 -> 0.124, #1 -> 0.078, #3 -> 0.069, 99 -> 0.064, mkPair -> 0.056, #0 -> 0.046, prepend -> 0.044, 118 -> 0.042, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 62 generations ago.
------------
[296286.103s]Generation 542
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.45816733067729
Average Fitness: 3.7836169793748035E9
Fitness Variation: 4.639130767435948E9
Distribution: times -> 0.161, 94 -> 0.127, #1 -> 0.079, #3 -> 0.067, 99 -> 0.064, mkPair -> 0.056, prepend -> 0.045, #0 -> 0.045, (100,204) -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 63 generations ago.
------------
[296837.150s]Generation 543
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 179 ; iter: 97; seedExpr: 179 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (39,13) ; iter: #2; seedExpr: (39,13) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(179,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.15139442231076
Average Fitness: 3.7840595649235997E9
Fitness Variation: 4.6983296190769005E9
Distribution: times -> 0.165, 94 -> 0.128, #1 -> 0.080, #3 -> 0.070, 99 -> 0.064, mkPair -> 0.055, prepend -> 0.044, 118 -> 0.044, (100,204) -> 0.044, #0 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 64 generations ago.
------------
[297404.435s]Generation 544
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 111 ; iter: 97; seedExpr: 111 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(111,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.470119521912352
Average Fitness: 3.6902197187066746E9
Fitness Variation: 4.607427216934206E9
Distribution: times -> 0.157, 94 -> 0.125, #1 -> 0.077, #3 -> 0.069, 99 -> 0.061, mkPair -> 0.056, #0 -> 0.047, prepend -> 0.046, 118 -> 0.045, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 65 generations ago.
------------
[297986.121s]Generation 545
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 111 ; iter: 97; seedExpr: 111 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(111,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.89641434262948
Average Fitness: 3.8658510851692343E9
Fitness Variation: 4.707933659266179E9
Distribution: times -> 0.160, 94 -> 0.127, #1 -> 0.080, #3 -> 0.069, 99 -> 0.062, mkPair -> 0.056, #0 -> 0.046, prepend -> 0.045, (100,204) -> 0.043, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 66 generations ago.
------------
[298412.517s]Generation 546
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.454183266932272
Average Fitness: 3.4644150369259458E9
Fitness Variation: 4.554765823661536E9
Distribution: times -> 0.159, 94 -> 0.126, #1 -> 0.079, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.056, prepend -> 0.045, #0 -> 0.045, (100,204) -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 67 generations ago.
------------
[298963.794s]Generation 547
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.159362549800797
Average Fitness: 3.57302297891975E9
Fitness Variation: 4.563976395259443E9
Distribution: times -> 0.162, 94 -> 0.127, #1 -> 0.079, #3 -> 0.067, 99 -> 0.064, mkPair -> 0.056, prepend -> 0.046, #0 -> 0.045, (100,204) -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 68 generations ago.
------------
[299434.584s]Generation 548
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.15139442231076
Average Fitness: 3.4671730358149643E9
Fitness Variation: 4.644261320579617E9
Distribution: times -> 0.158, 94 -> 0.125, #1 -> 0.074, #3 -> 0.070, 99 -> 0.060, mkPair -> 0.058, #0 -> 0.049, prepend -> 0.047, 118 -> 0.045, (100,204) -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 69 generations ago.
------------
[300009.295s]Generation 549
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.358565737051794
Average Fitness: 3.133230562933995E9
Fitness Variation: 4.450049284683308E9
Distribution: times -> 0.164, 94 -> 0.128, #1 -> 0.074, #3 -> 0.066, 99 -> 0.065, mkPair -> 0.057, #0 -> 0.046, prepend -> 0.044, 118 -> 0.043, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 70 generations ago.
------------
[300493.354s]Generation 550
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.37051792828685
Average Fitness: 3.628626987998941E9
Fitness Variation: 4.569778570870402E9
Distribution: times -> 0.161, 94 -> 0.127, #1 -> 0.076, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.056, prepend -> 0.047, #0 -> 0.046, (100,204) -> 0.044, 118 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 71 generations ago.
------------
[300928.987s]Generation 551
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.844621513944222
Average Fitness: 3.7295619675117764E9
Fitness Variation: 4.665745737601927E9
Distribution: times -> 0.160, 94 -> 0.123, #1 -> 0.078, #3 -> 0.067, 99 -> 0.064, mkPair -> 0.055, prepend -> 0.046, #0 -> 0.046, (100,204) -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 72 generations ago.
------------
[301644.685s]Generation 552
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.406374501992033
Average Fitness: 3.52247837339733E9
Fitness Variation: 4.646292586515688E9
Distribution: times -> 0.167, 94 -> 0.129, #1 -> 0.081, 99 -> 0.068, #3 -> 0.067, mkPair -> 0.056, prepend -> 0.045, #0 -> 0.044, (100,204) -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 73 generations ago.
------------
[302332.221s]Generation 553
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.390438247011954
Average Fitness: 3.598840751296302E9
Fitness Variation: 4.607792440932997E9
Distribution: times -> 0.159, 94 -> 0.124, #1 -> 0.077, #3 -> 0.068, 99 -> 0.065, mkPair -> 0.058, #0 -> 0.046, prepend -> 0.046, 118 -> 0.045, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 74 generations ago.
------------
[302979.848s]Generation 554
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (39,13) ; iter: #2; seedExpr: (39,13) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.872509960159363
Average Fitness: 3.6742076990874715E9
Fitness Variation: 4.59894837510831E9
Distribution: times -> 0.162, 94 -> 0.127, #1 -> 0.079, #3 -> 0.067, 99 -> 0.065, mkPair -> 0.057, prepend -> 0.045, #0 -> 0.044, 118 -> 0.043, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 75 generations ago.
------------
[303514.087s]Generation 555
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.94422310756972
Average Fitness: 3.910616698993802E9
Fitness Variation: 4.651631065522005E9
Distribution: times -> 0.158, 94 -> 0.126, #1 -> 0.074, #3 -> 0.065, 99 -> 0.063, mkPair -> 0.056, prepend -> 0.048, 118 -> 0.044, (100,204) -> 0.043, #0 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 76 generations ago.
------------
[304007.340s]Generation 556
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 7520 ; iter: 97; seedExpr: 7520 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(7520,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.38645418326693
Average Fitness: 3.6475307228188386E9
Fitness Variation: 4.700725934995417E9
Distribution: times -> 0.157, 94 -> 0.124, #1 -> 0.074, #3 -> 0.067, 99 -> 0.065, mkPair -> 0.057, prepend -> 0.047, #0 -> 0.045, 118 -> 0.045, (100,204) -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 77 generations ago.
------------
[304521.924s]Generation 557
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.51394422310757
Average Fitness: 4.016157903181345E9
Fitness Variation: 4.746851127321879E9
Distribution: times -> 0.165, 94 -> 0.129, #1 -> 0.081, 99 -> 0.067, #3 -> 0.066, mkPair -> 0.055, prepend -> 0.045, (100,204) -> 0.043, 118 -> 0.043, #0 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 78 generations ago.
------------
[305303.092s]Generation 558
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.800796812749002
Average Fitness: 3.713539355713039E9
Fitness Variation: 4.694875309907601E9
Distribution: times -> 0.159, 94 -> 0.124, #1 -> 0.080, #3 -> 0.067, 99 -> 0.065, mkPair -> 0.056, #0 -> 0.046, prepend -> 0.045, (100,204) -> 0.043, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 79 generations ago.
------------
[305906.715s]Generation 559
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.9800796812749
Average Fitness: 3.278327617062914E9
Fitness Variation: 4.513894367526782E9
Distribution: times -> 0.159, 94 -> 0.124, #1 -> 0.078, #3 -> 0.066, 99 -> 0.064, mkPair -> 0.055, prepend -> 0.046, (100,204) -> 0.044, #0 -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 80 generations ago.
------------
[306583.401s]Generation 560
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 39 ; iter: 97; seedExpr: 39 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(39,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.0199203187251
Average Fitness: 3.943339903590867E9
Fitness Variation: 4.692369276277388E9
Distribution: times -> 0.159, 94 -> 0.123, #1 -> 0.074, #3 -> 0.067, 99 -> 0.067, mkPair -> 0.057, prepend -> 0.047, #0 -> 0.045, (100,204) -> 0.045, 118 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 81 generations ago.
------------
[307341.947s]Generation 561
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 57 ; iter: 97; seedExpr: 57 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(57,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.745019920318725
Average Fitness: 3.6021481358190823E9
Fitness Variation: 4.657811003279632E9
Distribution: times -> 0.160, 94 -> 0.126, #1 -> 0.075, #3 -> 0.067, 99 -> 0.066, mkPair -> 0.056, prepend -> 0.046, (100,204) -> 0.045, #0 -> 0.045, 118 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 82 generations ago.
------------
[307877.585s]Generation 562
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.97609561752988
Average Fitness: 3.2505499669839177E9
Fitness Variation: 4.468770987062395E9
Distribution: times -> 0.158, 94 -> 0.125, #1 -> 0.078, #3 -> 0.066, 99 -> 0.062, mkPair -> 0.056, #0 -> 0.047, prepend -> 0.045, (100,204) -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 83 generations ago.
------------
[308444.492s]Generation 563
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (39,13) ; iter: #2; seedExpr: (39,13) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.90836653386454
Average Fitness: 3.944279388864505E9
Fitness Variation: 4.755162353068638E9
Distribution: times -> 0.158, 94 -> 0.124, #1 -> 0.077, #3 -> 0.067, 99 -> 0.062, mkPair -> 0.057, prepend -> 0.048, #0 -> 0.048, (100,204) -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 84 generations ago.
------------
[308986.480s]Generation 564
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 39 ; iter: 97; seedExpr: 39 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(39,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.159362549800797
Average Fitness: 3.3193653268247766E9
Fitness Variation: 4.503450910073501E9
Distribution: times -> 0.162, 94 -> 0.127, #1 -> 0.076, #3 -> 0.067, 99 -> 0.064, mkPair -> 0.057, #0 -> 0.047, prepend -> 0.046, 118 -> 0.043, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 85 generations ago.
------------
[309529.800s]Generation 565
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 57 ; iter: 97; seedExpr: 57 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(57,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.50996015936255
Average Fitness: 3.542539541904346E9
Fitness Variation: 4.620988929162123E9
Distribution: times -> 0.160, 94 -> 0.126, #1 -> 0.077, #3 -> 0.067, 99 -> 0.063, mkPair -> 0.055, prepend -> 0.047, #0 -> 0.045, (100,204) -> 0.042, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 86 generations ago.
------------
[310124.604s]Generation 566
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 29.90836653386454
Average Fitness: 3.689687291336747E9
Fitness Variation: 4.667224957651245E9
Distribution: times -> 0.159, 94 -> 0.125, #1 -> 0.078, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.057, #0 -> 0.049, prepend -> 0.045, (100,204) -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 87 generations ago.
------------
[310736.477s]Generation 567
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.390438247011954
Average Fitness: 3.022804524533792E9
Fitness Variation: 4.379785474498184E9
Distribution: times -> 0.156, 94 -> 0.126, #1 -> 0.075, #3 -> 0.070, 99 -> 0.062, mkPair -> 0.057, prepend -> 0.048, #0 -> 0.046, (100,204) -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 88 generations ago.
------------
[311150.127s]Generation 568
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.661354581673308
Average Fitness: 3.3369315920953255E9
Fitness Variation: 4.581730149777805E9
Distribution: times -> 0.158, 94 -> 0.123, #1 -> 0.079, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.056, #0 -> 0.046, prepend -> 0.044, 118 -> 0.041, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 89 generations ago.
------------
[311699.935s]Generation 569
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.08764940239044
Average Fitness: 3.6796355608075404E9
Fitness Variation: 4.679475340431134E9
Distribution: times -> 0.159, 94 -> 0.126, #1 -> 0.078, #3 -> 0.070, 99 -> 0.062, mkPair -> 0.056, #0 -> 0.047, prepend -> 0.046, (100,204) -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 90 generations ago.
------------
[312273.408s]Generation 570
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.904382470119522
Average Fitness: 3.2508604006629014E9
Fitness Variation: 4.482157417271811E9
Distribution: times -> 0.158, 94 -> 0.124, #1 -> 0.080, #3 -> 0.066, 99 -> 0.063, mkPair -> 0.057, #0 -> 0.048, prepend -> 0.045, 118 -> 0.042, (100,204) -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 91 generations ago.
------------
[312766.985s]Generation 571
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 49 ; iter: 97; seedExpr: 49 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(49,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.96414342629482
Average Fitness: 3.652655598029342E9
Fitness Variation: 4.585668925487267E9
Distribution: times -> 0.170, 94 -> 0.131, #1 -> 0.079, 99 -> 0.067, #3 -> 0.065, mkPair -> 0.056, #0 -> 0.046, prepend -> 0.042, 118 -> 0.041, (100,204) -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 92 generations ago.
------------
[313278.075s]Generation 572
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 138 ; iter: 97; seedExpr: 138 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (39,13) ; iter: (179,56); seedExpr: (39,13) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(138,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.306772908366533
Average Fitness: 3.412713538976995E9
Fitness Variation: 4.575627446309286E9
Distribution: times -> 0.156, 94 -> 0.123, #1 -> 0.076, #3 -> 0.069, 99 -> 0.060, mkPair -> 0.057, #0 -> 0.048, prepend -> 0.046, 118 -> 0.045, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 93 generations ago.
------------
[313790.577s]Generation 573
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 5 ; iter: 97; seedExpr: 5 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(5,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.904382470119522
Average Fitness: 3.550265998473231E9
Fitness Variation: 4.63077372866401E9
Distribution: times -> 0.164, 94 -> 0.129, #1 -> 0.079, #3 -> 0.067, 99 -> 0.066, mkPair -> 0.056, prepend -> 0.046, #0 -> 0.044, 118 -> 0.043, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 94 generations ago.
------------
[314570.866s]Generation 574
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 7520 ; iter: 97; seedExpr: 7520 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (180,88) ; iter: (95,-75); seedExpr: (180,88) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(180,88),(100,204),(148,52),(152,42),(142,141),(7520,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.97609561752988
Average Fitness: 3.5125842782397947E9
Fitness Variation: 4.525149780491736E9
Distribution: times -> 0.163, 94 -> 0.129, #1 -> 0.077, #3 -> 0.068, 99 -> 0.065, mkPair -> 0.055, #0 -> 0.046, prepend -> 0.045, (100,204) -> 0.039, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 95 generations ago.
------------
[315036.224s]Generation 575
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.56972111553785
Average Fitness: 3.2067771339337516E9
Fitness Variation: 4.500227034774009E9
Distribution: times -> 0.154, 94 -> 0.125, #1 -> 0.077, #3 -> 0.068, 99 -> 0.062, mkPair -> 0.057, prepend -> 0.047, #0 -> 0.047, (100,204) -> 0.041, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 96 generations ago.
------------
[315580.648s]Generation 576
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.649402390438247
Average Fitness: 3.6983071270264735E9
Fitness Variation: 4.651213335891821E9
Distribution: times -> 0.156, 94 -> 0.127, #1 -> 0.077, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.057, prepend -> 0.047, #0 -> 0.046, (100,204) -> 0.042, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 97 generations ago.
------------
[316215.351s]Generation 577
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.131474103585656
Average Fitness: 3.87474168194321E9
Fitness Variation: 4.657349093723213E9
Distribution: times -> 0.162, 94 -> 0.132, #1 -> 0.079, #3 -> 0.068, 99 -> 0.065, mkPair -> 0.057, #0 -> 0.046, prepend -> 0.045, (100,204) -> 0.043, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 98 generations ago.
------------
[316861.133s]Generation 578
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.64541832669323
Average Fitness: 3.590258668185561E9
Fitness Variation: 4.600911962795217E9
Distribution: times -> 0.158, 94 -> 0.125, #1 -> 0.076, #3 -> 0.069, 99 -> 0.061, mkPair -> 0.056, #0 -> 0.047, prepend -> 0.046, 118 -> 0.045, (100,204) -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 99 generations ago.
------------
[317551.642s]Generation 579
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.207171314741036
Average Fitness: 3.5982357715502834E9
Fitness Variation: 4.532990317097904E9
Distribution: times -> 0.154, 94 -> 0.124, #1 -> 0.073, #3 -> 0.071, 99 -> 0.062, mkPair -> 0.057, prepend -> 0.048, (100,204) -> 0.045, 118 -> 0.045, #0 -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 100 generations ago.
------------
[318315.013s]Generation 580
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.673306772908365
Average Fitness: 3.723458093259761E9
Fitness Variation: 4.569254643659948E9
Distribution: times -> 0.159, 94 -> 0.131, #1 -> 0.078, #3 -> 0.069, 99 -> 0.063, mkPair -> 0.056, prepend -> 0.045, #0 -> 0.044, (100,204) -> 0.042, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 101 generations ago.
------------
[319064.117s]Generation 581
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.09163346613546
Average Fitness: 4.2321620171193533E9
Fitness Variation: 4.795845127989943E9
Distribution: times -> 0.154, 94 -> 0.127, #1 -> 0.075, #3 -> 0.071, 99 -> 0.062, mkPair -> 0.058, prepend -> 0.047, (100,204) -> 0.045, 118 -> 0.043, #0 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 102 generations ago.
------------
[319674.721s]Generation 582
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 57 ; iter: 97; seedExpr: 57 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(57,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.163346613545816
Average Fitness: 3.952788050890184E9
Fitness Variation: 4.728594646983975E9
Distribution: times -> 0.156, 94 -> 0.127, #1 -> 0.076, #3 -> 0.071, 99 -> 0.062, mkPair -> 0.058, prepend -> 0.047, 118 -> 0.046, #0 -> 0.045, (100,204) -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 103 generations ago.
------------
[320384.548s]Generation 583
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 57 ; iter: 97; seedExpr: 57 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (88,189) ; iter: (95,-75); seedExpr: (88,189) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(88,189),(100,204),(148,52),(152,42),(142,141),(57,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.239043824701195
Average Fitness: 3.2331077587247677E9
Fitness Variation: 4.486206265254139E9
Distribution: times -> 0.157, 94 -> 0.128, #1 -> 0.077, #3 -> 0.070, 99 -> 0.061, mkPair -> 0.057, prepend -> 0.047, 118 -> 0.044, (100,204) -> 0.044, #0 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 104 generations ago.
------------
[321123.582s]Generation 584
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.725099601593627
Average Fitness: 3.798245850102774E9
Fitness Variation: 4.642602725722087E9
Distribution: times -> 0.155, 94 -> 0.126, #1 -> 0.076, #3 -> 0.070, 99 -> 0.059, mkPair -> 0.056, prepend -> 0.047, (100,204) -> 0.044, #0 -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 105 generations ago.
------------
[321803.967s]Generation 585
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 118 ; iter: 97; seedExpr: 118 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(118,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.53784860557769
Average Fitness: 3.664015507072695E9
Fitness Variation: 4.617866151685605E9
Distribution: times -> 0.157, 94 -> 0.126, #1 -> 0.078, #3 -> 0.069, 99 -> 0.060, mkPair -> 0.057, prepend -> 0.047, #0 -> 0.046, (100,204) -> 0.045, 118 -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 106 generations ago.
------------
[322543.993s]Generation 586
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.54980079681275
Average Fitness: 3.5187751378584404E9
Fitness Variation: 4.5550311514769945E9
Distribution: times -> 0.161, 94 -> 0.128, #1 -> 0.078, #3 -> 0.068, 99 -> 0.064, mkPair -> 0.057, prepend -> 0.045, 118 -> 0.044, #0 -> 0.042, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 107 generations ago.
------------
[323169.926s]Generation 587
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 43 ; iter: 97; seedExpr: 43 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(43,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.07569721115538
Average Fitness: 3.3486927001664042E9
Fitness Variation: 4.570312176179288E9
Distribution: times -> 0.160, 94 -> 0.128, #1 -> 0.077, #3 -> 0.069, 99 -> 0.061, mkPair -> 0.057, prepend -> 0.047, 118 -> 0.046, #0 -> 0.046, (100,204) -> 0.045
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 108 generations ago.
------------
[324002.091s]Generation 588
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.705179282868524
Average Fitness: 3.5500200919753976E9
Fitness Variation: 4.585714562019318E9
Distribution: times -> 0.160, 94 -> 0.128, #1 -> 0.072, #3 -> 0.069, 99 -> 0.063, mkPair -> 0.056, prepend -> 0.047, (100,204) -> 0.045, #0 -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 109 generations ago.
------------
[324814.091s]Generation 589
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (157,79) ; iter: #2; seedExpr: (157,79) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.342629482071715
Average Fitness: 3.8674404727836256E9
Fitness Variation: 4.644652386938121E9
Distribution: times -> 0.158, 94 -> 0.130, #1 -> 0.075, #3 -> 0.071, 99 -> 0.061, mkPair -> 0.057, prepend -> 0.046, #0 -> 0.045, (100,204) -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 110 generations ago.
------------
[325525.688s]Generation 590
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (44,139) ; iter: (95,-75); seedExpr: (44,139) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.227091633466134
Average Fitness: 3.7893589008159933E9
Fitness Variation: 4.602644267415327E9
Distribution: times -> 0.161, 94 -> 0.130, #1 -> 0.077, #3 -> 0.069, 99 -> 0.062, mkPair -> 0.058, #0 -> 0.045, prepend -> 0.044, 118 -> 0.044, (100,204) -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 111 generations ago.
------------
[326340.376s]Generation 591
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 156 ; iter: 97; seedExpr: 156 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(156,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.159362549800797
Average Fitness: 3.602524677722044E9
Fitness Variation: 4.582092205905522E9
Distribution: times -> 0.160, 94 -> 0.126, #1 -> 0.077, #3 -> 0.071, 99 -> 0.063, mkPair -> 0.056, prepend -> 0.046, (100,204) -> 0.044, 118 -> 0.041, #0 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 112 generations ago.
------------
[327134.875s]Generation 592
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (88,189) ; iter: (95,-75); seedExpr: (88,189) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.721115537848604
Average Fitness: 3.8850621256527276E9
Fitness Variation: 4.662623897291511E9
Distribution: times -> 0.161, 94 -> 0.127, #1 -> 0.078, #3 -> 0.071, 99 -> 0.064, mkPair -> 0.056, prepend -> 0.048, (100,204) -> 0.045, 118 -> 0.041, #0 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 113 generations ago.
------------
[327830.191s]Generation 593
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Mutate
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.083665338645417
Average Fitness: 3.5647675219919357E9
Fitness Variation: 4.631653243312837E9
Distribution: times -> 0.158, 94 -> 0.128, #1 -> 0.077, #3 -> 0.068, 99 -> 0.063, mkPair -> 0.057, prepend -> 0.046, 118 -> 0.041, #0 -> 0.041, (100,204) -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 114 generations ago.
------------
[328610.529s]Generation 594
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.53386454183267
Average Fitness: 3.8294125548649096E9
Fitness Variation: 4.640606679574294E9
Distribution: times -> 0.157, 94 -> 0.126, #1 -> 0.078, #3 -> 0.071, 99 -> 0.060, mkPair -> 0.057, prepend -> 0.046, (100,204) -> 0.044, 118 -> 0.043, #0 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 115 generations ago.
------------
[329334.768s]Generation 595
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: []; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.374501992031874
Average Fitness: 3.7444272078362927E9
Fitness Variation: 4.598344348152815E9
Distribution: times -> 0.160, 94 -> 0.129, #1 -> 0.077, #3 -> 0.068, 99 -> 0.063, mkPair -> 0.056, prepend -> 0.046, (100,204) -> 0.043, #0 -> 0.042, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 116 generations ago.
------------
[330047.632s]Generation 596
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.362549800796813
Average Fitness: 3.6188034147480946E9
Fitness Variation: 4.552754586961471E9
Distribution: times -> 0.163, 94 -> 0.129, #1 -> 0.079, #3 -> 0.069, 99 -> 0.064, mkPair -> 0.056, (100,204) -> 0.044, prepend -> 0.044, #0 -> 0.043, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 117 generations ago.
------------
[330756.694s]Generation 597
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 103 ; iter: 97; seedExpr: 103 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (88,189) ; iter: (95,-75); seedExpr: (88,189) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(103,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.382470119521912
Average Fitness: 3.7778737501976843E9
Fitness Variation: 4.604501049455326E9
Distribution: times -> 0.159, 94 -> 0.127, #1 -> 0.080, #3 -> 0.069, 99 -> 0.062, mkPair -> 0.056, prepend -> 0.043, (100,204) -> 0.042, #0 -> 0.040, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 118 generations ago.
------------
[331295.291s]Generation 598
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.87649402390438
Average Fitness: 3.775391237639125E9
Fitness Variation: 4.584712737224893E9
Distribution: times -> 0.164, 94 -> 0.130, #1 -> 0.083, #3 -> 0.069, 99 -> 0.063, mkPair -> 0.057, prepend -> 0.045, (100,204) -> 0.042, 118 -> 0.040, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 119 generations ago.
------------
[332043.179s]Generation 599
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.621513944223107
Average Fitness: 4.0266462258944297E9
Fitness Variation: 4.696276396045344E9
Distribution: times -> 0.162, 94 -> 0.131, #1 -> 0.077, #3 -> 0.068, 99 -> 0.064, mkPair -> 0.056, prepend -> 0.045, (100,204) -> 0.042, #0 -> 0.041, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 120 generations ago.
------------
[332636.079s]Generation 600
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.02390438247012
Average Fitness: 3.7147017900056977E9
Fitness Variation: 4.664160377442501E9
Distribution: times -> 0.160, 94 -> 0.125, #1 -> 0.077, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.057, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.043, #0 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 121 generations ago.
------------
[333330.720s]Generation 601
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.111553784860558
Average Fitness: 4.1797003556682887E9
Fitness Variation: 4.740378574022264E9
Distribution: times -> 0.160, 94 -> 0.127, #1 -> 0.081, #3 -> 0.069, 99 -> 0.063, mkPair -> 0.055, prepend -> 0.046, (100,204) -> 0.043, 118 -> 0.040, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 122 generations ago.
------------
[334117.130s]Generation 602
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 29.784860557768923
Average Fitness: 3.5520063634122424E9
Fitness Variation: 4.567176477039952E9
Distribution: times -> 0.157, 94 -> 0.124, #1 -> 0.079, #3 -> 0.070, 99 -> 0.062, mkPair -> 0.055, prepend -> 0.046, (100,204) -> 0.045, 118 -> 0.040, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 123 generations ago.
------------
[334813.785s]Generation 603
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (88,189) ; iter: (95,-75); seedExpr: (88,189) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.04382470119522
Average Fitness: 3.862579952869299E9
Fitness Variation: 4.665603229473594E9
Distribution: times -> 0.163, 94 -> 0.130, #1 -> 0.077, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.055, prepend -> 0.047, (100,204) -> 0.046, 118 -> 0.041, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 124 generations ago.
------------
[335528.782s]Generation 604
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 138; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (194,175) ; iter: (95,-75); seedExpr: (194,175) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.89243027888446
Average Fitness: 3.809035450035613E9
Fitness Variation: 4.613785206403857E9
Distribution: times -> 0.161, 94 -> 0.128, #1 -> 0.079, #3 -> 0.066, 99 -> 0.064, mkPair -> 0.054, prepend -> 0.044, (100,204) -> 0.041, #0 -> 0.041, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 125 generations ago.
------------
[336247.830s]Generation 605
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.824701195219124
Average Fitness: 3.944368711269221E9
Fitness Variation: 4.697154665814354E9
Distribution: times -> 0.158, 94 -> 0.126, #1 -> 0.077, #3 -> 0.069, 99 -> 0.062, mkPair -> 0.056, prepend -> 0.046, (100,204) -> 0.044, 118 -> 0.042, #0 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 126 generations ago.
------------
[336852.051s]Generation 606
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 33 ; iter: 97; seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.04780876494024
Average Fitness: 3.7758747823574514E9
Fitness Variation: 4.660498025491002E9
Distribution: times -> 0.155, 94 -> 0.122, #1 -> 0.072, #3 -> 0.070, 99 -> 0.060, mkPair -> 0.058, (100,204) -> 0.047, prepend -> 0.046, 118 -> 0.044, #0 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 127 generations ago.
------------
[337754.391s]Generation 607
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (96,30) ; iter: #2; seedExpr: (96,30) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.247011952191237
Average Fitness: 4.1054932588913083E9
Fitness Variation: 4.76295315741612E9
Distribution: times -> 0.162, 94 -> 0.128, #1 -> 0.077, #3 -> 0.070, 99 -> 0.064, mkPair -> 0.056, (100,204) -> 0.046, prepend -> 0.046, 118 -> 0.041, #0 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 128 generations ago.
------------
[338643.589s]Generation 608
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 97 ; iter: 97; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.47410358565737
Average Fitness: 4.481357557589701E9
Fitness Variation: 4.785232389439049E9
Distribution: times -> 0.157, 94 -> 0.124, #1 -> 0.076, #3 -> 0.072, 99 -> 0.061, mkPair -> 0.056, prepend -> 0.048, (100,204) -> 0.048, 118 -> 0.043, #0 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 129 generations ago.
------------
[339328.920s]Generation 609
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 193 ; iter: 97; seedExpr: 193 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(193,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.55776892430279
Average Fitness: 3.3613535374152813E9
Fitness Variation: 4.536750073320783E9
Distribution: times -> 0.157, 94 -> 0.123, #1 -> 0.075, #3 -> 0.071, 99 -> 0.061, mkPair -> 0.056, prepend -> 0.047, (100,204) -> 0.046, 118 -> 0.043, #0 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 130 generations ago.
------------
[340006.496s]Generation 610
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 98 ; iter: 97; seedExpr: 98 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: #2; seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(98,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.52191235059761
Average Fitness: 3.8053257611753273E9
Fitness Variation: 4.59526576606995E9
Distribution: times -> 0.157, 94 -> 0.127, #1 -> 0.074, #3 -> 0.071, 99 -> 0.060, mkPair -> 0.057, prepend -> 0.047, (100,204) -> 0.047, #0 -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 131 generations ago.
------------
[340711.888s]Generation 611
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 97 ; iter: 97; seedExpr: 97 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.45816733067729
Average Fitness: 3.5267160236193576E9
Fitness Variation: 4.54573176663125E9
Distribution: times -> 0.155, 94 -> 0.124, #3 -> 0.073, #1 -> 0.071, 99 -> 0.061, mkPair -> 0.058, (100,204) -> 0.046, prepend -> 0.046, 118 -> 0.043, #0 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 132 generations ago.
------------
[341567.988s]Generation 612
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 33 ; iter: 97; seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.0
Average Fitness: 4.42253872727239E9
Fitness Variation: 4.753760951630812E9
Distribution: times -> 0.159, 94 -> 0.128, #1 -> 0.079, #3 -> 0.072, 99 -> 0.064, mkPair -> 0.056, (100,204) -> 0.045, prepend -> 0.045, 118 -> 0.040, #0 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 133 generations ago.
------------
[342112.290s]Generation 613
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 33 ; iter: 97; seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (168,32) ; iter: (95,-75); seedExpr: (168,32) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #4; seedExpr: [] }
Best Individual Pattern: Vector([(168,32),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.211155378486055
Average Fitness: 3.525343091418027E9
Fitness Variation: 4.591108938676086E9
Distribution: times -> 0.164, 94 -> 0.131, #1 -> 0.075, #3 -> 0.071, 99 -> 0.063, mkPair -> 0.056, (100,204) -> 0.045, prepend -> 0.045, 118 -> 0.042, #0 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 134 generations ago.
------------
[342932.657s]Generation 614
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (100,204); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.589641434262948
Average Fitness: 3.3479862728409543E9
Fitness Variation: 4.47573509526337E9
Distribution: times -> 0.155, 94 -> 0.124, #1 -> 0.075, #3 -> 0.073, 99 -> 0.060, mkPair -> 0.057, (100,204) -> 0.047, prepend -> 0.046, #0 -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 135 generations ago.
------------
[343612.761s]Generation 615
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (96,30) ; iter: #2; seedExpr: (96,30) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.97211155378486
Average Fitness: 3.311743730768092E9
Fitness Variation: 4.514240534715026E9
Distribution: times -> 0.162, 94 -> 0.129, #1 -> 0.077, #3 -> 0.069, 99 -> 0.061, mkPair -> 0.055, (100,204) -> 0.046, prepend -> 0.044, #0 -> 0.041, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 136 generations ago.
------------
[344279.938s]Generation 616
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 138; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (194,175) ; iter: (53,57); seedExpr: (194,175) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 31.10756972111554
Average Fitness: 3.674668957750404E9
Fitness Variation: 4.681363436434901E9
Distribution: times -> 0.159, 94 -> 0.124, #1 -> 0.076, #3 -> 0.072, 99 -> 0.063, mkPair -> 0.056, (100,204) -> 0.046, prepend -> 0.046, 118 -> 0.040, #0 -> 0.038
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 137 generations ago.
------------
[345000.857s]Generation 617
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 33 ; iter: 97; seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.195219123505975
Average Fitness: 3.677680559691193E9
Fitness Variation: 4.665165983936313E9
Distribution: times -> 0.156, 94 -> 0.121, #1 -> 0.076, #3 -> 0.073, 99 -> 0.062, mkPair -> 0.056, (100,204) -> 0.050, prepend -> 0.047, 118 -> 0.043, #0 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 138 generations ago.
------------
[345712.903s]Generation 618
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 176 ; iter: 97; seedExpr: 176 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(176,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.52589641434263
Average Fitness: 3.8424550338269076E9
Fitness Variation: 4.625651492577973E9
Distribution: times -> 0.161, 94 -> 0.128, #1 -> 0.076, #3 -> 0.070, 99 -> 0.064, mkPair -> 0.055, (100,204) -> 0.045, prepend -> 0.043, 118 -> 0.041, #0 -> 0.037
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 139 generations ago.
------------
[346636.766s]Generation 619
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 99 ; iter: 97; seedExpr: 99 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (89,122) ; iter: (100,204); seedExpr: (89,122) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(99,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.96812749003984
Average Fitness: 3.857512351167716E9
Fitness Variation: 4.661920528758111E9
Distribution: times -> 0.161, 94 -> 0.125, #1 -> 0.076, #3 -> 0.071, 99 -> 0.063, mkPair -> 0.054, prepend -> 0.044, (100,204) -> 0.044, 118 -> 0.040, #0 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 140 generations ago.
------------
[347449.423s]Generation 620
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 67 ; iter: 97; seedExpr: 67 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: #2; seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(67,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.49402390438247
Average Fitness: 4.0468084679315352E9
Fitness Variation: 4.654938587992152E9
Distribution: times -> 0.157, 94 -> 0.125, #1 -> 0.077, #3 -> 0.072, 99 -> 0.061, mkPair -> 0.055, prepend -> 0.047, (100,204) -> 0.046, #0 -> 0.043, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 141 generations ago.
------------
[348406.898s]Generation 621
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.426294820717132
Average Fitness: 4.072353552827306E9
Fitness Variation: 4.713949199178988E9
Distribution: times -> 0.163, 94 -> 0.127, #1 -> 0.077, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.054, #0 -> 0.044, (100,204) -> 0.044, prepend -> 0.043, 118 -> 0.039
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 142 generations ago.
------------
[349289.052s]Generation 622
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: #2; seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(94,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.131474103585656
Average Fitness: 4.2161720594940014E9
Fitness Variation: 4.735744733192028E9
Distribution: times -> 0.161, 94 -> 0.125, #1 -> 0.077, #3 -> 0.071, 99 -> 0.063, mkPair -> 0.056, (100,204) -> 0.046, prepend -> 0.045, #0 -> 0.044, 118 -> 0.040
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 143 generations ago.
------------
[349841.831s]Generation 623
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 33 ; iter: 97; seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.358565737051794
Average Fitness: 4.137952952494206E9
Fitness Variation: 4.780898006978504E9
Distribution: times -> 0.159, 94 -> 0.125, #1 -> 0.077, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.056, #0 -> 0.045, prepend -> 0.045, (100,204) -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 144 generations ago.
------------
[350517.118s]Generation 624
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 146 ; iter: 97; seedExpr: 146 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (96,30) ; iter: #2; seedExpr: (96,30) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(146,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.298804780876495
Average Fitness: 4.295303180933117E9
Fitness Variation: 4.782659097070386E9
Distribution: times -> 0.159, 94 -> 0.124, #1 -> 0.074, #3 -> 0.070, 99 -> 0.062, mkPair -> 0.056, #0 -> 0.048, (100,204) -> 0.046, prepend -> 0.044, 118 -> 0.043
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 145 generations ago.
------------
[351241.156s]Generation 625
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 157 ; iter: 97; seedExpr: 157 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (89,122) ; iter: (89,122); seedExpr: (89,122) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: []; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(157,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.621513944223107
Average Fitness: 3.8518494404626184E9
Fitness Variation: 4.671124338735371E9
Distribution: times -> 0.161, 94 -> 0.123, #1 -> 0.077, #3 -> 0.071, 99 -> 0.063, mkPair -> 0.057, #0 -> 0.047, (100,204) -> 0.046, prepend -> 0.045, 118 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 146 generations ago.
------------
[351957.452s]Generation 626
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 33 ; iter: 97; seedExpr: 33 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (100,204) ; iter: (95,-75); seedExpr: (100,204) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #3; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(100,204),(100,204),(148,52),(152,42),(142,141),(33,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.235059760956176
Average Fitness: 3.856406381456216E9
Fitness Variation: 4.674054711277784E9
Distribution: times -> 0.158, 94 -> 0.123, #1 -> 0.074, #3 -> 0.070, 99 -> 0.063, mkPair -> 0.057, (100,204) -> 0.049, prepend -> 0.048, #0 -> 0.047, 118 -> 0.044
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 147 generations ago.
------------
[352504.453s]Generation 627
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 67 ; iter: 97; seedExpr: 67 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (58,120) ; iter: (100,204); seedExpr: (58,120) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: #3; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(67,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.334661354581673
Average Fitness: 3.935332724881419E9
Fitness Variation: 4.669841325770503E9
Distribution: times -> 0.159, 94 -> 0.127, #1 -> 0.077, #3 -> 0.071, 99 -> 0.061, mkPair -> 0.056, (100,204) -> 0.049, prepend -> 0.046, #0 -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 148 generations ago.
------------
[353229.610s]Generation 628
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by ConstFold
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 67 ; iter: 97; seedExpr: 67 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (58,120) ; iter: (100,204); seedExpr: (58,120) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [] ; iter: [(148,52),(152,42),(142,141)]; seedExpr: [] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(67,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.254980079681275
Average Fitness: 4.255047655623739E9
Fitness Variation: 4.738579995361887E9
Distribution: times -> 0.160, 94 -> 0.126, #1 -> 0.077, #3 -> 0.070, 99 -> 0.064, mkPair -> 0.056, (100,204) -> 0.049, prepend -> 0.046, #0 -> 0.043, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 149 generations ago.
------------
[353979.839s]Generation 629
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Copy
[O0: EVect(EPair(EInt,EInt))] -> prepend((95,-75), append(prepend((100,204), #3), mkPair(97, 118)))
*
[S0: EInt]{ seed: 94 ; iter: 97; seedExpr: 94 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.207171314741036
Average Fitness: 4.42579561097829E9
Fitness Variation: 4.787352136378993E9
Distribution: times -> 0.162, 94 -> 0.128, #1 -> 0.076, #3 -> 0.069, 99 -> 0.062, mkPair -> 0.056, (100,204) -> 0.047, #0 -> 0.046, prepend -> 0.044, 118 -> 0.042
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 150 generations ago.
------------
[354607.967s]Generation 630
Best Result: (fitness: 9997473430.0, performance: 10333106017.0), Created by Crossover
[O0: EVect(EPair(EInt,EInt))] -> prepend(#2, append(prepend((100,204), #3), mkPair(#0, 118)))
*
[S0: EInt]{ seed: 120 ; iter: 97; seedExpr: 120 }
[S1: EInt]{ seed: 146 ; iter: 98; seedExpr: 146 }
[S2: EPair(EInt,EInt)]{ seed: (95,-75) ; iter: (95,-75); seedExpr: (95,-75) }
[S3: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: append(#3, mkPair(dec(times(94, times(times(#1, 94), 99))), 138)); seedExpr: [(148,52),(152,42),(142,141)] }
[S4: EVect(EPair(EInt,EInt))]{ seed: [(148,52),(152,42),(142,141)] ; iter: #4; seedExpr: [(148,52),(152,42),(142,141)] }
Best Individual Pattern: Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(120,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), Vector([(95,-75),(100,204),(148,52),(152,42),(142,141),(127715543,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(85726871,138),(97,118)]), ...
Average Size: 30.56972111553785
Average Fitness: 3.8069469772253885E9
Fitness Variation: 4.643143896406245E9
Distribution: times -> 0.160, 94 -> 0.127, #1 -> 0.080, #3 -> 0.068, 99 -> 0.063, mkPair -> 0.056, (100,204) -> 0.045, prepend -> 0.045, #0 -> 0.045, 118 -> 0.041
new eval size = (100,MemoryUsage(2000))
Last fitness increase: 151 generations ago.
Evolution Finished!
